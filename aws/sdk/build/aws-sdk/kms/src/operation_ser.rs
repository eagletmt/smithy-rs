// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_cancel_key_deletion_input_body(
    input: &crate::input::CancelKeyDeletionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CancelKeyDeletionInputBody {
        key_id: &input.key_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_connect_custom_key_store_input_body(
    input: &crate::input::ConnectCustomKeyStoreInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ConnectCustomKeyStoreInputBody {
        custom_key_store_id: &input.custom_key_store_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_alias_input_body(
    input: &crate::input::CreateAliasInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateAliasInputBody {
        alias_name: &input.alias_name,
        target_key_id: &input.target_key_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_custom_key_store_input_body(
    input: &crate::input::CreateCustomKeyStoreInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateCustomKeyStoreInputBody {
        custom_key_store_name: &input.custom_key_store_name,
        cloud_hsm_cluster_id: &input.cloud_hsm_cluster_id,
        trust_anchor_certificate: &input.trust_anchor_certificate,
        key_store_password: &input.key_store_password,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_grant_input_body(
    input: &crate::input::CreateGrantInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateGrantInputBody {
        key_id: &input.key_id,
        grantee_principal: &input.grantee_principal,
        retiring_principal: &input.retiring_principal,
        operations: &input.operations,
        constraints: &input.constraints,
        grant_tokens: &input.grant_tokens,
        name: &input.name,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_key_input_body(
    input: &crate::input::CreateKeyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateKeyInputBody {
        policy: &input.policy,
        description: &input.description,
        key_usage: &input.key_usage,
        customer_master_key_spec: &input.customer_master_key_spec,
        origin: &input.origin,
        custom_key_store_id: &input.custom_key_store_id,
        bypass_policy_lockout_safety_check: &input.bypass_policy_lockout_safety_check,
        tags: &input.tags,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_decrypt_input_body(
    input: &crate::input::DecryptInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DecryptInputBody {
        ciphertext_blob: &input.ciphertext_blob,
        encryption_context: &input.encryption_context,
        grant_tokens: &input.grant_tokens,
        key_id: &input.key_id,
        encryption_algorithm: &input.encryption_algorithm,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_delete_alias_input_body(
    input: &crate::input::DeleteAliasInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeleteAliasInputBody {
        alias_name: &input.alias_name,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_delete_custom_key_store_input_body(
    input: &crate::input::DeleteCustomKeyStoreInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeleteCustomKeyStoreInputBody {
        custom_key_store_id: &input.custom_key_store_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_delete_imported_key_material_input_body(
    input: &crate::input::DeleteImportedKeyMaterialInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeleteImportedKeyMaterialInputBody {
        key_id: &input.key_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_custom_key_stores_input_body(
    input: &crate::input::DescribeCustomKeyStoresInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeCustomKeyStoresInputBody {
        custom_key_store_id: &input.custom_key_store_id,
        custom_key_store_name: &input.custom_key_store_name,
        limit: &input.limit,
        marker: &input.marker,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_key_input_body(
    input: &crate::input::DescribeKeyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeKeyInputBody {
        key_id: &input.key_id,
        grant_tokens: &input.grant_tokens,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_disable_key_input_body(
    input: &crate::input::DisableKeyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DisableKeyInputBody {
        key_id: &input.key_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_disable_key_rotation_input_body(
    input: &crate::input::DisableKeyRotationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DisableKeyRotationInputBody {
        key_id: &input.key_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_disconnect_custom_key_store_input_body(
    input: &crate::input::DisconnectCustomKeyStoreInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DisconnectCustomKeyStoreInputBody {
        custom_key_store_id: &input.custom_key_store_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_enable_key_input_body(
    input: &crate::input::EnableKeyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::EnableKeyInputBody {
        key_id: &input.key_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_enable_key_rotation_input_body(
    input: &crate::input::EnableKeyRotationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::EnableKeyRotationInputBody {
        key_id: &input.key_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_encrypt_input_body(
    input: &crate::input::EncryptInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::EncryptInputBody {
        key_id: &input.key_id,
        plaintext: &input.plaintext,
        encryption_context: &input.encryption_context,
        grant_tokens: &input.grant_tokens,
        encryption_algorithm: &input.encryption_algorithm,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_generate_data_key_input_body(
    input: &crate::input::GenerateDataKeyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GenerateDataKeyInputBody {
        key_id: &input.key_id,
        encryption_context: &input.encryption_context,
        number_of_bytes: &input.number_of_bytes,
        key_spec: &input.key_spec,
        grant_tokens: &input.grant_tokens,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_generate_data_key_pair_input_body(
    input: &crate::input::GenerateDataKeyPairInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GenerateDataKeyPairInputBody {
        encryption_context: &input.encryption_context,
        key_id: &input.key_id,
        key_pair_spec: &input.key_pair_spec,
        grant_tokens: &input.grant_tokens,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_generate_data_key_pair_without_plaintext_input_body(
    input: &crate::input::GenerateDataKeyPairWithoutPlaintextInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GenerateDataKeyPairWithoutPlaintextInputBody {
        encryption_context: &input.encryption_context,
        key_id: &input.key_id,
        key_pair_spec: &input.key_pair_spec,
        grant_tokens: &input.grant_tokens,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_generate_data_key_without_plaintext_input_body(
    input: &crate::input::GenerateDataKeyWithoutPlaintextInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GenerateDataKeyWithoutPlaintextInputBody {
        key_id: &input.key_id,
        encryption_context: &input.encryption_context,
        key_spec: &input.key_spec,
        number_of_bytes: &input.number_of_bytes,
        grant_tokens: &input.grant_tokens,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_generate_random_input_body(
    input: &crate::input::GenerateRandomInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GenerateRandomInputBody {
        number_of_bytes: &input.number_of_bytes,
        custom_key_store_id: &input.custom_key_store_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_key_policy_input_body(
    input: &crate::input::GetKeyPolicyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetKeyPolicyInputBody {
        key_id: &input.key_id,
        policy_name: &input.policy_name,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_key_rotation_status_input_body(
    input: &crate::input::GetKeyRotationStatusInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetKeyRotationStatusInputBody {
        key_id: &input.key_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_parameters_for_import_input_body(
    input: &crate::input::GetParametersForImportInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetParametersForImportInputBody {
        key_id: &input.key_id,
        wrapping_algorithm: &input.wrapping_algorithm,
        wrapping_key_spec: &input.wrapping_key_spec,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_public_key_input_body(
    input: &crate::input::GetPublicKeyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetPublicKeyInputBody {
        key_id: &input.key_id,
        grant_tokens: &input.grant_tokens,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_import_key_material_input_body(
    input: &crate::input::ImportKeyMaterialInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ImportKeyMaterialInputBody {
        key_id: &input.key_id,
        import_token: &input.import_token,
        encrypted_key_material: &input.encrypted_key_material,
        valid_to: &input.valid_to,
        expiration_model: &input.expiration_model,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_aliases_input_body(
    input: &crate::input::ListAliasesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListAliasesInputBody {
        key_id: &input.key_id,
        limit: &input.limit,
        marker: &input.marker,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_grants_input_body(
    input: &crate::input::ListGrantsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListGrantsInputBody {
        limit: &input.limit,
        marker: &input.marker,
        key_id: &input.key_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_key_policies_input_body(
    input: &crate::input::ListKeyPoliciesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListKeyPoliciesInputBody {
        key_id: &input.key_id,
        limit: &input.limit,
        marker: &input.marker,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_keys_input_body(
    input: &crate::input::ListKeysInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListKeysInputBody {
        limit: &input.limit,
        marker: &input.marker,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_resource_tags_input_body(
    input: &crate::input::ListResourceTagsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListResourceTagsInputBody {
        key_id: &input.key_id,
        limit: &input.limit,
        marker: &input.marker,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_retirable_grants_input_body(
    input: &crate::input::ListRetirableGrantsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListRetirableGrantsInputBody {
        limit: &input.limit,
        marker: &input.marker,
        retiring_principal: &input.retiring_principal,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_put_key_policy_input_body(
    input: &crate::input::PutKeyPolicyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::PutKeyPolicyInputBody {
        key_id: &input.key_id,
        policy_name: &input.policy_name,
        policy: &input.policy,
        bypass_policy_lockout_safety_check: &input.bypass_policy_lockout_safety_check,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_re_encrypt_input_body(
    input: &crate::input::ReEncryptInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ReEncryptInputBody {
        ciphertext_blob: &input.ciphertext_blob,
        source_encryption_context: &input.source_encryption_context,
        source_key_id: &input.source_key_id,
        destination_key_id: &input.destination_key_id,
        destination_encryption_context: &input.destination_encryption_context,
        source_encryption_algorithm: &input.source_encryption_algorithm,
        destination_encryption_algorithm: &input.destination_encryption_algorithm,
        grant_tokens: &input.grant_tokens,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_retire_grant_input_body(
    input: &crate::input::RetireGrantInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::RetireGrantInputBody {
        grant_token: &input.grant_token,
        key_id: &input.key_id,
        grant_id: &input.grant_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_revoke_grant_input_body(
    input: &crate::input::RevokeGrantInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::RevokeGrantInputBody {
        key_id: &input.key_id,
        grant_id: &input.grant_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_schedule_key_deletion_input_body(
    input: &crate::input::ScheduleKeyDeletionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ScheduleKeyDeletionInputBody {
        key_id: &input.key_id,
        pending_window_in_days: &input.pending_window_in_days,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_sign_input_body(
    input: &crate::input::SignInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::SignInputBody {
        key_id: &input.key_id,
        message: &input.message,
        message_type: &input.message_type,
        grant_tokens: &input.grant_tokens,
        signing_algorithm: &input.signing_algorithm,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_tag_resource_input_body(
    input: &crate::input::TagResourceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::TagResourceInputBody {
        key_id: &input.key_id,
        tags: &input.tags,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_untag_resource_input_body(
    input: &crate::input::UntagResourceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UntagResourceInputBody {
        key_id: &input.key_id,
        tag_keys: &input.tag_keys,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_alias_input_body(
    input: &crate::input::UpdateAliasInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateAliasInputBody {
        alias_name: &input.alias_name,
        target_key_id: &input.target_key_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_custom_key_store_input_body(
    input: &crate::input::UpdateCustomKeyStoreInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateCustomKeyStoreInputBody {
        custom_key_store_id: &input.custom_key_store_id,
        new_custom_key_store_name: &input.new_custom_key_store_name,
        key_store_password: &input.key_store_password,
        cloud_hsm_cluster_id: &input.cloud_hsm_cluster_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_key_description_input_body(
    input: &crate::input::UpdateKeyDescriptionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateKeyDescriptionInputBody {
        key_id: &input.key_id,
        description: &input.description,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_verify_input_body(
    input: &crate::input::VerifyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::VerifyInputBody {
        key_id: &input.key_id,
        message: &input.message,
        message_type: &input.message_type,
        signature: &input.signature,
        signing_algorithm: &input.signing_algorithm,
        grant_tokens: &input.grant_tokens,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}
