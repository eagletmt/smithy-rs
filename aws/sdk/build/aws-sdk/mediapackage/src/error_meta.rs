// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    ForbiddenError(crate::error::ForbiddenError),
    InternalServerErrorError(crate::error::InternalServerErrorError),
    NotFoundError(crate::error::NotFoundError),
    ServiceUnavailableError(crate::error::ServiceUnavailableError),
    TooManyRequestsError(crate::error::TooManyRequestsError),
    UnprocessableEntityError(crate::error::UnprocessableEntityError),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ForbiddenError(inner) => inner.fmt(f),
            Error::InternalServerErrorError(inner) => inner.fmt(f),
            Error::NotFoundError(inner) => inner.fmt(f),
            Error::ServiceUnavailableError(inner) => inner.fmt(f),
            Error::TooManyRequestsError(inner) => inner.fmt(f),
            Error::UnprocessableEntityError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ConfigureLogsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ConfigureLogsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ConfigureLogsErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::ConfigureLogsErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::ConfigureLogsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::ConfigureLogsErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::ConfigureLogsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ConfigureLogsErrorKind::UnprocessableEntityError(inner) => {
                    Error::UnprocessableEntityError(inner)
                }
                crate::error::ConfigureLogsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateChannelError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateChannelError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateChannelErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::CreateChannelErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::CreateChannelErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateChannelErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::CreateChannelErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateChannelErrorKind::UnprocessableEntityError(inner) => {
                    Error::UnprocessableEntityError(inner)
                }
                crate::error::CreateChannelErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateHarvestJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateHarvestJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateHarvestJobErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::CreateHarvestJobErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::CreateHarvestJobErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateHarvestJobErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::CreateHarvestJobErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateHarvestJobErrorKind::UnprocessableEntityError(inner) => {
                    Error::UnprocessableEntityError(inner)
                }
                crate::error::CreateHarvestJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateOriginEndpointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateOriginEndpointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateOriginEndpointErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::CreateOriginEndpointErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::CreateOriginEndpointErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateOriginEndpointErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::CreateOriginEndpointErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateOriginEndpointErrorKind::UnprocessableEntityError(inner) => {
                    Error::UnprocessableEntityError(inner)
                }
                crate::error::CreateOriginEndpointErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteChannelError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteChannelError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteChannelErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::DeleteChannelErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::DeleteChannelErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteChannelErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DeleteChannelErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteChannelErrorKind::UnprocessableEntityError(inner) => {
                    Error::UnprocessableEntityError(inner)
                }
                crate::error::DeleteChannelErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteOriginEndpointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteOriginEndpointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteOriginEndpointErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::DeleteOriginEndpointErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::DeleteOriginEndpointErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteOriginEndpointErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DeleteOriginEndpointErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteOriginEndpointErrorKind::UnprocessableEntityError(inner) => {
                    Error::UnprocessableEntityError(inner)
                }
                crate::error::DeleteOriginEndpointErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeChannelError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeChannelError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeChannelErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::DescribeChannelErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::DescribeChannelErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DescribeChannelErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DescribeChannelErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DescribeChannelErrorKind::UnprocessableEntityError(inner) => {
                    Error::UnprocessableEntityError(inner)
                }
                crate::error::DescribeChannelErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeHarvestJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeHarvestJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeHarvestJobErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::DescribeHarvestJobErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::DescribeHarvestJobErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DescribeHarvestJobErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DescribeHarvestJobErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DescribeHarvestJobErrorKind::UnprocessableEntityError(inner) => {
                    Error::UnprocessableEntityError(inner)
                }
                crate::error::DescribeHarvestJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeOriginEndpointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeOriginEndpointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeOriginEndpointErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::DescribeOriginEndpointErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::DescribeOriginEndpointErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DescribeOriginEndpointErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DescribeOriginEndpointErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DescribeOriginEndpointErrorKind::UnprocessableEntityError(inner) => {
                    Error::UnprocessableEntityError(inner)
                }
                crate::error::DescribeOriginEndpointErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListChannelsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListChannelsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListChannelsErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::ListChannelsErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::ListChannelsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::ListChannelsErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::ListChannelsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListChannelsErrorKind::UnprocessableEntityError(inner) => {
                    Error::UnprocessableEntityError(inner)
                }
                crate::error::ListChannelsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListHarvestJobsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListHarvestJobsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListHarvestJobsErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::ListHarvestJobsErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::ListHarvestJobsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::ListHarvestJobsErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::ListHarvestJobsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListHarvestJobsErrorKind::UnprocessableEntityError(inner) => {
                    Error::UnprocessableEntityError(inner)
                }
                crate::error::ListHarvestJobsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListOriginEndpointsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListOriginEndpointsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListOriginEndpointsErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::ListOriginEndpointsErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::ListOriginEndpointsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::ListOriginEndpointsErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::ListOriginEndpointsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListOriginEndpointsErrorKind::UnprocessableEntityError(inner) => {
                    Error::UnprocessableEntityError(inner)
                }
                crate::error::ListOriginEndpointsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RotateChannelCredentialsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::RotateChannelCredentialsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RotateChannelCredentialsErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::RotateChannelCredentialsErrorKind::InternalServerErrorError(
                    inner,
                ) => Error::InternalServerErrorError(inner),
                crate::error::RotateChannelCredentialsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::RotateChannelCredentialsErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::RotateChannelCredentialsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::RotateChannelCredentialsErrorKind::UnprocessableEntityError(
                    inner,
                ) => Error::UnprocessableEntityError(inner),
                crate::error::RotateChannelCredentialsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RotateIngestEndpointCredentialsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RotateIngestEndpointCredentialsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RotateIngestEndpointCredentialsErrorKind::ForbiddenError(inner) => Error::ForbiddenError(inner),
                crate::error::RotateIngestEndpointCredentialsErrorKind::InternalServerErrorError(inner) => Error::InternalServerErrorError(inner),
                crate::error::RotateIngestEndpointCredentialsErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::RotateIngestEndpointCredentialsErrorKind::ServiceUnavailableError(inner) => Error::ServiceUnavailableError(inner),
                crate::error::RotateIngestEndpointCredentialsErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::RotateIngestEndpointCredentialsErrorKind::UnprocessableEntityError(inner) => Error::UnprocessableEntityError(inner),
                crate::error::RotateIngestEndpointCredentialsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateChannelError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateChannelError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateChannelErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::UpdateChannelErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::UpdateChannelErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateChannelErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::UpdateChannelErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateChannelErrorKind::UnprocessableEntityError(inner) => {
                    Error::UnprocessableEntityError(inner)
                }
                crate::error::UpdateChannelErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateOriginEndpointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateOriginEndpointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateOriginEndpointErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::UpdateOriginEndpointErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::UpdateOriginEndpointErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateOriginEndpointErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::UpdateOriginEndpointErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateOriginEndpointErrorKind::UnprocessableEntityError(inner) => {
                    Error::UnprocessableEntityError(inner)
                }
                crate::error::UpdateOriginEndpointErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
