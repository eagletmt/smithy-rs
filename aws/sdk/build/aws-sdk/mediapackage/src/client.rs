// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(std::fmt::Debug)]
pub(crate) struct Handle {
    client: aws_hyper::Client<aws_hyper::conn::Standard>,
    conf: crate::Config,
}

#[derive(Clone, std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}
impl Client {
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_env() -> Self {
        Self::from_conf_conn(
            crate::Config::builder().build(),
            aws_hyper::conn::Standard::https(),
        )
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        Self::from_conf_conn(conf, aws_hyper::conn::Standard::https())
    }

    pub fn from_conf_conn(conf: crate::Config, conn: aws_hyper::conn::Standard) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
    pub fn configure_logs(&self) -> fluent_builders::ConfigureLogs {
        fluent_builders::ConfigureLogs::new(self.handle.clone())
    }
    pub fn create_channel(&self) -> fluent_builders::CreateChannel {
        fluent_builders::CreateChannel::new(self.handle.clone())
    }
    pub fn create_harvest_job(&self) -> fluent_builders::CreateHarvestJob {
        fluent_builders::CreateHarvestJob::new(self.handle.clone())
    }
    pub fn create_origin_endpoint(&self) -> fluent_builders::CreateOriginEndpoint {
        fluent_builders::CreateOriginEndpoint::new(self.handle.clone())
    }
    pub fn delete_channel(&self) -> fluent_builders::DeleteChannel {
        fluent_builders::DeleteChannel::new(self.handle.clone())
    }
    pub fn delete_origin_endpoint(&self) -> fluent_builders::DeleteOriginEndpoint {
        fluent_builders::DeleteOriginEndpoint::new(self.handle.clone())
    }
    pub fn describe_channel(&self) -> fluent_builders::DescribeChannel {
        fluent_builders::DescribeChannel::new(self.handle.clone())
    }
    pub fn describe_harvest_job(&self) -> fluent_builders::DescribeHarvestJob {
        fluent_builders::DescribeHarvestJob::new(self.handle.clone())
    }
    pub fn describe_origin_endpoint(&self) -> fluent_builders::DescribeOriginEndpoint {
        fluent_builders::DescribeOriginEndpoint::new(self.handle.clone())
    }
    pub fn list_channels(&self) -> fluent_builders::ListChannels {
        fluent_builders::ListChannels::new(self.handle.clone())
    }
    pub fn list_harvest_jobs(&self) -> fluent_builders::ListHarvestJobs {
        fluent_builders::ListHarvestJobs::new(self.handle.clone())
    }
    pub fn list_origin_endpoints(&self) -> fluent_builders::ListOriginEndpoints {
        fluent_builders::ListOriginEndpoints::new(self.handle.clone())
    }
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    pub fn rotate_channel_credentials(&self) -> fluent_builders::RotateChannelCredentials {
        fluent_builders::RotateChannelCredentials::new(self.handle.clone())
    }
    pub fn rotate_ingest_endpoint_credentials(
        &self,
    ) -> fluent_builders::RotateIngestEndpointCredentials {
        fluent_builders::RotateIngestEndpointCredentials::new(self.handle.clone())
    }
    pub fn tag_resource(&self) -> fluent_builders::TagResource {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    pub fn untag_resource(&self) -> fluent_builders::UntagResource {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    pub fn update_channel(&self) -> fluent_builders::UpdateChannel {
        fluent_builders::UpdateChannel::new(self.handle.clone())
    }
    pub fn update_origin_endpoint(&self) -> fluent_builders::UpdateOriginEndpoint {
        fluent_builders::UpdateOriginEndpoint::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct ConfigureLogs {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::configure_logs_input::Builder,
    }
    impl ConfigureLogs {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ConfigureLogsOutput,
            smithy_http::result::SdkError<crate::error::ConfigureLogsError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Configure egress access logging.
        pub fn egress_access_logs(mut self, inp: crate::model::EgressAccessLogs) -> Self {
            self.inner = self.inner.egress_access_logs(inp);
            self
        }
        pub fn set_egress_access_logs(
            mut self,
            inp: std::option::Option<crate::model::EgressAccessLogs>,
        ) -> Self {
            self.inner = self.inner.set_egress_access_logs(inp);
            self
        }
        /// The ID of the channel to log subscription.
        pub fn id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(inp);
            self
        }
        pub fn set_id(mut self, inp: std::string::String) -> Self {
            self.inner = self.inner.set_id(inp);
            self
        }
        /// Configure ingress access logging.
        pub fn ingress_access_logs(mut self, inp: crate::model::IngressAccessLogs) -> Self {
            self.inner = self.inner.ingress_access_logs(inp);
            self
        }
        pub fn set_ingress_access_logs(
            mut self,
            inp: std::option::Option<crate::model::IngressAccessLogs>,
        ) -> Self {
            self.inner = self.inner.set_ingress_access_logs(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateChannel {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_channel_input::Builder,
    }
    impl CreateChannel {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::CreateChannelOutput,
            smithy_http::result::SdkError<crate::error::CreateChannelError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// A short text description of the Channel.
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        pub fn set_description(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(inp);
            self
        }
        /// The ID of the Channel. The ID must be unique within the region and it
        /// cannot be changed after a Channel is created.
        pub fn id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(inp);
            self
        }
        pub fn set_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(inp);
            self
        }
        /// A collection of tags associated with a resource
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.tags(k, v);
            self
        }
        pub fn set_tags(
            mut self,
            inp: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_tags(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateHarvestJob {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_harvest_job_input::Builder,
    }
    impl CreateHarvestJob {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::CreateHarvestJobOutput,
            smithy_http::result::SdkError<crate::error::CreateHarvestJobError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// The end of the time-window which will be harvested
        pub fn end_time(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.end_time(inp);
            self
        }
        pub fn set_end_time(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_end_time(inp);
            self
        }
        /// The ID of the HarvestJob. The ID must be unique within the region
        /// and it cannot be changed after the HarvestJob is submitted
        pub fn id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(inp);
            self
        }
        pub fn set_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(inp);
            self
        }
        /// The ID of the OriginEndpoint that the HarvestJob will harvest from.
        /// This cannot be changed after the HarvestJob is submitted.
        pub fn origin_endpoint_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.origin_endpoint_id(inp);
            self
        }
        pub fn set_origin_endpoint_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_origin_endpoint_id(inp);
            self
        }
        /// Configuration parameters for where in an S3 bucket to place the harvested content
        pub fn s3_destination(mut self, inp: crate::model::S3Destination) -> Self {
            self.inner = self.inner.s3_destination(inp);
            self
        }
        pub fn set_s3_destination(
            mut self,
            inp: std::option::Option<crate::model::S3Destination>,
        ) -> Self {
            self.inner = self.inner.set_s3_destination(inp);
            self
        }
        /// The start of the time-window which will be harvested
        pub fn start_time(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.start_time(inp);
            self
        }
        pub fn set_start_time(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_start_time(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateOriginEndpoint {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_origin_endpoint_input::Builder,
    }
    impl CreateOriginEndpoint {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::CreateOriginEndpointOutput,
            smithy_http::result::SdkError<crate::error::CreateOriginEndpointError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// CDN Authorization credentials
        pub fn authorization(mut self, inp: crate::model::Authorization) -> Self {
            self.inner = self.inner.authorization(inp);
            self
        }
        pub fn set_authorization(
            mut self,
            inp: std::option::Option<crate::model::Authorization>,
        ) -> Self {
            self.inner = self.inner.set_authorization(inp);
            self
        }
        /// The ID of the Channel that the OriginEndpoint will be associated with.
        /// This cannot be changed after the OriginEndpoint is created.
        pub fn channel_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.channel_id(inp);
            self
        }
        pub fn set_channel_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_channel_id(inp);
            self
        }
        /// A Common Media Application Format (CMAF) packaging configuration.
        pub fn cmaf_package(
            mut self,
            inp: crate::model::CmafPackageCreateOrUpdateParameters,
        ) -> Self {
            self.inner = self.inner.cmaf_package(inp);
            self
        }
        pub fn set_cmaf_package(
            mut self,
            inp: std::option::Option<crate::model::CmafPackageCreateOrUpdateParameters>,
        ) -> Self {
            self.inner = self.inner.set_cmaf_package(inp);
            self
        }
        /// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
        pub fn dash_package(mut self, inp: crate::model::DashPackage) -> Self {
            self.inner = self.inner.dash_package(inp);
            self
        }
        pub fn set_dash_package(
            mut self,
            inp: std::option::Option<crate::model::DashPackage>,
        ) -> Self {
            self.inner = self.inner.set_dash_package(inp);
            self
        }
        /// A short text description of the OriginEndpoint.
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        pub fn set_description(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(inp);
            self
        }
        /// An HTTP Live Streaming (HLS) packaging configuration.
        pub fn hls_package(mut self, inp: crate::model::HlsPackage) -> Self {
            self.inner = self.inner.hls_package(inp);
            self
        }
        pub fn set_hls_package(
            mut self,
            inp: std::option::Option<crate::model::HlsPackage>,
        ) -> Self {
            self.inner = self.inner.set_hls_package(inp);
            self
        }
        /// The ID of the OriginEndpoint.  The ID must be unique within the region
        /// and it cannot be changed after the OriginEndpoint is created.
        pub fn id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(inp);
            self
        }
        pub fn set_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_id(inp);
            self
        }
        /// A short string that will be used as the filename of the OriginEndpoint URL (defaults to "index").
        pub fn manifest_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.manifest_name(inp);
            self
        }
        pub fn set_manifest_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_manifest_name(inp);
            self
        }
        /// A Microsoft Smooth Streaming (MSS) packaging configuration.
        pub fn mss_package(mut self, inp: crate::model::MssPackage) -> Self {
            self.inner = self.inner.mss_package(inp);
            self
        }
        pub fn set_mss_package(
            mut self,
            inp: std::option::Option<crate::model::MssPackage>,
        ) -> Self {
            self.inner = self.inner.set_mss_package(inp);
            self
        }
        /// Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint
        /// may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be
        /// requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
        pub fn origination(mut self, inp: crate::model::Origination) -> Self {
            self.inner = self.inner.origination(inp);
            self
        }
        pub fn set_origination(
            mut self,
            inp: std::option::Option<crate::model::Origination>,
        ) -> Self {
            self.inner = self.inner.set_origination(inp);
            self
        }
        /// Maximum duration (seconds) of content to retain for startover playback.
        /// If not specified, startover playback will be disabled for the OriginEndpoint.
        pub fn startover_window_seconds(mut self, inp: i32) -> Self {
            self.inner = self.inner.startover_window_seconds(inp);
            self
        }
        pub fn set_startover_window_seconds(mut self, inp: i32) -> Self {
            self.inner = self.inner.set_startover_window_seconds(inp);
            self
        }
        /// A collection of tags associated with a resource
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.tags(k, v);
            self
        }
        pub fn set_tags(
            mut self,
            inp: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_tags(inp);
            self
        }
        /// Amount of delay (seconds) to enforce on the playback of live content.
        /// If not specified, there will be no time delay in effect for the OriginEndpoint.
        pub fn time_delay_seconds(mut self, inp: i32) -> Self {
            self.inner = self.inner.time_delay_seconds(inp);
            self
        }
        pub fn set_time_delay_seconds(mut self, inp: i32) -> Self {
            self.inner = self.inner.set_time_delay_seconds(inp);
            self
        }
        /// A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
        pub fn whitelist(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.whitelist(inp);
            self
        }
        pub fn set_whitelist(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_whitelist(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteChannel {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_channel_input::Builder,
    }
    impl DeleteChannel {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DeleteChannelOutput,
            smithy_http::result::SdkError<crate::error::DeleteChannelError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// The ID of the Channel to delete.
        pub fn id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(inp);
            self
        }
        pub fn set_id(mut self, inp: std::string::String) -> Self {
            self.inner = self.inner.set_id(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteOriginEndpoint {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_origin_endpoint_input::Builder,
    }
    impl DeleteOriginEndpoint {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DeleteOriginEndpointOutput,
            smithy_http::result::SdkError<crate::error::DeleteOriginEndpointError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// The ID of the OriginEndpoint to delete.
        pub fn id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(inp);
            self
        }
        pub fn set_id(mut self, inp: std::string::String) -> Self {
            self.inner = self.inner.set_id(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeChannel {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_channel_input::Builder,
    }
    impl DescribeChannel {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DescribeChannelOutput,
            smithy_http::result::SdkError<crate::error::DescribeChannelError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// The ID of a Channel.
        pub fn id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(inp);
            self
        }
        pub fn set_id(mut self, inp: std::string::String) -> Self {
            self.inner = self.inner.set_id(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeHarvestJob {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_harvest_job_input::Builder,
    }
    impl DescribeHarvestJob {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DescribeHarvestJobOutput,
            smithy_http::result::SdkError<crate::error::DescribeHarvestJobError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// The ID of the HarvestJob.
        pub fn id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(inp);
            self
        }
        pub fn set_id(mut self, inp: std::string::String) -> Self {
            self.inner = self.inner.set_id(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeOriginEndpoint {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_origin_endpoint_input::Builder,
    }
    impl DescribeOriginEndpoint {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DescribeOriginEndpointOutput,
            smithy_http::result::SdkError<crate::error::DescribeOriginEndpointError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// The ID of the OriginEndpoint.
        pub fn id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(inp);
            self
        }
        pub fn set_id(mut self, inp: std::string::String) -> Self {
            self.inner = self.inner.set_id(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListChannels {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_channels_input::Builder,
    }
    impl ListChannels {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ListChannelsOutput,
            smithy_http::result::SdkError<crate::error::ListChannelsError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Upper bound on number of records to return.
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.set_max_results(inp);
            self
        }
        /// A token used to resume pagination from the end of a previous request.
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListHarvestJobs {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_harvest_jobs_input::Builder,
    }
    impl ListHarvestJobs {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ListHarvestJobsOutput,
            smithy_http::result::SdkError<crate::error::ListHarvestJobsError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// When specified, the request will return only HarvestJobs associated with the given Channel ID.
        pub fn include_channel_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.include_channel_id(inp);
            self
        }
        pub fn set_include_channel_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_include_channel_id(inp);
            self
        }
        /// When specified, the request will return only HarvestJobs in the given status.
        pub fn include_status(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.include_status(inp);
            self
        }
        pub fn set_include_status(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_include_status(inp);
            self
        }
        /// The upper bound on the number of records to return.
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.set_max_results(inp);
            self
        }
        /// A token used to resume pagination from the end of a previous request.
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListOriginEndpoints {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_origin_endpoints_input::Builder,
    }
    impl ListOriginEndpoints {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ListOriginEndpointsOutput,
            smithy_http::result::SdkError<crate::error::ListOriginEndpointsError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// When specified, the request will return only OriginEndpoints associated with the given Channel ID.
        pub fn channel_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.channel_id(inp);
            self
        }
        pub fn set_channel_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_channel_id(inp);
            self
        }
        /// The upper bound on the number of records to return.
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.set_max_results(inp);
            self
        }
        /// A token used to resume pagination from the end of a previous request.
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListTagsForResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl ListTagsForResource {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::ListTagsForResourceOutput,
            smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, inp: std::string::String) -> Self {
            self.inner = self.inner.set_resource_arn(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RotateChannelCredentials {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::rotate_channel_credentials_input::Builder,
    }
    impl RotateChannelCredentials {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::RotateChannelCredentialsOutput,
            smithy_http::result::SdkError<crate::error::RotateChannelCredentialsError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// The ID of the channel to update.
        pub fn id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(inp);
            self
        }
        pub fn set_id(mut self, inp: std::string::String) -> Self {
            self.inner = self.inner.set_id(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RotateIngestEndpointCredentials {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::rotate_ingest_endpoint_credentials_input::Builder,
    }
    impl RotateIngestEndpointCredentials {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::RotateIngestEndpointCredentialsOutput,
            smithy_http::result::SdkError<crate::error::RotateIngestEndpointCredentialsError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// The ID of the channel the IngestEndpoint is on.
        pub fn id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(inp);
            self
        }
        pub fn set_id(mut self, inp: std::string::String) -> Self {
            self.inner = self.inner.set_id(inp);
            self
        }
        /// The id of the IngestEndpoint whose credentials should be rotated
        pub fn ingest_endpoint_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ingest_endpoint_id(inp);
            self
        }
        pub fn set_ingest_endpoint_id(mut self, inp: std::string::String) -> Self {
            self.inner = self.inner.set_ingest_endpoint_id(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct TagResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl TagResource {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::TagResourceOutput,
            smithy_http::result::SdkError<crate::error::TagResourceError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, inp: std::string::String) -> Self {
            self.inner = self.inner.set_resource_arn(inp);
            self
        }
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.tags(k, v);
            self
        }
        pub fn set_tags(
            mut self,
            inp: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_tags(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UntagResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl UntagResource {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::UntagResourceOutput,
            smithy_http::result::SdkError<crate::error::UntagResourceError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, inp: std::string::String) -> Self {
            self.inner = self.inner.set_resource_arn(inp);
            self
        }
        /// The key(s) of tag to be deleted
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        pub fn set_tag_keys(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateChannel {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_channel_input::Builder,
    }
    impl UpdateChannel {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::UpdateChannelOutput,
            smithy_http::result::SdkError<crate::error::UpdateChannelError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// A short text description of the Channel.
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        pub fn set_description(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(inp);
            self
        }
        /// The ID of the Channel to update.
        pub fn id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(inp);
            self
        }
        pub fn set_id(mut self, inp: std::string::String) -> Self {
            self.inner = self.inner.set_id(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateOriginEndpoint {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_origin_endpoint_input::Builder,
    }
    impl UpdateOriginEndpoint {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::UpdateOriginEndpointOutput,
            smithy_http::result::SdkError<crate::error::UpdateOriginEndpointError>,
        > {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// CDN Authorization credentials
        pub fn authorization(mut self, inp: crate::model::Authorization) -> Self {
            self.inner = self.inner.authorization(inp);
            self
        }
        pub fn set_authorization(
            mut self,
            inp: std::option::Option<crate::model::Authorization>,
        ) -> Self {
            self.inner = self.inner.set_authorization(inp);
            self
        }
        /// A Common Media Application Format (CMAF) packaging configuration.
        pub fn cmaf_package(
            mut self,
            inp: crate::model::CmafPackageCreateOrUpdateParameters,
        ) -> Self {
            self.inner = self.inner.cmaf_package(inp);
            self
        }
        pub fn set_cmaf_package(
            mut self,
            inp: std::option::Option<crate::model::CmafPackageCreateOrUpdateParameters>,
        ) -> Self {
            self.inner = self.inner.set_cmaf_package(inp);
            self
        }
        /// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
        pub fn dash_package(mut self, inp: crate::model::DashPackage) -> Self {
            self.inner = self.inner.dash_package(inp);
            self
        }
        pub fn set_dash_package(
            mut self,
            inp: std::option::Option<crate::model::DashPackage>,
        ) -> Self {
            self.inner = self.inner.set_dash_package(inp);
            self
        }
        /// A short text description of the OriginEndpoint.
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        pub fn set_description(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(inp);
            self
        }
        /// An HTTP Live Streaming (HLS) packaging configuration.
        pub fn hls_package(mut self, inp: crate::model::HlsPackage) -> Self {
            self.inner = self.inner.hls_package(inp);
            self
        }
        pub fn set_hls_package(
            mut self,
            inp: std::option::Option<crate::model::HlsPackage>,
        ) -> Self {
            self.inner = self.inner.set_hls_package(inp);
            self
        }
        /// The ID of the OriginEndpoint to update.
        pub fn id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.id(inp);
            self
        }
        pub fn set_id(mut self, inp: std::string::String) -> Self {
            self.inner = self.inner.set_id(inp);
            self
        }
        /// A short string that will be appended to the end of the Endpoint URL.
        pub fn manifest_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.manifest_name(inp);
            self
        }
        pub fn set_manifest_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_manifest_name(inp);
            self
        }
        /// A Microsoft Smooth Streaming (MSS) packaging configuration.
        pub fn mss_package(mut self, inp: crate::model::MssPackage) -> Self {
            self.inner = self.inner.mss_package(inp);
            self
        }
        pub fn set_mss_package(
            mut self,
            inp: std::option::Option<crate::model::MssPackage>,
        ) -> Self {
            self.inner = self.inner.set_mss_package(inp);
            self
        }
        /// Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint
        /// may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be
        /// requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
        pub fn origination(mut self, inp: crate::model::Origination) -> Self {
            self.inner = self.inner.origination(inp);
            self
        }
        pub fn set_origination(
            mut self,
            inp: std::option::Option<crate::model::Origination>,
        ) -> Self {
            self.inner = self.inner.set_origination(inp);
            self
        }
        /// Maximum duration (in seconds) of content to retain for startover playback.
        /// If not specified, startover playback will be disabled for the OriginEndpoint.
        pub fn startover_window_seconds(mut self, inp: i32) -> Self {
            self.inner = self.inner.startover_window_seconds(inp);
            self
        }
        pub fn set_startover_window_seconds(mut self, inp: i32) -> Self {
            self.inner = self.inner.set_startover_window_seconds(inp);
            self
        }
        /// Amount of delay (in seconds) to enforce on the playback of live content.
        /// If not specified, there will be no time delay in effect for the OriginEndpoint.
        pub fn time_delay_seconds(mut self, inp: i32) -> Self {
            self.inner = self.inner.time_delay_seconds(inp);
            self
        }
        pub fn set_time_delay_seconds(mut self, inp: i32) -> Self {
            self.inner = self.inner.set_time_delay_seconds(inp);
            self
        }
        /// A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
        pub fn whitelist(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.whitelist(inp);
            self
        }
        pub fn set_whitelist(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_whitelist(inp);
            self
        }
    }
}
