// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_cancel_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelJobInput,
) {
    if let Some(var_1) = &input.job_id {
        object.key("jobId").string(var_1);
    }
    if let Some(var_2) = &input.reason {
        object.key("reason").string(var_2);
    }
}

pub fn serialize_structure_create_compute_environment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateComputeEnvironmentInput,
) {
    if let Some(var_3) = &input.compute_environment_name {
        object.key("computeEnvironmentName").string(var_3);
    }
    if let Some(var_4) = &input.compute_resources {
        let mut object_5 = object.key("computeResources").start_object();
        crate::json_ser::serialize_structure_compute_resource(&mut object_5, var_4);
        object_5.finish();
    }
    if let Some(var_6) = &input.service_role {
        object.key("serviceRole").string(var_6);
    }
    if let Some(var_7) = &input.state {
        object.key("state").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        let mut object_9 = object.key("tags").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10).string(value_11);
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.r#type {
        object.key("type").string(var_12.as_str());
    }
}

pub fn serialize_structure_create_job_queue_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateJobQueueInput,
) {
    if let Some(var_13) = &input.compute_environment_order {
        let mut array_14 = object.key("computeEnvironmentOrder").start_array();
        for item_15 in var_13 {
            {
                let mut object_16 = array_14.value().start_object();
                crate::json_ser::serialize_structure_compute_environment_order(
                    &mut object_16,
                    item_15,
                );
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.job_queue_name {
        object.key("jobQueueName").string(var_17);
    }
    {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_18) = &input.state {
        object.key("state").string(var_18.as_str());
    }
    if let Some(var_19) = &input.tags {
        let mut object_20 = object.key("tags").start_object();
        for (key_21, value_22) in var_19 {
            {
                object_20.key(key_21).string(value_22);
            }
        }
        object_20.finish();
    }
}

pub fn serialize_structure_delete_compute_environment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteComputeEnvironmentInput,
) {
    if let Some(var_23) = &input.compute_environment {
        object.key("computeEnvironment").string(var_23);
    }
}

pub fn serialize_structure_delete_job_queue_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteJobQueueInput,
) {
    if let Some(var_24) = &input.job_queue {
        object.key("jobQueue").string(var_24);
    }
}

pub fn serialize_structure_deregister_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterJobDefinitionInput,
) {
    if let Some(var_25) = &input.job_definition {
        object.key("jobDefinition").string(var_25);
    }
}

pub fn serialize_structure_describe_compute_environments_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeComputeEnvironmentsInput,
) {
    if let Some(var_26) = &input.compute_environments {
        let mut array_27 = object.key("computeEnvironments").start_array();
        for item_28 in var_26 {
            {
                array_27.value().string(item_28);
            }
        }
        array_27.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_29) = &input.next_token {
        object.key("nextToken").string(var_29);
    }
}

pub fn serialize_structure_describe_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeJobDefinitionsInput,
) {
    if let Some(var_30) = &input.job_definition_name {
        object.key("jobDefinitionName").string(var_30);
    }
    if let Some(var_31) = &input.job_definitions {
        let mut array_32 = object.key("jobDefinitions").start_array();
        for item_33 in var_31 {
            {
                array_32.value().string(item_33);
            }
        }
        array_32.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_34) = &input.next_token {
        object.key("nextToken").string(var_34);
    }
    if let Some(var_35) = &input.status {
        object.key("status").string(var_35);
    }
}

pub fn serialize_structure_describe_job_queues_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeJobQueuesInput,
) {
    if let Some(var_36) = &input.job_queues {
        let mut array_37 = object.key("jobQueues").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38);
            }
        }
        array_37.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_39) = &input.next_token {
        object.key("nextToken").string(var_39);
    }
}

pub fn serialize_structure_describe_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeJobsInput,
) {
    if let Some(var_40) = &input.jobs {
        let mut array_41 = object.key("jobs").start_array();
        for item_42 in var_40 {
            {
                array_41.value().string(item_42);
            }
        }
        array_41.finish();
    }
}

pub fn serialize_structure_list_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListJobsInput,
) {
    if let Some(var_43) = &input.array_job_id {
        object.key("arrayJobId").string(var_43);
    }
    if let Some(var_44) = &input.job_queue {
        object.key("jobQueue").string(var_44);
    }
    if let Some(var_45) = &input.job_status {
        object.key("jobStatus").string(var_45.as_str());
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_46) = &input.multi_node_job_id {
        object.key("multiNodeJobId").string(var_46);
    }
    if let Some(var_47) = &input.next_token {
        object.key("nextToken").string(var_47);
    }
}

pub fn serialize_structure_register_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterJobDefinitionInput,
) {
    if let Some(var_48) = &input.container_properties {
        let mut object_49 = object.key("containerProperties").start_object();
        crate::json_ser::serialize_structure_container_properties(&mut object_49, var_48);
        object_49.finish();
    }
    if let Some(var_50) = &input.job_definition_name {
        object.key("jobDefinitionName").string(var_50);
    }
    if let Some(var_51) = &input.node_properties {
        let mut object_52 = object.key("nodeProperties").start_object();
        crate::json_ser::serialize_structure_node_properties(&mut object_52, var_51);
        object_52.finish();
    }
    if let Some(var_53) = &input.parameters {
        let mut object_54 = object.key("parameters").start_object();
        for (key_55, value_56) in var_53 {
            {
                object_54.key(key_55).string(value_56);
            }
        }
        object_54.finish();
    }
    if let Some(var_57) = &input.platform_capabilities {
        let mut array_58 = object.key("platformCapabilities").start_array();
        for item_59 in var_57 {
            {
                array_58.value().string(item_59.as_str());
            }
        }
        array_58.finish();
    }
    if input.propagate_tags {
        object.key("propagateTags").boolean(input.propagate_tags);
    }
    if let Some(var_60) = &input.retry_strategy {
        let mut object_61 = object.key("retryStrategy").start_object();
        crate::json_ser::serialize_structure_retry_strategy(&mut object_61, var_60);
        object_61.finish();
    }
    if let Some(var_62) = &input.tags {
        let mut object_63 = object.key("tags").start_object();
        for (key_64, value_65) in var_62 {
            {
                object_63.key(key_64).string(value_65);
            }
        }
        object_63.finish();
    }
    if let Some(var_66) = &input.timeout {
        let mut object_67 = object.key("timeout").start_object();
        crate::json_ser::serialize_structure_job_timeout(&mut object_67, var_66);
        object_67.finish();
    }
    if let Some(var_68) = &input.r#type {
        object.key("type").string(var_68.as_str());
    }
}

pub fn serialize_structure_submit_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SubmitJobInput,
) {
    if let Some(var_69) = &input.array_properties {
        let mut object_70 = object.key("arrayProperties").start_object();
        crate::json_ser::serialize_structure_array_properties(&mut object_70, var_69);
        object_70.finish();
    }
    if let Some(var_71) = &input.container_overrides {
        let mut object_72 = object.key("containerOverrides").start_object();
        crate::json_ser::serialize_structure_container_overrides(&mut object_72, var_71);
        object_72.finish();
    }
    if let Some(var_73) = &input.depends_on {
        let mut array_74 = object.key("dependsOn").start_array();
        for item_75 in var_73 {
            {
                let mut object_76 = array_74.value().start_object();
                crate::json_ser::serialize_structure_job_dependency(&mut object_76, item_75);
                object_76.finish();
            }
        }
        array_74.finish();
    }
    if let Some(var_77) = &input.job_definition {
        object.key("jobDefinition").string(var_77);
    }
    if let Some(var_78) = &input.job_name {
        object.key("jobName").string(var_78);
    }
    if let Some(var_79) = &input.job_queue {
        object.key("jobQueue").string(var_79);
    }
    if let Some(var_80) = &input.node_overrides {
        let mut object_81 = object.key("nodeOverrides").start_object();
        crate::json_ser::serialize_structure_node_overrides(&mut object_81, var_80);
        object_81.finish();
    }
    if let Some(var_82) = &input.parameters {
        let mut object_83 = object.key("parameters").start_object();
        for (key_84, value_85) in var_82 {
            {
                object_83.key(key_84).string(value_85);
            }
        }
        object_83.finish();
    }
    if input.propagate_tags {
        object.key("propagateTags").boolean(input.propagate_tags);
    }
    if let Some(var_86) = &input.retry_strategy {
        let mut object_87 = object.key("retryStrategy").start_object();
        crate::json_ser::serialize_structure_retry_strategy(&mut object_87, var_86);
        object_87.finish();
    }
    if let Some(var_88) = &input.tags {
        let mut object_89 = object.key("tags").start_object();
        for (key_90, value_91) in var_88 {
            {
                object_89.key(key_90).string(value_91);
            }
        }
        object_89.finish();
    }
    if let Some(var_92) = &input.timeout {
        let mut object_93 = object.key("timeout").start_object();
        crate::json_ser::serialize_structure_job_timeout(&mut object_93, var_92);
        object_93.finish();
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_94) = &input.tags {
        let mut object_95 = object.key("tags").start_object();
        for (key_96, value_97) in var_94 {
            {
                object_95.key(key_96).string(value_97);
            }
        }
        object_95.finish();
    }
}

pub fn serialize_structure_terminate_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TerminateJobInput,
) {
    if let Some(var_98) = &input.job_id {
        object.key("jobId").string(var_98);
    }
    if let Some(var_99) = &input.reason {
        object.key("reason").string(var_99);
    }
}

pub fn serialize_structure_update_compute_environment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateComputeEnvironmentInput,
) {
    if let Some(var_100) = &input.compute_environment {
        object.key("computeEnvironment").string(var_100);
    }
    if let Some(var_101) = &input.compute_resources {
        let mut object_102 = object.key("computeResources").start_object();
        crate::json_ser::serialize_structure_compute_resource_update(&mut object_102, var_101);
        object_102.finish();
    }
    if let Some(var_103) = &input.service_role {
        object.key("serviceRole").string(var_103);
    }
    if let Some(var_104) = &input.state {
        object.key("state").string(var_104.as_str());
    }
}

pub fn serialize_structure_update_job_queue_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateJobQueueInput,
) {
    if let Some(var_105) = &input.compute_environment_order {
        let mut array_106 = object.key("computeEnvironmentOrder").start_array();
        for item_107 in var_105 {
            {
                let mut object_108 = array_106.value().start_object();
                crate::json_ser::serialize_structure_compute_environment_order(
                    &mut object_108,
                    item_107,
                );
                object_108.finish();
            }
        }
        array_106.finish();
    }
    if let Some(var_109) = &input.job_queue {
        object.key("jobQueue").string(var_109);
    }
    if input.priority != 0 {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_110) = &input.state {
        object.key("state").string(var_110.as_str());
    }
}

pub fn serialize_structure_compute_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComputeResource,
) {
    if let Some(var_111) = &input.r#type {
        object.key("type").string(var_111.as_str());
    }
    if let Some(var_112) = &input.allocation_strategy {
        object.key("allocationStrategy").string(var_112.as_str());
    }
    if input.minv_cpus != 0 {
        object.key("minvCpus").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.minv_cpus).into()),
        );
    }
    {
        object.key("maxvCpus").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.maxv_cpus).into()),
        );
    }
    if input.desiredv_cpus != 0 {
        object.key("desiredvCpus").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.desiredv_cpus).into()),
        );
    }
    if let Some(var_113) = &input.instance_types {
        let mut array_114 = object.key("instanceTypes").start_array();
        for item_115 in var_113 {
            {
                array_114.value().string(item_115);
            }
        }
        array_114.finish();
    }
    if let Some(var_116) = &input.image_id {
        object.key("imageId").string(var_116);
    }
    if let Some(var_117) = &input.subnets {
        let mut array_118 = object.key("subnets").start_array();
        for item_119 in var_117 {
            {
                array_118.value().string(item_119);
            }
        }
        array_118.finish();
    }
    if let Some(var_120) = &input.security_group_ids {
        let mut array_121 = object.key("securityGroupIds").start_array();
        for item_122 in var_120 {
            {
                array_121.value().string(item_122);
            }
        }
        array_121.finish();
    }
    if let Some(var_123) = &input.ec2_key_pair {
        object.key("ec2KeyPair").string(var_123);
    }
    if let Some(var_124) = &input.instance_role {
        object.key("instanceRole").string(var_124);
    }
    if let Some(var_125) = &input.tags {
        let mut object_126 = object.key("tags").start_object();
        for (key_127, value_128) in var_125 {
            {
                object_126.key(key_127).string(value_128);
            }
        }
        object_126.finish();
    }
    if let Some(var_129) = &input.placement_group {
        object.key("placementGroup").string(var_129);
    }
    if input.bid_percentage != 0 {
        object.key("bidPercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.bid_percentage).into()),
        );
    }
    if let Some(var_130) = &input.spot_iam_fleet_role {
        object.key("spotIamFleetRole").string(var_130);
    }
    if let Some(var_131) = &input.launch_template {
        let mut object_132 = object.key("launchTemplate").start_object();
        crate::json_ser::serialize_structure_launch_template_specification(
            &mut object_132,
            var_131,
        );
        object_132.finish();
    }
    if let Some(var_133) = &input.ec2_configuration {
        let mut array_134 = object.key("ec2Configuration").start_array();
        for item_135 in var_133 {
            {
                let mut object_136 = array_134.value().start_object();
                crate::json_ser::serialize_structure_ec2_configuration(&mut object_136, item_135);
                object_136.finish();
            }
        }
        array_134.finish();
    }
}

pub fn serialize_structure_compute_environment_order(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComputeEnvironmentOrder,
) {
    {
        object.key("order").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.order).into()),
        );
    }
    if let Some(var_137) = &input.compute_environment {
        object.key("computeEnvironment").string(var_137);
    }
}

pub fn serialize_structure_container_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerProperties,
) {
    if let Some(var_138) = &input.image {
        object.key("image").string(var_138);
    }
    if input.vcpus != 0 {
        object.key("vcpus").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.vcpus).into()),
        );
    }
    if input.memory != 0 {
        object.key("memory").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.memory).into()),
        );
    }
    if let Some(var_139) = &input.command {
        let mut array_140 = object.key("command").start_array();
        for item_141 in var_139 {
            {
                array_140.value().string(item_141);
            }
        }
        array_140.finish();
    }
    if let Some(var_142) = &input.job_role_arn {
        object.key("jobRoleArn").string(var_142);
    }
    if let Some(var_143) = &input.execution_role_arn {
        object.key("executionRoleArn").string(var_143);
    }
    if let Some(var_144) = &input.volumes {
        let mut array_145 = object.key("volumes").start_array();
        for item_146 in var_144 {
            {
                let mut object_147 = array_145.value().start_object();
                crate::json_ser::serialize_structure_volume(&mut object_147, item_146);
                object_147.finish();
            }
        }
        array_145.finish();
    }
    if let Some(var_148) = &input.environment {
        let mut array_149 = object.key("environment").start_array();
        for item_150 in var_148 {
            {
                let mut object_151 = array_149.value().start_object();
                crate::json_ser::serialize_structure_key_value_pair(&mut object_151, item_150);
                object_151.finish();
            }
        }
        array_149.finish();
    }
    if let Some(var_152) = &input.mount_points {
        let mut array_153 = object.key("mountPoints").start_array();
        for item_154 in var_152 {
            {
                let mut object_155 = array_153.value().start_object();
                crate::json_ser::serialize_structure_mount_point(&mut object_155, item_154);
                object_155.finish();
            }
        }
        array_153.finish();
    }
    if input.readonly_root_filesystem {
        object
            .key("readonlyRootFilesystem")
            .boolean(input.readonly_root_filesystem);
    }
    if input.privileged {
        object.key("privileged").boolean(input.privileged);
    }
    if let Some(var_156) = &input.ulimits {
        let mut array_157 = object.key("ulimits").start_array();
        for item_158 in var_156 {
            {
                let mut object_159 = array_157.value().start_object();
                crate::json_ser::serialize_structure_ulimit(&mut object_159, item_158);
                object_159.finish();
            }
        }
        array_157.finish();
    }
    if let Some(var_160) = &input.user {
        object.key("user").string(var_160);
    }
    if let Some(var_161) = &input.instance_type {
        object.key("instanceType").string(var_161);
    }
    if let Some(var_162) = &input.resource_requirements {
        let mut array_163 = object.key("resourceRequirements").start_array();
        for item_164 in var_162 {
            {
                let mut object_165 = array_163.value().start_object();
                crate::json_ser::serialize_structure_resource_requirement(
                    &mut object_165,
                    item_164,
                );
                object_165.finish();
            }
        }
        array_163.finish();
    }
    if let Some(var_166) = &input.linux_parameters {
        let mut object_167 = object.key("linuxParameters").start_object();
        crate::json_ser::serialize_structure_linux_parameters(&mut object_167, var_166);
        object_167.finish();
    }
    if let Some(var_168) = &input.log_configuration {
        let mut object_169 = object.key("logConfiguration").start_object();
        crate::json_ser::serialize_structure_log_configuration(&mut object_169, var_168);
        object_169.finish();
    }
    if let Some(var_170) = &input.secrets {
        let mut array_171 = object.key("secrets").start_array();
        for item_172 in var_170 {
            {
                let mut object_173 = array_171.value().start_object();
                crate::json_ser::serialize_structure_secret(&mut object_173, item_172);
                object_173.finish();
            }
        }
        array_171.finish();
    }
    if let Some(var_174) = &input.network_configuration {
        let mut object_175 = object.key("networkConfiguration").start_object();
        crate::json_ser::serialize_structure_network_configuration(&mut object_175, var_174);
        object_175.finish();
    }
    if let Some(var_176) = &input.fargate_platform_configuration {
        let mut object_177 = object.key("fargatePlatformConfiguration").start_object();
        crate::json_ser::serialize_structure_fargate_platform_configuration(
            &mut object_177,
            var_176,
        );
        object_177.finish();
    }
}

pub fn serialize_structure_node_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NodeProperties,
) {
    {
        object.key("numNodes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.num_nodes).into()),
        );
    }
    {
        object.key("mainNode").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.main_node).into()),
        );
    }
    if let Some(var_178) = &input.node_range_properties {
        let mut array_179 = object.key("nodeRangeProperties").start_array();
        for item_180 in var_178 {
            {
                let mut object_181 = array_179.value().start_object();
                crate::json_ser::serialize_structure_node_range_property(&mut object_181, item_180);
                object_181.finish();
            }
        }
        array_179.finish();
    }
}

pub fn serialize_structure_retry_strategy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetryStrategy,
) {
    if input.attempts != 0 {
        object.key("attempts").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.attempts).into()),
        );
    }
    if let Some(var_182) = &input.evaluate_on_exit {
        let mut array_183 = object.key("evaluateOnExit").start_array();
        for item_184 in var_182 {
            {
                let mut object_185 = array_183.value().start_object();
                crate::json_ser::serialize_structure_evaluate_on_exit(&mut object_185, item_184);
                object_185.finish();
            }
        }
        array_183.finish();
    }
}

pub fn serialize_structure_job_timeout(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobTimeout,
) {
    if input.attempt_duration_seconds != 0 {
        object.key("attemptDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.attempt_duration_seconds).into()),
        );
    }
}

pub fn serialize_structure_array_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArrayProperties,
) {
    if input.size != 0 {
        object.key("size").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.size).into()),
        );
    }
}

pub fn serialize_structure_container_overrides(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerOverrides,
) {
    if input.vcpus != 0 {
        object.key("vcpus").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.vcpus).into()),
        );
    }
    if input.memory != 0 {
        object.key("memory").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.memory).into()),
        );
    }
    if let Some(var_186) = &input.command {
        let mut array_187 = object.key("command").start_array();
        for item_188 in var_186 {
            {
                array_187.value().string(item_188);
            }
        }
        array_187.finish();
    }
    if let Some(var_189) = &input.instance_type {
        object.key("instanceType").string(var_189);
    }
    if let Some(var_190) = &input.environment {
        let mut array_191 = object.key("environment").start_array();
        for item_192 in var_190 {
            {
                let mut object_193 = array_191.value().start_object();
                crate::json_ser::serialize_structure_key_value_pair(&mut object_193, item_192);
                object_193.finish();
            }
        }
        array_191.finish();
    }
    if let Some(var_194) = &input.resource_requirements {
        let mut array_195 = object.key("resourceRequirements").start_array();
        for item_196 in var_194 {
            {
                let mut object_197 = array_195.value().start_object();
                crate::json_ser::serialize_structure_resource_requirement(
                    &mut object_197,
                    item_196,
                );
                object_197.finish();
            }
        }
        array_195.finish();
    }
}

pub fn serialize_structure_job_dependency(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobDependency,
) {
    if let Some(var_198) = &input.job_id {
        object.key("jobId").string(var_198);
    }
    if let Some(var_199) = &input.r#type {
        object.key("type").string(var_199.as_str());
    }
}

pub fn serialize_structure_node_overrides(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NodeOverrides,
) {
    if input.num_nodes != 0 {
        object.key("numNodes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.num_nodes).into()),
        );
    }
    if let Some(var_200) = &input.node_property_overrides {
        let mut array_201 = object.key("nodePropertyOverrides").start_array();
        for item_202 in var_200 {
            {
                let mut object_203 = array_201.value().start_object();
                crate::json_ser::serialize_structure_node_property_override(
                    &mut object_203,
                    item_202,
                );
                object_203.finish();
            }
        }
        array_201.finish();
    }
}

pub fn serialize_structure_compute_resource_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComputeResourceUpdate,
) {
    if input.minv_cpus != 0 {
        object.key("minvCpus").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.minv_cpus).into()),
        );
    }
    if input.maxv_cpus != 0 {
        object.key("maxvCpus").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.maxv_cpus).into()),
        );
    }
    if input.desiredv_cpus != 0 {
        object.key("desiredvCpus").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.desiredv_cpus).into()),
        );
    }
    if let Some(var_204) = &input.subnets {
        let mut array_205 = object.key("subnets").start_array();
        for item_206 in var_204 {
            {
                array_205.value().string(item_206);
            }
        }
        array_205.finish();
    }
    if let Some(var_207) = &input.security_group_ids {
        let mut array_208 = object.key("securityGroupIds").start_array();
        for item_209 in var_207 {
            {
                array_208.value().string(item_209);
            }
        }
        array_208.finish();
    }
}

pub fn serialize_structure_launch_template_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LaunchTemplateSpecification,
) {
    if let Some(var_210) = &input.launch_template_id {
        object.key("launchTemplateId").string(var_210);
    }
    if let Some(var_211) = &input.launch_template_name {
        object.key("launchTemplateName").string(var_211);
    }
    if let Some(var_212) = &input.version {
        object.key("version").string(var_212);
    }
}

pub fn serialize_structure_ec2_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Ec2Configuration,
) {
    if let Some(var_213) = &input.image_type {
        object.key("imageType").string(var_213);
    }
    if let Some(var_214) = &input.image_id_override {
        object.key("imageIdOverride").string(var_214);
    }
}

pub fn serialize_structure_volume(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Volume,
) {
    if let Some(var_215) = &input.host {
        let mut object_216 = object.key("host").start_object();
        crate::json_ser::serialize_structure_host(&mut object_216, var_215);
        object_216.finish();
    }
    if let Some(var_217) = &input.name {
        object.key("name").string(var_217);
    }
    if let Some(var_218) = &input.efs_volume_configuration {
        let mut object_219 = object.key("efsVolumeConfiguration").start_object();
        crate::json_ser::serialize_structure_efs_volume_configuration(&mut object_219, var_218);
        object_219.finish();
    }
}

pub fn serialize_structure_key_value_pair(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeyValuePair,
) {
    if let Some(var_220) = &input.name {
        object.key("name").string(var_220);
    }
    if let Some(var_221) = &input.value {
        object.key("value").string(var_221);
    }
}

pub fn serialize_structure_mount_point(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MountPoint,
) {
    if let Some(var_222) = &input.container_path {
        object.key("containerPath").string(var_222);
    }
    if input.read_only {
        object.key("readOnly").boolean(input.read_only);
    }
    if let Some(var_223) = &input.source_volume {
        object.key("sourceVolume").string(var_223);
    }
}

pub fn serialize_structure_ulimit(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Ulimit,
) {
    {
        object.key("hardLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.hard_limit).into()),
        );
    }
    if let Some(var_224) = &input.name {
        object.key("name").string(var_224);
    }
    {
        object.key("softLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.soft_limit).into()),
        );
    }
}

pub fn serialize_structure_resource_requirement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceRequirement,
) {
    if let Some(var_225) = &input.value {
        object.key("value").string(var_225);
    }
    if let Some(var_226) = &input.r#type {
        object.key("type").string(var_226.as_str());
    }
}

pub fn serialize_structure_linux_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LinuxParameters,
) {
    if let Some(var_227) = &input.devices {
        let mut array_228 = object.key("devices").start_array();
        for item_229 in var_227 {
            {
                let mut object_230 = array_228.value().start_object();
                crate::json_ser::serialize_structure_device(&mut object_230, item_229);
                object_230.finish();
            }
        }
        array_228.finish();
    }
    if input.init_process_enabled {
        object
            .key("initProcessEnabled")
            .boolean(input.init_process_enabled);
    }
    if input.shared_memory_size != 0 {
        object.key("sharedMemorySize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.shared_memory_size).into()),
        );
    }
    if let Some(var_231) = &input.tmpfs {
        let mut array_232 = object.key("tmpfs").start_array();
        for item_233 in var_231 {
            {
                let mut object_234 = array_232.value().start_object();
                crate::json_ser::serialize_structure_tmpfs(&mut object_234, item_233);
                object_234.finish();
            }
        }
        array_232.finish();
    }
    if input.max_swap != 0 {
        object.key("maxSwap").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_swap).into()),
        );
    }
    if input.swappiness != 0 {
        object.key("swappiness").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.swappiness).into()),
        );
    }
}

pub fn serialize_structure_log_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogConfiguration,
) {
    if let Some(var_235) = &input.log_driver {
        object.key("logDriver").string(var_235.as_str());
    }
    if let Some(var_236) = &input.options {
        let mut object_237 = object.key("options").start_object();
        for (key_238, value_239) in var_236 {
            {
                object_237.key(key_238).string(value_239);
            }
        }
        object_237.finish();
    }
    if let Some(var_240) = &input.secret_options {
        let mut array_241 = object.key("secretOptions").start_array();
        for item_242 in var_240 {
            {
                let mut object_243 = array_241.value().start_object();
                crate::json_ser::serialize_structure_secret(&mut object_243, item_242);
                object_243.finish();
            }
        }
        array_241.finish();
    }
}

pub fn serialize_structure_secret(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Secret,
) {
    if let Some(var_244) = &input.name {
        object.key("name").string(var_244);
    }
    if let Some(var_245) = &input.value_from {
        object.key("valueFrom").string(var_245);
    }
}

pub fn serialize_structure_network_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConfiguration,
) {
    if let Some(var_246) = &input.assign_public_ip {
        object.key("assignPublicIp").string(var_246.as_str());
    }
}

pub fn serialize_structure_fargate_platform_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FargatePlatformConfiguration,
) {
    if let Some(var_247) = &input.platform_version {
        object.key("platformVersion").string(var_247);
    }
}

pub fn serialize_structure_node_range_property(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NodeRangeProperty,
) {
    if let Some(var_248) = &input.target_nodes {
        object.key("targetNodes").string(var_248);
    }
    if let Some(var_249) = &input.container {
        let mut object_250 = object.key("container").start_object();
        crate::json_ser::serialize_structure_container_properties(&mut object_250, var_249);
        object_250.finish();
    }
}

pub fn serialize_structure_evaluate_on_exit(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EvaluateOnExit,
) {
    if let Some(var_251) = &input.on_status_reason {
        object.key("onStatusReason").string(var_251);
    }
    if let Some(var_252) = &input.on_reason {
        object.key("onReason").string(var_252);
    }
    if let Some(var_253) = &input.on_exit_code {
        object.key("onExitCode").string(var_253);
    }
    if let Some(var_254) = &input.action {
        object.key("action").string(var_254.as_str());
    }
}

pub fn serialize_structure_node_property_override(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NodePropertyOverride,
) {
    if let Some(var_255) = &input.target_nodes {
        object.key("targetNodes").string(var_255);
    }
    if let Some(var_256) = &input.container_overrides {
        let mut object_257 = object.key("containerOverrides").start_object();
        crate::json_ser::serialize_structure_container_overrides(&mut object_257, var_256);
        object_257.finish();
    }
}

pub fn serialize_structure_host(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Host,
) {
    if let Some(var_258) = &input.source_path {
        object.key("sourcePath").string(var_258);
    }
}

pub fn serialize_structure_efs_volume_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EFSVolumeConfiguration,
) {
    if let Some(var_259) = &input.file_system_id {
        object.key("fileSystemId").string(var_259);
    }
    if let Some(var_260) = &input.root_directory {
        object.key("rootDirectory").string(var_260);
    }
    if let Some(var_261) = &input.transit_encryption {
        object.key("transitEncryption").string(var_261.as_str());
    }
    if input.transit_encryption_port != 0 {
        object.key("transitEncryptionPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.transit_encryption_port).into()),
        );
    }
    if let Some(var_262) = &input.authorization_config {
        let mut object_263 = object.key("authorizationConfig").start_object();
        crate::json_ser::serialize_structure_efs_authorization_config(&mut object_263, var_262);
        object_263.finish();
    }
}

pub fn serialize_structure_device(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Device,
) {
    if let Some(var_264) = &input.host_path {
        object.key("hostPath").string(var_264);
    }
    if let Some(var_265) = &input.container_path {
        object.key("containerPath").string(var_265);
    }
    if let Some(var_266) = &input.permissions {
        let mut array_267 = object.key("permissions").start_array();
        for item_268 in var_266 {
            {
                array_267.value().string(item_268.as_str());
            }
        }
        array_267.finish();
    }
}

pub fn serialize_structure_tmpfs(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tmpfs,
) {
    if let Some(var_269) = &input.container_path {
        object.key("containerPath").string(var_269);
    }
    {
        object.key("size").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.size).into()),
        );
    }
    if let Some(var_270) = &input.mount_options {
        let mut array_271 = object.key("mountOptions").start_array();
        for item_272 in var_270 {
            {
                array_271.value().string(item_272);
            }
        }
        array_271.finish();
    }
}

pub fn serialize_structure_efs_authorization_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EFSAuthorizationConfig,
) {
    if let Some(var_273) = &input.access_point_id {
        object.key("accessPointId").string(var_273);
    }
    if let Some(var_274) = &input.iam {
        object.key("iam").string(var_274.as_str());
    }
}
