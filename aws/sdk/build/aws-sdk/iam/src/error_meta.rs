// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    ConcurrentModificationError(crate::error::ConcurrentModificationError),
    CredentialReportExpiredError(crate::error::CredentialReportExpiredError),
    CredentialReportNotPresentError(crate::error::CredentialReportNotPresentError),
    CredentialReportNotReadyError(crate::error::CredentialReportNotReadyError),
    DeleteConflictError(crate::error::DeleteConflictError),
    DuplicateCertificateError(crate::error::DuplicateCertificateError),
    DuplicateSSHPublicKeyError(crate::error::DuplicateSSHPublicKeyError),
    EntityAlreadyExistsError(crate::error::EntityAlreadyExistsError),
    EntityTemporarilyUnmodifiableError(crate::error::EntityTemporarilyUnmodifiableError),
    InvalidAuthenticationCodeError(crate::error::InvalidAuthenticationCodeError),
    InvalidCertificateError(crate::error::InvalidCertificateError),
    InvalidInputError(crate::error::InvalidInputError),
    InvalidPublicKeyError(crate::error::InvalidPublicKeyError),
    InvalidUserTypeError(crate::error::InvalidUserTypeError),
    KeyPairMismatchError(crate::error::KeyPairMismatchError),
    LimitExceededError(crate::error::LimitExceededError),
    MalformedCertificateError(crate::error::MalformedCertificateError),
    MalformedPolicyDocumentError(crate::error::MalformedPolicyDocumentError),
    NoSuchEntityError(crate::error::NoSuchEntityError),
    PasswordPolicyViolationError(crate::error::PasswordPolicyViolationError),
    PolicyEvaluationError(crate::error::PolicyEvaluationError),
    PolicyNotAttachableError(crate::error::PolicyNotAttachableError),
    ReportGenerationLimitExceededError(crate::error::ReportGenerationLimitExceededError),
    ServiceFailureError(crate::error::ServiceFailureError),
    ServiceNotSupportedError(crate::error::ServiceNotSupportedError),
    UnmodifiableEntityError(crate::error::UnmodifiableEntityError),
    UnrecognizedPublicKeyEncodingError(crate::error::UnrecognizedPublicKeyEncodingError),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConcurrentModificationError(inner) => inner.fmt(f),
            Error::CredentialReportExpiredError(inner) => inner.fmt(f),
            Error::CredentialReportNotPresentError(inner) => inner.fmt(f),
            Error::CredentialReportNotReadyError(inner) => inner.fmt(f),
            Error::DeleteConflictError(inner) => inner.fmt(f),
            Error::DuplicateCertificateError(inner) => inner.fmt(f),
            Error::DuplicateSSHPublicKeyError(inner) => inner.fmt(f),
            Error::EntityAlreadyExistsError(inner) => inner.fmt(f),
            Error::EntityTemporarilyUnmodifiableError(inner) => inner.fmt(f),
            Error::InvalidAuthenticationCodeError(inner) => inner.fmt(f),
            Error::InvalidCertificateError(inner) => inner.fmt(f),
            Error::InvalidInputError(inner) => inner.fmt(f),
            Error::InvalidPublicKeyError(inner) => inner.fmt(f),
            Error::InvalidUserTypeError(inner) => inner.fmt(f),
            Error::KeyPairMismatchError(inner) => inner.fmt(f),
            Error::LimitExceededError(inner) => inner.fmt(f),
            Error::MalformedCertificateError(inner) => inner.fmt(f),
            Error::MalformedPolicyDocumentError(inner) => inner.fmt(f),
            Error::NoSuchEntityError(inner) => inner.fmt(f),
            Error::PasswordPolicyViolationError(inner) => inner.fmt(f),
            Error::PolicyEvaluationError(inner) => inner.fmt(f),
            Error::PolicyNotAttachableError(inner) => inner.fmt(f),
            Error::ReportGenerationLimitExceededError(inner) => inner.fmt(f),
            Error::ServiceFailureError(inner) => inner.fmt(f),
            Error::ServiceNotSupportedError(inner) => inner.fmt(f),
            Error::UnmodifiableEntityError(inner) => inner.fmt(f),
            Error::UnrecognizedPublicKeyEncodingError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AddClientIDToOpenIDConnectProviderError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::AddClientIDToOpenIDConnectProviderError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AddClientIDToOpenIDConnectProviderErrorKind::InvalidInputError(
                    inner,
                ) => Error::InvalidInputError(inner),
                crate::error::AddClientIDToOpenIDConnectProviderErrorKind::LimitExceededError(
                    inner,
                ) => Error::LimitExceededError(inner),
                crate::error::AddClientIDToOpenIDConnectProviderErrorKind::NoSuchEntityError(
                    inner,
                ) => Error::NoSuchEntityError(inner),
                crate::error::AddClientIDToOpenIDConnectProviderErrorKind::ServiceFailureError(
                    inner,
                ) => Error::ServiceFailureError(inner),
                crate::error::AddClientIDToOpenIDConnectProviderErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AddRoleToInstanceProfileError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AddRoleToInstanceProfileError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AddRoleToInstanceProfileErrorKind::EntityAlreadyExistsError(
                    inner,
                ) => Error::EntityAlreadyExistsError(inner),
                crate::error::AddRoleToInstanceProfileErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::AddRoleToInstanceProfileErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::AddRoleToInstanceProfileErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::AddRoleToInstanceProfileErrorKind::UnmodifiableEntityError(inner) => {
                    Error::UnmodifiableEntityError(inner)
                }
                crate::error::AddRoleToInstanceProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AddUserToGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AddUserToGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AddUserToGroupErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::AddUserToGroupErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::AddUserToGroupErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::AddUserToGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AttachGroupPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AttachGroupPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AttachGroupPolicyErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::AttachGroupPolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::AttachGroupPolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::AttachGroupPolicyErrorKind::PolicyNotAttachableError(inner) => {
                    Error::PolicyNotAttachableError(inner)
                }
                crate::error::AttachGroupPolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::AttachGroupPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AttachRolePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AttachRolePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AttachRolePolicyErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::AttachRolePolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::AttachRolePolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::AttachRolePolicyErrorKind::PolicyNotAttachableError(inner) => {
                    Error::PolicyNotAttachableError(inner)
                }
                crate::error::AttachRolePolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::AttachRolePolicyErrorKind::UnmodifiableEntityError(inner) => {
                    Error::UnmodifiableEntityError(inner)
                }
                crate::error::AttachRolePolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AttachUserPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AttachUserPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AttachUserPolicyErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::AttachUserPolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::AttachUserPolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::AttachUserPolicyErrorKind::PolicyNotAttachableError(inner) => {
                    Error::PolicyNotAttachableError(inner)
                }
                crate::error::AttachUserPolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::AttachUserPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ChangePasswordError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ChangePasswordError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ChangePasswordErrorKind::EntityTemporarilyUnmodifiableError(
                    inner,
                ) => Error::EntityTemporarilyUnmodifiableError(inner),
                crate::error::ChangePasswordErrorKind::InvalidUserTypeError(inner) => {
                    Error::InvalidUserTypeError(inner)
                }
                crate::error::ChangePasswordErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::ChangePasswordErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ChangePasswordErrorKind::PasswordPolicyViolationError(inner) => {
                    Error::PasswordPolicyViolationError(inner)
                }
                crate::error::ChangePasswordErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ChangePasswordErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateAccessKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateAccessKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateAccessKeyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateAccessKeyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::CreateAccessKeyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::CreateAccessKeyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateAccountAliasError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateAccountAliasError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateAccountAliasErrorKind::EntityAlreadyExistsError(inner) => {
                    Error::EntityAlreadyExistsError(inner)
                }
                crate::error::CreateAccountAliasErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateAccountAliasErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::CreateAccountAliasErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateGroupErrorKind::EntityAlreadyExistsError(inner) => {
                    Error::EntityAlreadyExistsError(inner)
                }
                crate::error::CreateGroupErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateGroupErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::CreateGroupErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::CreateGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateInstanceProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateInstanceProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateInstanceProfileErrorKind::ConcurrentModificationError(
                    inner,
                ) => Error::ConcurrentModificationError(inner),
                crate::error::CreateInstanceProfileErrorKind::EntityAlreadyExistsError(inner) => {
                    Error::EntityAlreadyExistsError(inner)
                }
                crate::error::CreateInstanceProfileErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::CreateInstanceProfileErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateInstanceProfileErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::CreateInstanceProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateLoginProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateLoginProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateLoginProfileErrorKind::EntityAlreadyExistsError(inner) => {
                    Error::EntityAlreadyExistsError(inner)
                }
                crate::error::CreateLoginProfileErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateLoginProfileErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::CreateLoginProfileErrorKind::PasswordPolicyViolationError(inner) => {
                    Error::PasswordPolicyViolationError(inner)
                }
                crate::error::CreateLoginProfileErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::CreateLoginProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateOpenIDConnectProviderError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateOpenIDConnectProviderError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateOpenIDConnectProviderErrorKind::ConcurrentModificationError(
                    inner,
                ) => Error::ConcurrentModificationError(inner),
                crate::error::CreateOpenIDConnectProviderErrorKind::EntityAlreadyExistsError(
                    inner,
                ) => Error::EntityAlreadyExistsError(inner),
                crate::error::CreateOpenIDConnectProviderErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::CreateOpenIDConnectProviderErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateOpenIDConnectProviderErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::CreateOpenIDConnectProviderErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreatePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreatePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreatePolicyErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::CreatePolicyErrorKind::EntityAlreadyExistsError(inner) => {
                    Error::EntityAlreadyExistsError(inner)
                }
                crate::error::CreatePolicyErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::CreatePolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreatePolicyErrorKind::MalformedPolicyDocumentError(inner) => {
                    Error::MalformedPolicyDocumentError(inner)
                }
                crate::error::CreatePolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::CreatePolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreatePolicyVersionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreatePolicyVersionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreatePolicyVersionErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::CreatePolicyVersionErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreatePolicyVersionErrorKind::MalformedPolicyDocumentError(inner) => {
                    Error::MalformedPolicyDocumentError(inner)
                }
                crate::error::CreatePolicyVersionErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::CreatePolicyVersionErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::CreatePolicyVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateRoleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateRoleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateRoleErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::CreateRoleErrorKind::EntityAlreadyExistsError(inner) => {
                    Error::EntityAlreadyExistsError(inner)
                }
                crate::error::CreateRoleErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::CreateRoleErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateRoleErrorKind::MalformedPolicyDocumentError(inner) => {
                    Error::MalformedPolicyDocumentError(inner)
                }
                crate::error::CreateRoleErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::CreateRoleErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateSAMLProviderError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateSAMLProviderError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateSAMLProviderErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::CreateSAMLProviderErrorKind::EntityAlreadyExistsError(inner) => {
                    Error::EntityAlreadyExistsError(inner)
                }
                crate::error::CreateSAMLProviderErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::CreateSAMLProviderErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateSAMLProviderErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::CreateSAMLProviderErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateServiceLinkedRoleError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateServiceLinkedRoleError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateServiceLinkedRoleErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::CreateServiceLinkedRoleErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateServiceLinkedRoleErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::CreateServiceLinkedRoleErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::CreateServiceLinkedRoleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateServiceSpecificCredentialError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateServiceSpecificCredentialError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateServiceSpecificCredentialErrorKind::LimitExceededError(inner) => Error::LimitExceededError(inner),
                crate::error::CreateServiceSpecificCredentialErrorKind::NoSuchEntityError(inner) => Error::NoSuchEntityError(inner),
                crate::error::CreateServiceSpecificCredentialErrorKind::ServiceNotSupportedError(inner) => Error::ServiceNotSupportedError(inner),
                crate::error::CreateServiceSpecificCredentialErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateUserError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateUserError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateUserErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::CreateUserErrorKind::EntityAlreadyExistsError(inner) => {
                    Error::EntityAlreadyExistsError(inner)
                }
                crate::error::CreateUserErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::CreateUserErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateUserErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::CreateUserErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::CreateUserErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateVirtualMFADeviceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateVirtualMFADeviceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateVirtualMFADeviceErrorKind::ConcurrentModificationError(
                    inner,
                ) => Error::ConcurrentModificationError(inner),
                crate::error::CreateVirtualMFADeviceErrorKind::EntityAlreadyExistsError(inner) => {
                    Error::EntityAlreadyExistsError(inner)
                }
                crate::error::CreateVirtualMFADeviceErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::CreateVirtualMFADeviceErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateVirtualMFADeviceErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::CreateVirtualMFADeviceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeactivateMFADeviceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeactivateMFADeviceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeactivateMFADeviceErrorKind::EntityTemporarilyUnmodifiableError(
                    inner,
                ) => Error::EntityTemporarilyUnmodifiableError(inner),
                crate::error::DeactivateMFADeviceErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeactivateMFADeviceErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeactivateMFADeviceErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeactivateMFADeviceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteAccessKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteAccessKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteAccessKeyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeleteAccessKeyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteAccessKeyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeleteAccessKeyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteAccountAliasError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteAccountAliasError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteAccountAliasErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeleteAccountAliasErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteAccountAliasErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeleteAccountAliasErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteAccountPasswordPolicyError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteAccountPasswordPolicyError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteAccountPasswordPolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeleteAccountPasswordPolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteAccountPasswordPolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeleteAccountPasswordPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteGroupErrorKind::DeleteConflictError(inner) => {
                    Error::DeleteConflictError(inner)
                }
                crate::error::DeleteGroupErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeleteGroupErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteGroupErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeleteGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteGroupPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteGroupPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteGroupPolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeleteGroupPolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteGroupPolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeleteGroupPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteInstanceProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteInstanceProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteInstanceProfileErrorKind::DeleteConflictError(inner) => {
                    Error::DeleteConflictError(inner)
                }
                crate::error::DeleteInstanceProfileErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeleteInstanceProfileErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteInstanceProfileErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeleteInstanceProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteLoginProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteLoginProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteLoginProfileErrorKind::EntityTemporarilyUnmodifiableError(
                    inner,
                ) => Error::EntityTemporarilyUnmodifiableError(inner),
                crate::error::DeleteLoginProfileErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeleteLoginProfileErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteLoginProfileErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeleteLoginProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteOpenIDConnectProviderError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteOpenIDConnectProviderError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteOpenIDConnectProviderErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::DeleteOpenIDConnectProviderErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteOpenIDConnectProviderErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeleteOpenIDConnectProviderErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeletePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeletePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeletePolicyErrorKind::DeleteConflictError(inner) => {
                    Error::DeleteConflictError(inner)
                }
                crate::error::DeletePolicyErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::DeletePolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeletePolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeletePolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeletePolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeletePolicyVersionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeletePolicyVersionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeletePolicyVersionErrorKind::DeleteConflictError(inner) => {
                    Error::DeleteConflictError(inner)
                }
                crate::error::DeletePolicyVersionErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::DeletePolicyVersionErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeletePolicyVersionErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeletePolicyVersionErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeletePolicyVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteRoleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteRoleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteRoleErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::DeleteRoleErrorKind::DeleteConflictError(inner) => {
                    Error::DeleteConflictError(inner)
                }
                crate::error::DeleteRoleErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeleteRoleErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteRoleErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeleteRoleErrorKind::UnmodifiableEntityError(inner) => {
                    Error::UnmodifiableEntityError(inner)
                }
                crate::error::DeleteRoleErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteRolePermissionsBoundaryError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteRolePermissionsBoundaryError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteRolePermissionsBoundaryErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteRolePermissionsBoundaryErrorKind::ServiceFailureError(
                    inner,
                ) => Error::ServiceFailureError(inner),
                crate::error::DeleteRolePermissionsBoundaryErrorKind::UnmodifiableEntityError(
                    inner,
                ) => Error::UnmodifiableEntityError(inner),
                crate::error::DeleteRolePermissionsBoundaryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteRolePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteRolePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteRolePolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeleteRolePolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteRolePolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeleteRolePolicyErrorKind::UnmodifiableEntityError(inner) => {
                    Error::UnmodifiableEntityError(inner)
                }
                crate::error::DeleteRolePolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteSAMLProviderError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteSAMLProviderError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteSAMLProviderErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::DeleteSAMLProviderErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeleteSAMLProviderErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteSAMLProviderErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeleteSAMLProviderErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteServerCertificateError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteServerCertificateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteServerCertificateErrorKind::DeleteConflictError(inner) => {
                    Error::DeleteConflictError(inner)
                }
                crate::error::DeleteServerCertificateErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeleteServerCertificateErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteServerCertificateErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeleteServerCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteServiceLinkedRoleError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteServiceLinkedRoleError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteServiceLinkedRoleErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeleteServiceLinkedRoleErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteServiceLinkedRoleErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeleteServiceLinkedRoleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteServiceSpecificCredentialError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteServiceSpecificCredentialError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteServiceSpecificCredentialErrorKind::NoSuchEntityError(
                    inner,
                ) => Error::NoSuchEntityError(inner),
                crate::error::DeleteServiceSpecificCredentialErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteSigningCertificateError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteSigningCertificateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteSigningCertificateErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeleteSigningCertificateErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteSigningCertificateErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeleteSigningCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteSSHPublicKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteSSHPublicKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteSSHPublicKeyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteSSHPublicKeyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteUserError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteUserError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteUserErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::DeleteUserErrorKind::DeleteConflictError(inner) => {
                    Error::DeleteConflictError(inner)
                }
                crate::error::DeleteUserErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeleteUserErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteUserErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeleteUserErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteUserPermissionsBoundaryError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteUserPermissionsBoundaryError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteUserPermissionsBoundaryErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteUserPermissionsBoundaryErrorKind::ServiceFailureError(
                    inner,
                ) => Error::ServiceFailureError(inner),
                crate::error::DeleteUserPermissionsBoundaryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteUserPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteUserPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteUserPolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeleteUserPolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteUserPolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeleteUserPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteVirtualMFADeviceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteVirtualMFADeviceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteVirtualMFADeviceErrorKind::DeleteConflictError(inner) => {
                    Error::DeleteConflictError(inner)
                }
                crate::error::DeleteVirtualMFADeviceErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeleteVirtualMFADeviceErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DeleteVirtualMFADeviceErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DeleteVirtualMFADeviceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DetachGroupPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DetachGroupPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DetachGroupPolicyErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::DetachGroupPolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DetachGroupPolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DetachGroupPolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DetachGroupPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DetachRolePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DetachRolePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DetachRolePolicyErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::DetachRolePolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DetachRolePolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DetachRolePolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DetachRolePolicyErrorKind::UnmodifiableEntityError(inner) => {
                    Error::UnmodifiableEntityError(inner)
                }
                crate::error::DetachRolePolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DetachUserPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DetachUserPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DetachUserPolicyErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::DetachUserPolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DetachUserPolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::DetachUserPolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::DetachUserPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableMFADeviceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::EnableMFADeviceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableMFADeviceErrorKind::EntityAlreadyExistsError(inner) => {
                    Error::EntityAlreadyExistsError(inner)
                }
                crate::error::EnableMFADeviceErrorKind::EntityTemporarilyUnmodifiableError(
                    inner,
                ) => Error::EntityTemporarilyUnmodifiableError(inner),
                crate::error::EnableMFADeviceErrorKind::InvalidAuthenticationCodeError(inner) => {
                    Error::InvalidAuthenticationCodeError(inner)
                }
                crate::error::EnableMFADeviceErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::EnableMFADeviceErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::EnableMFADeviceErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::EnableMFADeviceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GenerateCredentialReportError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GenerateCredentialReportError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GenerateCredentialReportErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::GenerateCredentialReportErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::GenerateCredentialReportErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GenerateOrganizationsAccessReportError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GenerateOrganizationsAccessReportError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::GenerateOrganizationsAccessReportErrorKind::ReportGenerationLimitExceededError(inner) => Error::ReportGenerationLimitExceededError(inner),
                crate::error::GenerateOrganizationsAccessReportErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GenerateServiceLastAccessedDetailsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GenerateServiceLastAccessedDetailsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GenerateServiceLastAccessedDetailsErrorKind::InvalidInputError(
                    inner,
                ) => Error::InvalidInputError(inner),
                crate::error::GenerateServiceLastAccessedDetailsErrorKind::NoSuchEntityError(
                    inner,
                ) => Error::NoSuchEntityError(inner),
                crate::error::GenerateServiceLastAccessedDetailsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetAccessKeyLastUsedError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetAccessKeyLastUsedError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetAccessKeyLastUsedErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::GetAccessKeyLastUsedErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetAccountAuthorizationDetailsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetAccountAuthorizationDetailsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetAccountAuthorizationDetailsErrorKind::ServiceFailureError(
                    inner,
                ) => Error::ServiceFailureError(inner),
                crate::error::GetAccountAuthorizationDetailsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetAccountPasswordPolicyError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetAccountPasswordPolicyError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetAccountPasswordPolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::GetAccountPasswordPolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::GetAccountPasswordPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetAccountSummaryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetAccountSummaryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetAccountSummaryErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::GetAccountSummaryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetContextKeysForCustomPolicyError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetContextKeysForCustomPolicyError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetContextKeysForCustomPolicyErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::GetContextKeysForCustomPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetContextKeysForPrincipalPolicyError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetContextKeysForPrincipalPolicyError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetContextKeysForPrincipalPolicyErrorKind::InvalidInputError(
                    inner,
                ) => Error::InvalidInputError(inner),
                crate::error::GetContextKeysForPrincipalPolicyErrorKind::NoSuchEntityError(
                    inner,
                ) => Error::NoSuchEntityError(inner),
                crate::error::GetContextKeysForPrincipalPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetCredentialReportError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetCredentialReportError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetCredentialReportErrorKind::CredentialReportExpiredError(inner) => {
                    Error::CredentialReportExpiredError(inner)
                }
                crate::error::GetCredentialReportErrorKind::CredentialReportNotPresentError(
                    inner,
                ) => Error::CredentialReportNotPresentError(inner),
                crate::error::GetCredentialReportErrorKind::CredentialReportNotReadyError(
                    inner,
                ) => Error::CredentialReportNotReadyError(inner),
                crate::error::GetCredentialReportErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::GetCredentialReportErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetGroupErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::GetGroupErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::GetGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetGroupPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetGroupPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetGroupPolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::GetGroupPolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::GetGroupPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetInstanceProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetInstanceProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetInstanceProfileErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::GetInstanceProfileErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::GetInstanceProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetLoginProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetLoginProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetLoginProfileErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::GetLoginProfileErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::GetLoginProfileErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetOpenIDConnectProviderError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetOpenIDConnectProviderError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetOpenIDConnectProviderErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::GetOpenIDConnectProviderErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::GetOpenIDConnectProviderErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::GetOpenIDConnectProviderErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetOrganizationsAccessReportError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetOrganizationsAccessReportError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetOrganizationsAccessReportErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::GetOrganizationsAccessReportErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetPolicyErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::GetPolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::GetPolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::GetPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetPolicyVersionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetPolicyVersionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetPolicyVersionErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::GetPolicyVersionErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::GetPolicyVersionErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::GetPolicyVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetRoleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetRoleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetRoleErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::GetRoleErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::GetRoleErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetRolePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetRolePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetRolePolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::GetRolePolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::GetRolePolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetSAMLProviderError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetSAMLProviderError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetSAMLProviderErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::GetSAMLProviderErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::GetSAMLProviderErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::GetSAMLProviderErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetServerCertificateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetServerCertificateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetServerCertificateErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::GetServerCertificateErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::GetServerCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetServiceLastAccessedDetailsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetServiceLastAccessedDetailsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetServiceLastAccessedDetailsErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::GetServiceLastAccessedDetailsErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::GetServiceLastAccessedDetailsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<crate::error::GetServiceLastAccessedDetailsWithEntitiesError>,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::GetServiceLastAccessedDetailsWithEntitiesError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::GetServiceLastAccessedDetailsWithEntitiesErrorKind::InvalidInputError(inner) => Error::InvalidInputError(inner),
                crate::error::GetServiceLastAccessedDetailsWithEntitiesErrorKind::NoSuchEntityError(inner) => Error::NoSuchEntityError(inner),
                crate::error::GetServiceLastAccessedDetailsWithEntitiesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetServiceLinkedRoleDeletionStatusError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetServiceLinkedRoleDeletionStatusError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetServiceLinkedRoleDeletionStatusErrorKind::InvalidInputError(
                    inner,
                ) => Error::InvalidInputError(inner),
                crate::error::GetServiceLinkedRoleDeletionStatusErrorKind::NoSuchEntityError(
                    inner,
                ) => Error::NoSuchEntityError(inner),
                crate::error::GetServiceLinkedRoleDeletionStatusErrorKind::ServiceFailureError(
                    inner,
                ) => Error::ServiceFailureError(inner),
                crate::error::GetServiceLinkedRoleDeletionStatusErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetSSHPublicKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetSSHPublicKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetSSHPublicKeyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::GetSSHPublicKeyErrorKind::UnrecognizedPublicKeyEncodingError(
                    inner,
                ) => Error::UnrecognizedPublicKeyEncodingError(inner),
                crate::error::GetSSHPublicKeyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetUserError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetUserError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetUserErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::GetUserErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::GetUserErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetUserPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetUserPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetUserPolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::GetUserPolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::GetUserPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAccessKeysError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListAccessKeysError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAccessKeysErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListAccessKeysErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListAccessKeysErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAccountAliasesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListAccountAliasesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAccountAliasesErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListAccountAliasesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAttachedGroupPoliciesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListAttachedGroupPoliciesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAttachedGroupPoliciesErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::ListAttachedGroupPoliciesErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListAttachedGroupPoliciesErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListAttachedGroupPoliciesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAttachedRolePoliciesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListAttachedRolePoliciesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAttachedRolePoliciesErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::ListAttachedRolePoliciesErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListAttachedRolePoliciesErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListAttachedRolePoliciesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAttachedUserPoliciesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListAttachedUserPoliciesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAttachedUserPoliciesErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::ListAttachedUserPoliciesErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListAttachedUserPoliciesErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListAttachedUserPoliciesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListEntitiesForPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListEntitiesForPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListEntitiesForPolicyErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::ListEntitiesForPolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListEntitiesForPolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListEntitiesForPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListGroupPoliciesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListGroupPoliciesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListGroupPoliciesErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListGroupPoliciesErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListGroupPoliciesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListGroupsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListGroupsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListGroupsErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListGroupsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListGroupsForUserError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListGroupsForUserError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListGroupsForUserErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListGroupsForUserErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListGroupsForUserErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListInstanceProfilesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListInstanceProfilesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListInstanceProfilesErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListInstanceProfilesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListInstanceProfilesForRoleError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListInstanceProfilesForRoleError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListInstanceProfilesForRoleErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListInstanceProfilesForRoleErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListInstanceProfilesForRoleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListInstanceProfileTagsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListInstanceProfileTagsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListInstanceProfileTagsErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListInstanceProfileTagsErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListInstanceProfileTagsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListMFADevicesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListMFADevicesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListMFADevicesErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListMFADevicesErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListMFADevicesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListMFADeviceTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListMFADeviceTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListMFADeviceTagsErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::ListMFADeviceTagsErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListMFADeviceTagsErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListMFADeviceTagsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListOpenIDConnectProvidersError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListOpenIDConnectProvidersError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListOpenIDConnectProvidersErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListOpenIDConnectProvidersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListOpenIDConnectProviderTagsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListOpenIDConnectProviderTagsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListOpenIDConnectProviderTagsErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::ListOpenIDConnectProviderTagsErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListOpenIDConnectProviderTagsErrorKind::ServiceFailureError(
                    inner,
                ) => Error::ServiceFailureError(inner),
                crate::error::ListOpenIDConnectProviderTagsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListPoliciesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListPoliciesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListPoliciesErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListPoliciesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListPoliciesGrantingServiceAccessError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListPoliciesGrantingServiceAccessError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListPoliciesGrantingServiceAccessErrorKind::InvalidInputError(
                    inner,
                ) => Error::InvalidInputError(inner),
                crate::error::ListPoliciesGrantingServiceAccessErrorKind::NoSuchEntityError(
                    inner,
                ) => Error::NoSuchEntityError(inner),
                crate::error::ListPoliciesGrantingServiceAccessErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListPolicyTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListPolicyTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListPolicyTagsErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::ListPolicyTagsErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListPolicyTagsErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListPolicyTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListPolicyVersionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListPolicyVersionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListPolicyVersionsErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::ListPolicyVersionsErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListPolicyVersionsErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListPolicyVersionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListRolePoliciesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListRolePoliciesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListRolePoliciesErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListRolePoliciesErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListRolePoliciesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListRolesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListRolesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListRolesErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListRolesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListRoleTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListRoleTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListRoleTagsErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListRoleTagsErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListRoleTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListSAMLProvidersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListSAMLProvidersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListSAMLProvidersErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListSAMLProvidersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListSAMLProviderTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListSAMLProviderTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListSAMLProviderTagsErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::ListSAMLProviderTagsErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListSAMLProviderTagsErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListSAMLProviderTagsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListServerCertificatesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListServerCertificatesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListServerCertificatesErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListServerCertificatesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListServerCertificateTagsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListServerCertificateTagsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListServerCertificateTagsErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListServerCertificateTagsErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListServerCertificateTagsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListServiceSpecificCredentialsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListServiceSpecificCredentialsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListServiceSpecificCredentialsErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListServiceSpecificCredentialsErrorKind::ServiceNotSupportedError(
                    inner,
                ) => Error::ServiceNotSupportedError(inner),
                crate::error::ListServiceSpecificCredentialsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListSigningCertificatesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListSigningCertificatesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListSigningCertificatesErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListSigningCertificatesErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListSigningCertificatesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListSSHPublicKeysError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListSSHPublicKeysError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListSSHPublicKeysErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListSSHPublicKeysErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListUserPoliciesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListUserPoliciesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListUserPoliciesErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListUserPoliciesErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListUserPoliciesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListUsersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListUsersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListUsersErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListUsersErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListUserTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListUserTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListUserTagsErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ListUserTagsErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ListUserTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListVirtualMFADevicesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListVirtualMFADevicesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListVirtualMFADevicesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutGroupPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutGroupPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutGroupPolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::PutGroupPolicyErrorKind::MalformedPolicyDocumentError(inner) => {
                    Error::MalformedPolicyDocumentError(inner)
                }
                crate::error::PutGroupPolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::PutGroupPolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::PutGroupPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutRolePermissionsBoundaryError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutRolePermissionsBoundaryError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutRolePermissionsBoundaryErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::PutRolePermissionsBoundaryErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::PutRolePermissionsBoundaryErrorKind::PolicyNotAttachableError(
                    inner,
                ) => Error::PolicyNotAttachableError(inner),
                crate::error::PutRolePermissionsBoundaryErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::PutRolePermissionsBoundaryErrorKind::UnmodifiableEntityError(
                    inner,
                ) => Error::UnmodifiableEntityError(inner),
                crate::error::PutRolePermissionsBoundaryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutRolePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutRolePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutRolePolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::PutRolePolicyErrorKind::MalformedPolicyDocumentError(inner) => {
                    Error::MalformedPolicyDocumentError(inner)
                }
                crate::error::PutRolePolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::PutRolePolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::PutRolePolicyErrorKind::UnmodifiableEntityError(inner) => {
                    Error::UnmodifiableEntityError(inner)
                }
                crate::error::PutRolePolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutUserPermissionsBoundaryError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutUserPermissionsBoundaryError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutUserPermissionsBoundaryErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::PutUserPermissionsBoundaryErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::PutUserPermissionsBoundaryErrorKind::PolicyNotAttachableError(
                    inner,
                ) => Error::PolicyNotAttachableError(inner),
                crate::error::PutUserPermissionsBoundaryErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::PutUserPermissionsBoundaryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutUserPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutUserPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutUserPolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::PutUserPolicyErrorKind::MalformedPolicyDocumentError(inner) => {
                    Error::MalformedPolicyDocumentError(inner)
                }
                crate::error::PutUserPolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::PutUserPolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::PutUserPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RemoveClientIDFromOpenIDConnectProviderError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::RemoveClientIDFromOpenIDConnectProviderError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RemoveClientIDFromOpenIDConnectProviderErrorKind::InvalidInputError(inner) => Error::InvalidInputError(inner),
                crate::error::RemoveClientIDFromOpenIDConnectProviderErrorKind::NoSuchEntityError(inner) => Error::NoSuchEntityError(inner),
                crate::error::RemoveClientIDFromOpenIDConnectProviderErrorKind::ServiceFailureError(inner) => Error::ServiceFailureError(inner),
                crate::error::RemoveClientIDFromOpenIDConnectProviderErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RemoveRoleFromInstanceProfileError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RemoveRoleFromInstanceProfileError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RemoveRoleFromInstanceProfileErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::RemoveRoleFromInstanceProfileErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::RemoveRoleFromInstanceProfileErrorKind::ServiceFailureError(
                    inner,
                ) => Error::ServiceFailureError(inner),
                crate::error::RemoveRoleFromInstanceProfileErrorKind::UnmodifiableEntityError(
                    inner,
                ) => Error::UnmodifiableEntityError(inner),
                crate::error::RemoveRoleFromInstanceProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RemoveUserFromGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RemoveUserFromGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RemoveUserFromGroupErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::RemoveUserFromGroupErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::RemoveUserFromGroupErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::RemoveUserFromGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ResetServiceSpecificCredentialError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ResetServiceSpecificCredentialError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ResetServiceSpecificCredentialErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ResetServiceSpecificCredentialErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ResyncMFADeviceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ResyncMFADeviceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ResyncMFADeviceErrorKind::InvalidAuthenticationCodeError(inner) => {
                    Error::InvalidAuthenticationCodeError(inner)
                }
                crate::error::ResyncMFADeviceErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::ResyncMFADeviceErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::ResyncMFADeviceErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::ResyncMFADeviceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetDefaultPolicyVersionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::SetDefaultPolicyVersionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetDefaultPolicyVersionErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::SetDefaultPolicyVersionErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::SetDefaultPolicyVersionErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::SetDefaultPolicyVersionErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::SetDefaultPolicyVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetSecurityTokenServicePreferencesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::SetSecurityTokenServicePreferencesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetSecurityTokenServicePreferencesErrorKind::ServiceFailureError(
                    inner,
                ) => Error::ServiceFailureError(inner),
                crate::error::SetSecurityTokenServicePreferencesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SimulateCustomPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SimulateCustomPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SimulateCustomPolicyErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::SimulateCustomPolicyErrorKind::PolicyEvaluationError(inner) => {
                    Error::PolicyEvaluationError(inner)
                }
                crate::error::SimulateCustomPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SimulatePrincipalPolicyError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::SimulatePrincipalPolicyError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SimulatePrincipalPolicyErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::SimulatePrincipalPolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::SimulatePrincipalPolicyErrorKind::PolicyEvaluationError(inner) => {
                    Error::PolicyEvaluationError(inner)
                }
                crate::error::SimulatePrincipalPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagInstanceProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagInstanceProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagInstanceProfileErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::TagInstanceProfileErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::TagInstanceProfileErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::TagInstanceProfileErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::TagInstanceProfileErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::TagInstanceProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagMFADeviceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagMFADeviceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagMFADeviceErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::TagMFADeviceErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::TagMFADeviceErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::TagMFADeviceErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::TagMFADeviceErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::TagMFADeviceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagOpenIDConnectProviderError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::TagOpenIDConnectProviderError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagOpenIDConnectProviderErrorKind::ConcurrentModificationError(
                    inner,
                ) => Error::ConcurrentModificationError(inner),
                crate::error::TagOpenIDConnectProviderErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::TagOpenIDConnectProviderErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::TagOpenIDConnectProviderErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::TagOpenIDConnectProviderErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::TagOpenIDConnectProviderErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagPolicyErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::TagPolicyErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::TagPolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::TagPolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::TagPolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::TagPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagRoleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagRoleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagRoleErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::TagRoleErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::TagRoleErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::TagRoleErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::TagRoleErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::TagRoleErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagSAMLProviderError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagSAMLProviderError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagSAMLProviderErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::TagSAMLProviderErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::TagSAMLProviderErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::TagSAMLProviderErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::TagSAMLProviderErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::TagSAMLProviderErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagServerCertificateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagServerCertificateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagServerCertificateErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::TagServerCertificateErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::TagServerCertificateErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::TagServerCertificateErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::TagServerCertificateErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::TagServerCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagUserError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagUserError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagUserErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::TagUserErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::TagUserErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::TagUserErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::TagUserErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::TagUserErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagInstanceProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagInstanceProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagInstanceProfileErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::UntagInstanceProfileErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::UntagInstanceProfileErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UntagInstanceProfileErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UntagInstanceProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagMFADeviceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagMFADeviceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagMFADeviceErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::UntagMFADeviceErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::UntagMFADeviceErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UntagMFADeviceErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UntagMFADeviceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagOpenIDConnectProviderError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UntagOpenIDConnectProviderError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagOpenIDConnectProviderErrorKind::ConcurrentModificationError(
                    inner,
                ) => Error::ConcurrentModificationError(inner),
                crate::error::UntagOpenIDConnectProviderErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::UntagOpenIDConnectProviderErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UntagOpenIDConnectProviderErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UntagOpenIDConnectProviderErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagPolicyErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::UntagPolicyErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::UntagPolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UntagPolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UntagPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagRoleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagRoleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagRoleErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::UntagRoleErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UntagRoleErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UntagRoleErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagSAMLProviderError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagSAMLProviderError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagSAMLProviderErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::UntagSAMLProviderErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::UntagSAMLProviderErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UntagSAMLProviderErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UntagSAMLProviderErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagServerCertificateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagServerCertificateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagServerCertificateErrorKind::ConcurrentModificationError(
                    inner,
                ) => Error::ConcurrentModificationError(inner),
                crate::error::UntagServerCertificateErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::UntagServerCertificateErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UntagServerCertificateErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UntagServerCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagUserError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagUserError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagUserErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::UntagUserErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UntagUserErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UntagUserErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateAccessKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateAccessKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateAccessKeyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UpdateAccessKeyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UpdateAccessKeyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UpdateAccessKeyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateAccountPasswordPolicyError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateAccountPasswordPolicyError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateAccountPasswordPolicyErrorKind::LimitExceededError(inner) => Error::LimitExceededError(inner),
                crate::error::UpdateAccountPasswordPolicyErrorKind::MalformedPolicyDocumentError(inner) => Error::MalformedPolicyDocumentError(inner),
                crate::error::UpdateAccountPasswordPolicyErrorKind::NoSuchEntityError(inner) => Error::NoSuchEntityError(inner),
                crate::error::UpdateAccountPasswordPolicyErrorKind::ServiceFailureError(inner) => Error::ServiceFailureError(inner),
                crate::error::UpdateAccountPasswordPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateAssumeRolePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateAssumeRolePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateAssumeRolePolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UpdateAssumeRolePolicyErrorKind::MalformedPolicyDocumentError(
                    inner,
                ) => Error::MalformedPolicyDocumentError(inner),
                crate::error::UpdateAssumeRolePolicyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UpdateAssumeRolePolicyErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UpdateAssumeRolePolicyErrorKind::UnmodifiableEntityError(inner) => {
                    Error::UnmodifiableEntityError(inner)
                }
                crate::error::UpdateAssumeRolePolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateGroupErrorKind::EntityAlreadyExistsError(inner) => {
                    Error::EntityAlreadyExistsError(inner)
                }
                crate::error::UpdateGroupErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UpdateGroupErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UpdateGroupErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UpdateGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateLoginProfileError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateLoginProfileError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateLoginProfileErrorKind::EntityTemporarilyUnmodifiableError(
                    inner,
                ) => Error::EntityTemporarilyUnmodifiableError(inner),
                crate::error::UpdateLoginProfileErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UpdateLoginProfileErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UpdateLoginProfileErrorKind::PasswordPolicyViolationError(inner) => {
                    Error::PasswordPolicyViolationError(inner)
                }
                crate::error::UpdateLoginProfileErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UpdateLoginProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateOpenIDConnectProviderThumbprintError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::UpdateOpenIDConnectProviderThumbprintError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateOpenIDConnectProviderThumbprintErrorKind::InvalidInputError(inner) => Error::InvalidInputError(inner),
                crate::error::UpdateOpenIDConnectProviderThumbprintErrorKind::NoSuchEntityError(inner) => Error::NoSuchEntityError(inner),
                crate::error::UpdateOpenIDConnectProviderThumbprintErrorKind::ServiceFailureError(inner) => Error::ServiceFailureError(inner),
                crate::error::UpdateOpenIDConnectProviderThumbprintErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateRoleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateRoleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateRoleErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UpdateRoleErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UpdateRoleErrorKind::UnmodifiableEntityError(inner) => {
                    Error::UnmodifiableEntityError(inner)
                }
                crate::error::UpdateRoleErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateRoleDescriptionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateRoleDescriptionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateRoleDescriptionErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UpdateRoleDescriptionErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UpdateRoleDescriptionErrorKind::UnmodifiableEntityError(inner) => {
                    Error::UnmodifiableEntityError(inner)
                }
                crate::error::UpdateRoleDescriptionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateSAMLProviderError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateSAMLProviderError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateSAMLProviderErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::UpdateSAMLProviderErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UpdateSAMLProviderErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UpdateSAMLProviderErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UpdateSAMLProviderErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateServerCertificateError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateServerCertificateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateServerCertificateErrorKind::EntityAlreadyExistsError(inner) => {
                    Error::EntityAlreadyExistsError(inner)
                }
                crate::error::UpdateServerCertificateErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UpdateServerCertificateErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UpdateServerCertificateErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UpdateServerCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateServiceSpecificCredentialError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateServiceSpecificCredentialError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateServiceSpecificCredentialErrorKind::NoSuchEntityError(
                    inner,
                ) => Error::NoSuchEntityError(inner),
                crate::error::UpdateServiceSpecificCredentialErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateSigningCertificateError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateSigningCertificateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateSigningCertificateErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UpdateSigningCertificateErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UpdateSigningCertificateErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UpdateSigningCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateSSHPublicKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateSSHPublicKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateSSHPublicKeyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UpdateSSHPublicKeyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateUserError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateUserError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateUserErrorKind::ConcurrentModificationError(inner) => {
                    Error::ConcurrentModificationError(inner)
                }
                crate::error::UpdateUserErrorKind::EntityAlreadyExistsError(inner) => {
                    Error::EntityAlreadyExistsError(inner)
                }
                crate::error::UpdateUserErrorKind::EntityTemporarilyUnmodifiableError(inner) => {
                    Error::EntityTemporarilyUnmodifiableError(inner)
                }
                crate::error::UpdateUserErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UpdateUserErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UpdateUserErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UpdateUserErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UploadServerCertificateError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UploadServerCertificateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UploadServerCertificateErrorKind::ConcurrentModificationError(
                    inner,
                ) => Error::ConcurrentModificationError(inner),
                crate::error::UploadServerCertificateErrorKind::EntityAlreadyExistsError(inner) => {
                    Error::EntityAlreadyExistsError(inner)
                }
                crate::error::UploadServerCertificateErrorKind::InvalidInputError(inner) => {
                    Error::InvalidInputError(inner)
                }
                crate::error::UploadServerCertificateErrorKind::KeyPairMismatchError(inner) => {
                    Error::KeyPairMismatchError(inner)
                }
                crate::error::UploadServerCertificateErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UploadServerCertificateErrorKind::MalformedCertificateError(
                    inner,
                ) => Error::MalformedCertificateError(inner),
                crate::error::UploadServerCertificateErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UploadServerCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UploadSigningCertificateError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UploadSigningCertificateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UploadSigningCertificateErrorKind::DuplicateCertificateError(
                    inner,
                ) => Error::DuplicateCertificateError(inner),
                crate::error::UploadSigningCertificateErrorKind::EntityAlreadyExistsError(
                    inner,
                ) => Error::EntityAlreadyExistsError(inner),
                crate::error::UploadSigningCertificateErrorKind::InvalidCertificateError(inner) => {
                    Error::InvalidCertificateError(inner)
                }
                crate::error::UploadSigningCertificateErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UploadSigningCertificateErrorKind::MalformedCertificateError(
                    inner,
                ) => Error::MalformedCertificateError(inner),
                crate::error::UploadSigningCertificateErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UploadSigningCertificateErrorKind::ServiceFailureError(inner) => {
                    Error::ServiceFailureError(inner)
                }
                crate::error::UploadSigningCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UploadSSHPublicKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UploadSSHPublicKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UploadSSHPublicKeyErrorKind::DuplicateSSHPublicKeyError(inner) => {
                    Error::DuplicateSSHPublicKeyError(inner)
                }
                crate::error::UploadSSHPublicKeyErrorKind::InvalidPublicKeyError(inner) => {
                    Error::InvalidPublicKeyError(inner)
                }
                crate::error::UploadSSHPublicKeyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UploadSSHPublicKeyErrorKind::NoSuchEntityError(inner) => {
                    Error::NoSuchEntityError(inner)
                }
                crate::error::UploadSSHPublicKeyErrorKind::UnrecognizedPublicKeyEncodingError(
                    inner,
                ) => Error::UnrecognizedPublicKeyEncodingError(inner),
                crate::error::UploadSSHPublicKeyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
