// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    BadRequestError(crate::error::BadRequestError),
    ForbiddenError(crate::error::ForbiddenError),
    InternalServerErrorError(crate::error::InternalServerErrorError),
    NotFoundError(crate::error::NotFoundError),
    ServiceUnavailableError(crate::error::ServiceUnavailableError),
    StatementTimeoutError(crate::error::StatementTimeoutError),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestError(inner) => inner.fmt(f),
            Error::ForbiddenError(inner) => inner.fmt(f),
            Error::InternalServerErrorError(inner) => inner.fmt(f),
            Error::NotFoundError(inner) => inner.fmt(f),
            Error::ServiceUnavailableError(inner) => inner.fmt(f),
            Error::StatementTimeoutError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::BatchExecuteStatementError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::BatchExecuteStatementError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::BatchExecuteStatementErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::BatchExecuteStatementErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::BatchExecuteStatementErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::BatchExecuteStatementErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::BatchExecuteStatementErrorKind::StatementTimeoutError(inner) => {
                    Error::StatementTimeoutError(inner)
                }
                crate::error::BatchExecuteStatementErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::BeginTransactionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::BeginTransactionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::BeginTransactionErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::BeginTransactionErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::BeginTransactionErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::BeginTransactionErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::BeginTransactionErrorKind::StatementTimeoutError(inner) => {
                    Error::StatementTimeoutError(inner)
                }
                crate::error::BeginTransactionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CommitTransactionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CommitTransactionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CommitTransactionErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CommitTransactionErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::CommitTransactionErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::CommitTransactionErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CommitTransactionErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::CommitTransactionErrorKind::StatementTimeoutError(inner) => {
                    Error::StatementTimeoutError(inner)
                }
                crate::error::CommitTransactionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ExecuteSqlError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ExecuteSqlError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ExecuteSqlErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::ExecuteSqlErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::ExecuteSqlErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::ExecuteSqlErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::ExecuteSqlErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ExecuteStatementError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ExecuteStatementError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ExecuteStatementErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::ExecuteStatementErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::ExecuteStatementErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::ExecuteStatementErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::ExecuteStatementErrorKind::StatementTimeoutError(inner) => {
                    Error::StatementTimeoutError(inner)
                }
                crate::error::ExecuteStatementErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RollbackTransactionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RollbackTransactionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RollbackTransactionErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::RollbackTransactionErrorKind::ForbiddenError(inner) => {
                    Error::ForbiddenError(inner)
                }
                crate::error::RollbackTransactionErrorKind::InternalServerErrorError(inner) => {
                    Error::InternalServerErrorError(inner)
                }
                crate::error::RollbackTransactionErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::RollbackTransactionErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::RollbackTransactionErrorKind::StatementTimeoutError(inner) => {
                    Error::StatementTimeoutError(inner)
                }
                crate::error::RollbackTransactionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
