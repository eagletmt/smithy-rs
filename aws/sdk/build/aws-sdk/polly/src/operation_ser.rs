// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_put_lexicon_input_body(
    input: &crate::input::PutLexiconInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::PutLexiconInputBody {
        content: &input.content,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_start_speech_synthesis_task_input_body(
    input: &crate::input::StartSpeechSynthesisTaskInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::StartSpeechSynthesisTaskInputBody {
        engine: &input.engine,
        language_code: &input.language_code,
        lexicon_names: &input.lexicon_names,
        output_format: &input.output_format,
        output_s3_bucket_name: &input.output_s3_bucket_name,
        output_s3_key_prefix: &input.output_s3_key_prefix,
        sample_rate: &input.sample_rate,
        sns_topic_arn: &input.sns_topic_arn,
        speech_mark_types: &input.speech_mark_types,
        text: &input.text,
        text_type: &input.text_type,
        voice_id: &input.voice_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_synthesize_speech_input_body(
    input: &crate::input::SynthesizeSpeechInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::SynthesizeSpeechInputBody {
        engine: &input.engine,
        language_code: &input.language_code,
        lexicon_names: &input.lexicon_names,
        output_format: &input.output_format,
        sample_rate: &input.sample_rate,
        speech_mark_types: &input.speech_mark_types,
        text: &input.text,
        text_type: &input.text_type,
        voice_id: &input.voice_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}
