// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_add_permission(
    input: &crate::input::AddPermissionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AddPermission", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("TopicArn");
    if let Some(var_2) = &input.topic_arn {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Label");
    if let Some(var_4) = &input.label {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("AWSAccountId");
    if let Some(var_6) = &input.aws_account_id {
        let mut list_8 = scope_5.start_list(false, None);
        for item_7 in var_6 {
            #[allow(unused_mut)]
            let mut entry_9 = list_8.entry();
            entry_9.string(item_7);
        }
        list_8.finish();
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("ActionName");
    if let Some(var_11) = &input.action_name {
        let mut list_13 = scope_10.start_list(false, None);
        for item_12 in var_11 {
            #[allow(unused_mut)]
            let mut entry_14 = list_13.entry();
            entry_14.string(item_12);
        }
        list_13.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_check_if_phone_number_is_opted_out(
    input: &crate::input::CheckIfPhoneNumberIsOptedOutInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CheckIfPhoneNumberIsOptedOut", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("phoneNumber");
    if let Some(var_16) = &input.phone_number {
        scope_15.string(var_16);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_confirm_subscription(
    input: &crate::input::ConfirmSubscriptionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ConfirmSubscription", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("TopicArn");
    if let Some(var_18) = &input.topic_arn {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("Token");
    if let Some(var_20) = &input.token {
        scope_19.string(var_20);
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("AuthenticateOnUnsubscribe");
    if let Some(var_22) = &input.authenticate_on_unsubscribe {
        scope_21.string(var_22);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_platform_application(
    input: &crate::input::CreatePlatformApplicationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreatePlatformApplication", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("Name");
    if let Some(var_24) = &input.name {
        scope_23.string(var_24);
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("Platform");
    if let Some(var_26) = &input.platform {
        scope_25.string(var_26);
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("Attributes");
    if let Some(var_28) = &input.attributes {
        let mut map_29 = scope_27.start_map(false, "key", "value");
        for (key_30, value_31) in var_28 {
            #[allow(unused_mut)]
            let mut entry_32 = map_29.entry(key_30);
            {
                entry_32.string(value_31);
            }
        }
        map_29.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_platform_endpoint(
    input: &crate::input::CreatePlatformEndpointInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreatePlatformEndpoint", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("PlatformApplicationArn");
    if let Some(var_34) = &input.platform_application_arn {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("Token");
    if let Some(var_36) = &input.token {
        scope_35.string(var_36);
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("CustomUserData");
    if let Some(var_38) = &input.custom_user_data {
        scope_37.string(var_38);
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("Attributes");
    if let Some(var_40) = &input.attributes {
        let mut map_41 = scope_39.start_map(false, "key", "value");
        for (key_42, value_43) in var_40 {
            #[allow(unused_mut)]
            let mut entry_44 = map_41.entry(key_42);
            {
                entry_44.string(value_43);
            }
        }
        map_41.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_create_topic(
    input: &crate::input::CreateTopicInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateTopic", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Name");
    if let Some(var_46) = &input.name {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("Attributes");
    if let Some(var_48) = &input.attributes {
        let mut map_49 = scope_47.start_map(false, "key", "value");
        for (key_50, value_51) in var_48 {
            #[allow(unused_mut)]
            let mut entry_52 = map_49.entry(key_50);
            {
                entry_52.string(value_51);
            }
        }
        map_49.finish();
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("Tags");
    if let Some(var_54) = &input.tags {
        let mut list_56 = scope_53.start_list(false, None);
        for item_55 in var_54 {
            #[allow(unused_mut)]
            let mut entry_57 = list_56.entry();
            crate::query_ser::serialize_structure_tag(entry_57, item_55);
        }
        list_56.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_endpoint(
    input: &crate::input::DeleteEndpointInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteEndpoint", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("EndpointArn");
    if let Some(var_59) = &input.endpoint_arn {
        scope_58.string(var_59);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_platform_application(
    input: &crate::input::DeletePlatformApplicationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeletePlatformApplication", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_60 = writer.prefix("PlatformApplicationArn");
    if let Some(var_61) = &input.platform_application_arn {
        scope_60.string(var_61);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_delete_topic(
    input: &crate::input::DeleteTopicInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteTopic", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_62 = writer.prefix("TopicArn");
    if let Some(var_63) = &input.topic_arn {
        scope_62.string(var_63);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_endpoint_attributes(
    input: &crate::input::GetEndpointAttributesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetEndpointAttributes", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_64 = writer.prefix("EndpointArn");
    if let Some(var_65) = &input.endpoint_arn {
        scope_64.string(var_65);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_platform_application_attributes(
    input: &crate::input::GetPlatformApplicationAttributesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetPlatformApplicationAttributes", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("PlatformApplicationArn");
    if let Some(var_67) = &input.platform_application_arn {
        scope_66.string(var_67);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_sms_attributes(
    input: &crate::input::GetSMSAttributesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetSMSAttributes", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("attributes");
    if let Some(var_69) = &input.attributes {
        let mut list_71 = scope_68.start_list(false, None);
        for item_70 in var_69 {
            #[allow(unused_mut)]
            let mut entry_72 = list_71.entry();
            entry_72.string(item_70);
        }
        list_71.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_subscription_attributes(
    input: &crate::input::GetSubscriptionAttributesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetSubscriptionAttributes", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("SubscriptionArn");
    if let Some(var_74) = &input.subscription_arn {
        scope_73.string(var_74);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_get_topic_attributes(
    input: &crate::input::GetTopicAttributesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "GetTopicAttributes", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("TopicArn");
    if let Some(var_76) = &input.topic_arn {
        scope_75.string(var_76);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_endpoints_by_platform_application(
    input: &crate::input::ListEndpointsByPlatformApplicationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "ListEndpointsByPlatformApplication",
        "2010-03-31",
    );
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("PlatformApplicationArn");
    if let Some(var_78) = &input.platform_application_arn {
        scope_77.string(var_78);
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("NextToken");
    if let Some(var_80) = &input.next_token {
        scope_79.string(var_80);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_phone_numbers_opted_out(
    input: &crate::input::ListPhoneNumbersOptedOutInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ListPhoneNumbersOptedOut", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("nextToken");
    if let Some(var_82) = &input.next_token {
        scope_81.string(var_82);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_platform_applications(
    input: &crate::input::ListPlatformApplicationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ListPlatformApplications", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("NextToken");
    if let Some(var_84) = &input.next_token {
        scope_83.string(var_84);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_subscriptions(
    input: &crate::input::ListSubscriptionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListSubscriptions", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("NextToken");
    if let Some(var_86) = &input.next_token {
        scope_85.string(var_86);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_subscriptions_by_topic(
    input: &crate::input::ListSubscriptionsByTopicInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "ListSubscriptionsByTopic", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("TopicArn");
    if let Some(var_88) = &input.topic_arn {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("NextToken");
    if let Some(var_90) = &input.next_token {
        scope_89.string(var_90);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_tags_for_resource(
    input: &crate::input::ListTagsForResourceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListTagsForResource", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("ResourceArn");
    if let Some(var_92) = &input.resource_arn {
        scope_91.string(var_92);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_list_topics(
    input: &crate::input::ListTopicsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ListTopics", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("NextToken");
    if let Some(var_94) = &input.next_token {
        scope_93.string(var_94);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_opt_in_phone_number(
    input: &crate::input::OptInPhoneNumberInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "OptInPhoneNumber", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("phoneNumber");
    if let Some(var_96) = &input.phone_number {
        scope_95.string(var_96);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_publish(
    input: &crate::input::PublishInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "Publish", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("TopicArn");
    if let Some(var_98) = &input.topic_arn {
        scope_97.string(var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("TargetArn");
    if let Some(var_100) = &input.target_arn {
        scope_99.string(var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("PhoneNumber");
    if let Some(var_102) = &input.phone_number {
        scope_101.string(var_102);
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("Message");
    if let Some(var_104) = &input.message {
        scope_103.string(var_104);
    }
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("Subject");
    if let Some(var_106) = &input.subject {
        scope_105.string(var_106);
    }
    #[allow(unused_mut)]
    let mut scope_107 = writer.prefix("MessageStructure");
    if let Some(var_108) = &input.message_structure {
        scope_107.string(var_108);
    }
    #[allow(unused_mut)]
    let mut scope_109 = writer.prefix("MessageAttributes");
    if let Some(var_110) = &input.message_attributes {
        let mut map_111 = scope_109.start_map(false, "Name", "Value");
        for (key_112, value_113) in var_110 {
            #[allow(unused_mut)]
            let mut entry_114 = map_111.entry(key_112);
            {
                crate::query_ser::serialize_structure_message_attribute_value(entry_114, value_113);
            }
        }
        map_111.finish();
    }
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("MessageDeduplicationId");
    if let Some(var_116) = &input.message_deduplication_id {
        scope_115.string(var_116);
    }
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("MessageGroupId");
    if let Some(var_118) = &input.message_group_id {
        scope_117.string(var_118);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_remove_permission(
    input: &crate::input::RemovePermissionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "RemovePermission", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("TopicArn");
    if let Some(var_120) = &input.topic_arn {
        scope_119.string(var_120);
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("Label");
    if let Some(var_122) = &input.label {
        scope_121.string(var_122);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_set_endpoint_attributes(
    input: &crate::input::SetEndpointAttributesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SetEndpointAttributes", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("EndpointArn");
    if let Some(var_124) = &input.endpoint_arn {
        scope_123.string(var_124);
    }
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("Attributes");
    if let Some(var_126) = &input.attributes {
        let mut map_127 = scope_125.start_map(false, "key", "value");
        for (key_128, value_129) in var_126 {
            #[allow(unused_mut)]
            let mut entry_130 = map_127.entry(key_128);
            {
                entry_130.string(value_129);
            }
        }
        map_127.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_set_platform_application_attributes(
    input: &crate::input::SetPlatformApplicationAttributesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SetPlatformApplicationAttributes", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("PlatformApplicationArn");
    if let Some(var_132) = &input.platform_application_arn {
        scope_131.string(var_132);
    }
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("Attributes");
    if let Some(var_134) = &input.attributes {
        let mut map_135 = scope_133.start_map(false, "key", "value");
        for (key_136, value_137) in var_134 {
            #[allow(unused_mut)]
            let mut entry_138 = map_135.entry(key_136);
            {
                entry_138.string(value_137);
            }
        }
        map_135.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_set_sms_attributes(
    input: &crate::input::SetSMSAttributesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "SetSMSAttributes", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_139 = writer.prefix("attributes");
    if let Some(var_140) = &input.attributes {
        let mut map_141 = scope_139.start_map(false, "key", "value");
        for (key_142, value_143) in var_140 {
            #[allow(unused_mut)]
            let mut entry_144 = map_141.entry(key_142);
            {
                entry_144.string(value_143);
            }
        }
        map_141.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_set_subscription_attributes(
    input: &crate::input::SetSubscriptionAttributesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SetSubscriptionAttributes", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("SubscriptionArn");
    if let Some(var_146) = &input.subscription_arn {
        scope_145.string(var_146);
    }
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("AttributeName");
    if let Some(var_148) = &input.attribute_name {
        scope_147.string(var_148);
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("AttributeValue");
    if let Some(var_150) = &input.attribute_value {
        scope_149.string(var_150);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_set_topic_attributes(
    input: &crate::input::SetTopicAttributesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "SetTopicAttributes", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("TopicArn");
    if let Some(var_152) = &input.topic_arn {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("AttributeName");
    if let Some(var_154) = &input.attribute_name {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("AttributeValue");
    if let Some(var_156) = &input.attribute_value {
        scope_155.string(var_156);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_subscribe(
    input: &crate::input::SubscribeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "Subscribe", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("TopicArn");
    if let Some(var_158) = &input.topic_arn {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("Protocol");
    if let Some(var_160) = &input.protocol {
        scope_159.string(var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("Endpoint");
    if let Some(var_162) = &input.endpoint {
        scope_161.string(var_162);
    }
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("Attributes");
    if let Some(var_164) = &input.attributes {
        let mut map_165 = scope_163.start_map(false, "key", "value");
        for (key_166, value_167) in var_164 {
            #[allow(unused_mut)]
            let mut entry_168 = map_165.entry(key_166);
            {
                entry_168.string(value_167);
            }
        }
        map_165.finish();
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("ReturnSubscriptionArn");
    if input.return_subscription_arn {
        scope_169.boolean(input.return_subscription_arn);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_tag_resource(
    input: &crate::input::TagResourceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "TagResource", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("ResourceArn");
    if let Some(var_171) = &input.resource_arn {
        scope_170.string(var_171);
    }
    #[allow(unused_mut)]
    let mut scope_172 = writer.prefix("Tags");
    if let Some(var_173) = &input.tags {
        let mut list_175 = scope_172.start_list(false, None);
        for item_174 in var_173 {
            #[allow(unused_mut)]
            let mut entry_176 = list_175.entry();
            crate::query_ser::serialize_structure_tag(entry_176, item_174);
        }
        list_175.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_unsubscribe(
    input: &crate::input::UnsubscribeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "Unsubscribe", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("SubscriptionArn");
    if let Some(var_178) = &input.subscription_arn {
        scope_177.string(var_178);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_untag_resource(
    input: &crate::input::UntagResourceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "UntagResource", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("ResourceArn");
    if let Some(var_180) = &input.resource_arn {
        scope_179.string(var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("TagKeys");
    if let Some(var_182) = &input.tag_keys {
        let mut list_184 = scope_181.start_list(false, None);
        for item_183 in var_182 {
            #[allow(unused_mut)]
            let mut entry_185 = list_184.entry();
            entry_185.string(item_183);
        }
        list_184.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}
