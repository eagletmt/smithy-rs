// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_add_permission_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::AddPermissionOutput, crate::error::AddPermissionError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::AddPermissionError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::AddPermissionError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::AddPermissionError {
            meta: generic,
            kind: crate::error::AddPermissionErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::AddPermissionError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::AddPermissionError {
            meta: generic,
            kind: crate::error::AddPermissionErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::AddPermissionError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::AddPermissionError {
            meta: generic,
            kind: crate::error::AddPermissionErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::AddPermissionError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::AddPermissionError {
            meta: generic,
            kind: crate::error::AddPermissionErrorKind::NotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                output = crate::xml_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::AddPermissionError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::AddPermissionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_add_permission_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::AddPermissionOutput, crate::error::AddPermissionError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::add_permission_output::Builder::default();
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_check_if_phone_number_is_opted_out_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::CheckIfPhoneNumberIsOptedOutOutput,
    crate::error::CheckIfPhoneNumberIsOptedOutError,
> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::CheckIfPhoneNumberIsOptedOutError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CheckIfPhoneNumberIsOptedOutError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::CheckIfPhoneNumberIsOptedOutError {
            meta: generic,
            kind: crate::error::CheckIfPhoneNumberIsOptedOutErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CheckIfPhoneNumberIsOptedOutError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::CheckIfPhoneNumberIsOptedOutError {
            meta: generic,
            kind: crate::error::CheckIfPhoneNumberIsOptedOutErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CheckIfPhoneNumberIsOptedOutError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::CheckIfPhoneNumberIsOptedOutError {
            meta: generic,
            kind: crate::error::CheckIfPhoneNumberIsOptedOutErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CheckIfPhoneNumberIsOptedOutError::unhandled)?;
                output.build()
            }),
        },
        "ThrottledException" => crate::error::CheckIfPhoneNumberIsOptedOutError {
            meta: generic,
            kind: crate::error::CheckIfPhoneNumberIsOptedOutErrorKind::ThrottledError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::throttled_error::Builder::default();
                output = crate::xml_deser::throttled_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CheckIfPhoneNumberIsOptedOutError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::CheckIfPhoneNumberIsOptedOutError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_check_if_phone_number_is_opted_out_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::CheckIfPhoneNumberIsOptedOutOutput,
    crate::error::CheckIfPhoneNumberIsOptedOutError,
> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output =
            crate::output::check_if_phone_number_is_opted_out_output::Builder::default();
        output = crate::xml_deser::deser_operation_check_if_phone_number_is_opted_out(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CheckIfPhoneNumberIsOptedOutError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_confirm_subscription_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::ConfirmSubscriptionOutput, crate::error::ConfirmSubscriptionError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::ConfirmSubscriptionError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ConfirmSubscriptionError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::ConfirmSubscriptionError {
            meta: generic,
            kind: crate::error::ConfirmSubscriptionErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ConfirmSubscriptionError::unhandled)?;
                output.build()
            }),
        },
        "FilterPolicyLimitExceededException" => crate::error::ConfirmSubscriptionError {
            meta: generic,
            kind: crate::error::ConfirmSubscriptionErrorKind::FilterPolicyLimitExceededError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output =
                    crate::error::filter_policy_limit_exceeded_error::Builder::default();
                output = crate::xml_deser::filter_policy_limit_exceeded_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ConfirmSubscriptionError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::ConfirmSubscriptionError {
            meta: generic,
            kind: crate::error::ConfirmSubscriptionErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ConfirmSubscriptionError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::ConfirmSubscriptionError {
            meta: generic,
            kind: crate::error::ConfirmSubscriptionErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ConfirmSubscriptionError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::ConfirmSubscriptionError {
            meta: generic,
            kind: crate::error::ConfirmSubscriptionErrorKind::NotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                output = crate::xml_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ConfirmSubscriptionError::unhandled)?;
                output.build()
            }),
        },
        "SubscriptionLimitExceededException" => crate::error::ConfirmSubscriptionError {
            meta: generic,
            kind: crate::error::ConfirmSubscriptionErrorKind::SubscriptionLimitExceededError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output =
                    crate::error::subscription_limit_exceeded_error::Builder::default();
                output = crate::xml_deser::subscription_limit_exceeded_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ConfirmSubscriptionError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ConfirmSubscriptionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_confirm_subscription_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::ConfirmSubscriptionOutput, crate::error::ConfirmSubscriptionError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::confirm_subscription_output::Builder::default();
        output = crate::xml_deser::deser_operation_confirm_subscription(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ConfirmSubscriptionError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_platform_application_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::CreatePlatformApplicationOutput,
    crate::error::CreatePlatformApplicationError,
> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::CreatePlatformApplicationError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CreatePlatformApplicationError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::CreatePlatformApplicationError {
            meta: generic,
            kind: crate::error::CreatePlatformApplicationErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreatePlatformApplicationError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::CreatePlatformApplicationError {
            meta: generic,
            kind: crate::error::CreatePlatformApplicationErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CreatePlatformApplicationError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::CreatePlatformApplicationError {
            meta: generic,
            kind: crate::error::CreatePlatformApplicationErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CreatePlatformApplicationError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::CreatePlatformApplicationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_platform_application_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::CreatePlatformApplicationOutput,
    crate::error::CreatePlatformApplicationError,
> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::create_platform_application_output::Builder::default();
        output = crate::xml_deser::deser_operation_create_platform_application(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreatePlatformApplicationError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_platform_endpoint_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::CreatePlatformEndpointOutput, crate::error::CreatePlatformEndpointError>
{
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::CreatePlatformEndpointError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CreatePlatformEndpointError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::CreatePlatformEndpointError {
            meta: generic,
            kind: crate::error::CreatePlatformEndpointErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreatePlatformEndpointError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::CreatePlatformEndpointError {
            meta: generic,
            kind: crate::error::CreatePlatformEndpointErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CreatePlatformEndpointError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::CreatePlatformEndpointError {
            meta: generic,
            kind: crate::error::CreatePlatformEndpointErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CreatePlatformEndpointError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::CreatePlatformEndpointError {
            meta: generic,
            kind: crate::error::CreatePlatformEndpointErrorKind::NotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                output = crate::xml_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreatePlatformEndpointError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::CreatePlatformEndpointError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_platform_endpoint_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::CreatePlatformEndpointOutput, crate::error::CreatePlatformEndpointError>
{
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::create_platform_endpoint_output::Builder::default();
        output = crate::xml_deser::deser_operation_create_platform_endpoint(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreatePlatformEndpointError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_topic_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::CreateTopicOutput, crate::error::CreateTopicError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::CreateTopicError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateTopicError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::CreateTopicError {
            meta: generic,
            kind: crate::error::CreateTopicErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateTopicError::unhandled)?;
                output.build()
            }),
        },
        "ConcurrentAccessException" => crate::error::CreateTopicError {
            meta: generic,
            kind: crate::error::CreateTopicErrorKind::ConcurrentAccessError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::concurrent_access_error::Builder::default();
                output =
                    crate::xml_deser::concurrent_access_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CreateTopicError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::CreateTopicError {
            meta: generic,
            kind: crate::error::CreateTopicErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CreateTopicError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::CreateTopicError {
            meta: generic,
            kind: crate::error::CreateTopicErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CreateTopicError::unhandled)?;
                output.build()
            }),
        },
        "InvalidSecurityException" => crate::error::CreateTopicError {
            meta: generic,
            kind: crate::error::CreateTopicErrorKind::InvalidSecurityError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_security_error::Builder::default();
                output =
                    crate::xml_deser::invalid_security_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CreateTopicError::unhandled)?;
                output.build()
            }),
        },
        "StaleTagException" => crate::error::CreateTopicError {
            meta: generic,
            kind: crate::error::CreateTopicErrorKind::StaleTagError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::stale_tag_error::Builder::default();
                output = crate::xml_deser::stale_tag_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateTopicError::unhandled)?;
                output.build()
            }),
        },
        "TagLimitExceededException" => crate::error::CreateTopicError {
            meta: generic,
            kind: crate::error::CreateTopicErrorKind::TagLimitExceededError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::tag_limit_exceeded_error::Builder::default();
                output = crate::xml_deser::tag_limit_exceeded_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateTopicError::unhandled)?;
                output.build()
            }),
        },
        "TagPolicyException" => crate::error::CreateTopicError {
            meta: generic,
            kind: crate::error::CreateTopicErrorKind::TagPolicyError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::tag_policy_error::Builder::default();
                output = crate::xml_deser::tag_policy_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateTopicError::unhandled)?;
                output.build()
            }),
        },
        "TopicLimitExceededException" => crate::error::CreateTopicError {
            meta: generic,
            kind: crate::error::CreateTopicErrorKind::TopicLimitExceededError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::topic_limit_exceeded_error::Builder::default();
                output = crate::xml_deser::topic_limit_exceeded_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateTopicError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::CreateTopicError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_topic_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::CreateTopicOutput, crate::error::CreateTopicError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::create_topic_output::Builder::default();
        output = crate::xml_deser::deser_operation_create_topic(response.body().as_ref(), output)
            .map_err(crate::error::CreateTopicError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_endpoint_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::DeleteEndpointOutput, crate::error::DeleteEndpointError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::DeleteEndpointError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteEndpointError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::DeleteEndpointError {
            meta: generic,
            kind: crate::error::DeleteEndpointErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteEndpointError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::DeleteEndpointError {
            meta: generic,
            kind: crate::error::DeleteEndpointErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DeleteEndpointError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::DeleteEndpointError {
            meta: generic,
            kind: crate::error::DeleteEndpointErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DeleteEndpointError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DeleteEndpointError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_endpoint_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::DeleteEndpointOutput, crate::error::DeleteEndpointError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::delete_endpoint_output::Builder::default();
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_platform_application_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::DeletePlatformApplicationOutput,
    crate::error::DeletePlatformApplicationError,
> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::DeletePlatformApplicationError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DeletePlatformApplicationError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::DeletePlatformApplicationError {
            meta: generic,
            kind: crate::error::DeletePlatformApplicationErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeletePlatformApplicationError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::DeletePlatformApplicationError {
            meta: generic,
            kind: crate::error::DeletePlatformApplicationErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DeletePlatformApplicationError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::DeletePlatformApplicationError {
            meta: generic,
            kind: crate::error::DeletePlatformApplicationErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DeletePlatformApplicationError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DeletePlatformApplicationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_platform_application_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::DeletePlatformApplicationOutput,
    crate::error::DeletePlatformApplicationError,
> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::delete_platform_application_output::Builder::default();
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_topic_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::DeleteTopicOutput, crate::error::DeleteTopicError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::DeleteTopicError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteTopicError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::DeleteTopicError {
            meta: generic,
            kind: crate::error::DeleteTopicErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteTopicError::unhandled)?;
                output.build()
            }),
        },
        "ConcurrentAccessException" => crate::error::DeleteTopicError {
            meta: generic,
            kind: crate::error::DeleteTopicErrorKind::ConcurrentAccessError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::concurrent_access_error::Builder::default();
                output =
                    crate::xml_deser::concurrent_access_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DeleteTopicError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::DeleteTopicError {
            meta: generic,
            kind: crate::error::DeleteTopicErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DeleteTopicError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::DeleteTopicError {
            meta: generic,
            kind: crate::error::DeleteTopicErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DeleteTopicError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DeleteTopicError {
            meta: generic,
            kind: crate::error::DeleteTopicErrorKind::NotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                output = crate::xml_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteTopicError::unhandled)?;
                output.build()
            }),
        },
        "StaleTagException" => crate::error::DeleteTopicError {
            meta: generic,
            kind: crate::error::DeleteTopicErrorKind::StaleTagError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::stale_tag_error::Builder::default();
                output = crate::xml_deser::stale_tag_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteTopicError::unhandled)?;
                output.build()
            }),
        },
        "TagPolicyException" => crate::error::DeleteTopicError {
            meta: generic,
            kind: crate::error::DeleteTopicErrorKind::TagPolicyError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::tag_policy_error::Builder::default();
                output = crate::xml_deser::tag_policy_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteTopicError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DeleteTopicError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_topic_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::DeleteTopicOutput, crate::error::DeleteTopicError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::delete_topic_output::Builder::default();
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_endpoint_attributes_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::GetEndpointAttributesOutput, crate::error::GetEndpointAttributesError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::GetEndpointAttributesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetEndpointAttributesError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::GetEndpointAttributesError {
            meta: generic,
            kind: crate::error::GetEndpointAttributesErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetEndpointAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::GetEndpointAttributesError {
            meta: generic,
            kind: crate::error::GetEndpointAttributesErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::GetEndpointAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::GetEndpointAttributesError {
            meta: generic,
            kind: crate::error::GetEndpointAttributesErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::GetEndpointAttributesError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::GetEndpointAttributesError {
            meta: generic,
            kind: crate::error::GetEndpointAttributesErrorKind::NotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                output = crate::xml_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::GetEndpointAttributesError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::GetEndpointAttributesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_endpoint_attributes_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::GetEndpointAttributesOutput, crate::error::GetEndpointAttributesError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::get_endpoint_attributes_output::Builder::default();
        output = crate::xml_deser::deser_operation_get_endpoint_attributes(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetEndpointAttributesError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_platform_application_attributes_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::GetPlatformApplicationAttributesOutput,
    crate::error::GetPlatformApplicationAttributesError,
> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::GetPlatformApplicationAttributesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::GetPlatformApplicationAttributesError::unhandled(generic))
        }
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::GetPlatformApplicationAttributesError {
            meta: generic,
            kind: crate::error::GetPlatformApplicationAttributesErrorKind::AuthorizationErrorError(
                {
                    let _ = response;
                    #[allow(unused_mut)]
                    let mut output = crate::error::authorization_error_error::Builder::default();
                    output = crate::xml_deser::authorization_error_exception(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetPlatformApplicationAttributesError::unhandled)?;
                    output.build()
                },
            ),
        },
        "InternalErrorException" => crate::error::GetPlatformApplicationAttributesError {
            meta: generic,
            kind: crate::error::GetPlatformApplicationAttributesErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::GetPlatformApplicationAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::GetPlatformApplicationAttributesError {
            meta: generic,
            kind: crate::error::GetPlatformApplicationAttributesErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::GetPlatformApplicationAttributesError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::GetPlatformApplicationAttributesError {
            meta: generic,
            kind: crate::error::GetPlatformApplicationAttributesErrorKind::NotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                output = crate::xml_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::GetPlatformApplicationAttributesError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::GetPlatformApplicationAttributesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_platform_application_attributes_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::GetPlatformApplicationAttributesOutput,
    crate::error::GetPlatformApplicationAttributesError,
> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output =
            crate::output::get_platform_application_attributes_output::Builder::default();
        output = crate::xml_deser::deser_operation_get_platform_application_attributes(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetPlatformApplicationAttributesError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_sms_attributes_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::GetSMSAttributesOutput, crate::error::GetSMSAttributesError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::GetSMSAttributesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetSMSAttributesError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::GetSMSAttributesError {
            meta: generic,
            kind: crate::error::GetSMSAttributesErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetSMSAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::GetSMSAttributesError {
            meta: generic,
            kind: crate::error::GetSMSAttributesErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::GetSMSAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::GetSMSAttributesError {
            meta: generic,
            kind: crate::error::GetSMSAttributesErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::GetSMSAttributesError::unhandled)?;
                output.build()
            }),
        },
        "ThrottledException" => crate::error::GetSMSAttributesError {
            meta: generic,
            kind: crate::error::GetSMSAttributesErrorKind::ThrottledError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::throttled_error::Builder::default();
                output = crate::xml_deser::throttled_exception(response.body().as_ref(), output)
                    .map_err(crate::error::GetSMSAttributesError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::GetSMSAttributesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_sms_attributes_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::GetSMSAttributesOutput, crate::error::GetSMSAttributesError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::get_sms_attributes_output::Builder::default();
        output =
            crate::xml_deser::deser_operation_get_sms_attributes(response.body().as_ref(), output)
                .map_err(crate::error::GetSMSAttributesError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_subscription_attributes_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::GetSubscriptionAttributesOutput,
    crate::error::GetSubscriptionAttributesError,
> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::GetSubscriptionAttributesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::GetSubscriptionAttributesError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::GetSubscriptionAttributesError {
            meta: generic,
            kind: crate::error::GetSubscriptionAttributesErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetSubscriptionAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::GetSubscriptionAttributesError {
            meta: generic,
            kind: crate::error::GetSubscriptionAttributesErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::GetSubscriptionAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::GetSubscriptionAttributesError {
            meta: generic,
            kind: crate::error::GetSubscriptionAttributesErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::GetSubscriptionAttributesError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::GetSubscriptionAttributesError {
            meta: generic,
            kind: crate::error::GetSubscriptionAttributesErrorKind::NotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                output = crate::xml_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::GetSubscriptionAttributesError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::GetSubscriptionAttributesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_subscription_attributes_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::GetSubscriptionAttributesOutput,
    crate::error::GetSubscriptionAttributesError,
> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::get_subscription_attributes_output::Builder::default();
        output = crate::xml_deser::deser_operation_get_subscription_attributes(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetSubscriptionAttributesError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_topic_attributes_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::GetTopicAttributesOutput, crate::error::GetTopicAttributesError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::GetTopicAttributesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetTopicAttributesError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::GetTopicAttributesError {
            meta: generic,
            kind: crate::error::GetTopicAttributesErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetTopicAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::GetTopicAttributesError {
            meta: generic,
            kind: crate::error::GetTopicAttributesErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::GetTopicAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::GetTopicAttributesError {
            meta: generic,
            kind: crate::error::GetTopicAttributesErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::GetTopicAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InvalidSecurityException" => crate::error::GetTopicAttributesError {
            meta: generic,
            kind: crate::error::GetTopicAttributesErrorKind::InvalidSecurityError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_security_error::Builder::default();
                output =
                    crate::xml_deser::invalid_security_exception(response.body().as_ref(), output)
                        .map_err(crate::error::GetTopicAttributesError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::GetTopicAttributesError {
            meta: generic,
            kind: crate::error::GetTopicAttributesErrorKind::NotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                output = crate::xml_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::GetTopicAttributesError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::GetTopicAttributesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_topic_attributes_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::GetTopicAttributesOutput, crate::error::GetTopicAttributesError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::get_topic_attributes_output::Builder::default();
        output = crate::xml_deser::deser_operation_get_topic_attributes(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetTopicAttributesError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_endpoints_by_platform_application_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::ListEndpointsByPlatformApplicationOutput,
    crate::error::ListEndpointsByPlatformApplicationError,
> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::ListEndpointsByPlatformApplicationError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ListEndpointsByPlatformApplicationError::unhandled(generic))
        }
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::ListEndpointsByPlatformApplicationError {
            meta: generic,
            kind:
                crate::error::ListEndpointsByPlatformApplicationErrorKind::AuthorizationErrorError(
                    {
                        let _ = response;
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::authorization_error_error::Builder::default();
                        output = crate::xml_deser::authorization_error_exception(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(
                            crate::error::ListEndpointsByPlatformApplicationError::unhandled,
                        )?;
                        output.build()
                    },
                ),
        },
        "InternalErrorException" => crate::error::ListEndpointsByPlatformApplicationError {
            meta: generic,
            kind: crate::error::ListEndpointsByPlatformApplicationErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(
                            crate::error::ListEndpointsByPlatformApplicationError::unhandled,
                        )?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::ListEndpointsByPlatformApplicationError {
            meta: generic,
            kind: crate::error::ListEndpointsByPlatformApplicationErrorKind::InvalidParameterError(
                {
                    let _ = response;
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_parameter_error::Builder::default();
                    output = crate::xml_deser::invalid_parameter_exception(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListEndpointsByPlatformApplicationError::unhandled)?;
                    output.build()
                },
            ),
        },
        "NotFoundException" => crate::error::ListEndpointsByPlatformApplicationError {
            meta: generic,
            kind: crate::error::ListEndpointsByPlatformApplicationErrorKind::NotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                output = crate::xml_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListEndpointsByPlatformApplicationError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListEndpointsByPlatformApplicationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_endpoints_by_platform_application_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::ListEndpointsByPlatformApplicationOutput,
    crate::error::ListEndpointsByPlatformApplicationError,
> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output =
            crate::output::list_endpoints_by_platform_application_output::Builder::default();
        output = crate::xml_deser::deser_operation_list_endpoints_by_platform_application(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListEndpointsByPlatformApplicationError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_phone_numbers_opted_out_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::ListPhoneNumbersOptedOutOutput,
    crate::error::ListPhoneNumbersOptedOutError,
> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::ListPhoneNumbersOptedOutError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ListPhoneNumbersOptedOutError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::ListPhoneNumbersOptedOutError {
            meta: generic,
            kind: crate::error::ListPhoneNumbersOptedOutErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListPhoneNumbersOptedOutError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::ListPhoneNumbersOptedOutError {
            meta: generic,
            kind: crate::error::ListPhoneNumbersOptedOutErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListPhoneNumbersOptedOutError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::ListPhoneNumbersOptedOutError {
            meta: generic,
            kind: crate::error::ListPhoneNumbersOptedOutErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListPhoneNumbersOptedOutError::unhandled)?;
                output.build()
            }),
        },
        "ThrottledException" => crate::error::ListPhoneNumbersOptedOutError {
            meta: generic,
            kind: crate::error::ListPhoneNumbersOptedOutErrorKind::ThrottledError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::throttled_error::Builder::default();
                output = crate::xml_deser::throttled_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListPhoneNumbersOptedOutError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListPhoneNumbersOptedOutError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_phone_numbers_opted_out_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::ListPhoneNumbersOptedOutOutput,
    crate::error::ListPhoneNumbersOptedOutError,
> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::list_phone_numbers_opted_out_output::Builder::default();
        output = crate::xml_deser::deser_operation_list_phone_numbers_opted_out(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListPhoneNumbersOptedOutError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_platform_applications_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::ListPlatformApplicationsOutput,
    crate::error::ListPlatformApplicationsError,
> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::ListPlatformApplicationsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ListPlatformApplicationsError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::ListPlatformApplicationsError {
            meta: generic,
            kind: crate::error::ListPlatformApplicationsErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListPlatformApplicationsError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::ListPlatformApplicationsError {
            meta: generic,
            kind: crate::error::ListPlatformApplicationsErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListPlatformApplicationsError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::ListPlatformApplicationsError {
            meta: generic,
            kind: crate::error::ListPlatformApplicationsErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListPlatformApplicationsError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListPlatformApplicationsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_platform_applications_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::ListPlatformApplicationsOutput,
    crate::error::ListPlatformApplicationsError,
> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::list_platform_applications_output::Builder::default();
        output = crate::xml_deser::deser_operation_list_platform_applications(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListPlatformApplicationsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_subscriptions_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::ListSubscriptionsOutput, crate::error::ListSubscriptionsError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::ListSubscriptionsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListSubscriptionsError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::ListSubscriptionsError {
            meta: generic,
            kind: crate::error::ListSubscriptionsErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListSubscriptionsError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::ListSubscriptionsError {
            meta: generic,
            kind: crate::error::ListSubscriptionsErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListSubscriptionsError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::ListSubscriptionsError {
            meta: generic,
            kind: crate::error::ListSubscriptionsErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListSubscriptionsError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListSubscriptionsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_subscriptions_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::ListSubscriptionsOutput, crate::error::ListSubscriptionsError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::list_subscriptions_output::Builder::default();
        output =
            crate::xml_deser::deser_operation_list_subscriptions(response.body().as_ref(), output)
                .map_err(crate::error::ListSubscriptionsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_subscriptions_by_topic_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::ListSubscriptionsByTopicOutput,
    crate::error::ListSubscriptionsByTopicError,
> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::ListSubscriptionsByTopicError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ListSubscriptionsByTopicError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::ListSubscriptionsByTopicError {
            meta: generic,
            kind: crate::error::ListSubscriptionsByTopicErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListSubscriptionsByTopicError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::ListSubscriptionsByTopicError {
            meta: generic,
            kind: crate::error::ListSubscriptionsByTopicErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListSubscriptionsByTopicError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::ListSubscriptionsByTopicError {
            meta: generic,
            kind: crate::error::ListSubscriptionsByTopicErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListSubscriptionsByTopicError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::ListSubscriptionsByTopicError {
            meta: generic,
            kind: crate::error::ListSubscriptionsByTopicErrorKind::NotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                output = crate::xml_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListSubscriptionsByTopicError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListSubscriptionsByTopicError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_subscriptions_by_topic_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::ListSubscriptionsByTopicOutput,
    crate::error::ListSubscriptionsByTopicError,
> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::list_subscriptions_by_topic_output::Builder::default();
        output = crate::xml_deser::deser_operation_list_subscriptions_by_topic(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListSubscriptionsByTopicError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::ListTagsForResourceOutput, crate::error::ListTagsForResourceError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListTagsForResourceError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListTagsForResourceError::unhandled)?;
                output.build()
            }),
        },
        "ConcurrentAccessException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::ConcurrentAccessError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::concurrent_access_error::Builder::default();
                output =
                    crate::xml_deser::concurrent_access_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::ResourceNotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                output = crate::xml_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListTagsForResourceError::unhandled)?;
                output.build()
            }),
        },
        "TagPolicyException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::TagPolicyError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::tag_policy_error::Builder::default();
                output = crate::xml_deser::tag_policy_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListTagsForResourceError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListTagsForResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::ListTagsForResourceOutput, crate::error::ListTagsForResourceError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::list_tags_for_resource_output::Builder::default();
        output = crate::xml_deser::deser_operation_list_tags_for_resource(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_topics_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::ListTopicsOutput, crate::error::ListTopicsError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::ListTopicsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListTopicsError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::ListTopicsError {
            meta: generic,
            kind: crate::error::ListTopicsErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListTopicsError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::ListTopicsError {
            meta: generic,
            kind: crate::error::ListTopicsErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListTopicsError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::ListTopicsError {
            meta: generic,
            kind: crate::error::ListTopicsErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::ListTopicsError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListTopicsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_topics_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::ListTopicsOutput, crate::error::ListTopicsError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::list_topics_output::Builder::default();
        output = crate::xml_deser::deser_operation_list_topics(response.body().as_ref(), output)
            .map_err(crate::error::ListTopicsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_opt_in_phone_number_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::OptInPhoneNumberOutput, crate::error::OptInPhoneNumberError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::OptInPhoneNumberError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::OptInPhoneNumberError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::OptInPhoneNumberError {
            meta: generic,
            kind: crate::error::OptInPhoneNumberErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::OptInPhoneNumberError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::OptInPhoneNumberError {
            meta: generic,
            kind: crate::error::OptInPhoneNumberErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::OptInPhoneNumberError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::OptInPhoneNumberError {
            meta: generic,
            kind: crate::error::OptInPhoneNumberErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::OptInPhoneNumberError::unhandled)?;
                output.build()
            }),
        },
        "ThrottledException" => crate::error::OptInPhoneNumberError {
            meta: generic,
            kind: crate::error::OptInPhoneNumberErrorKind::ThrottledError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::throttled_error::Builder::default();
                output = crate::xml_deser::throttled_exception(response.body().as_ref(), output)
                    .map_err(crate::error::OptInPhoneNumberError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::OptInPhoneNumberError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_opt_in_phone_number_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::OptInPhoneNumberOutput, crate::error::OptInPhoneNumberError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::opt_in_phone_number_output::Builder::default();
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_publish_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::PublishOutput, crate::error::PublishError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::PublishError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::PublishError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::PublishError {
            meta: generic,
            kind: crate::error::PublishErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::PublishError::unhandled)?;
                output.build()
            }),
        },
        "EndpointDisabledException" => crate::error::PublishError {
            meta: generic,
            kind: crate::error::PublishErrorKind::EndpointDisabledError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::endpoint_disabled_error::Builder::default();
                output =
                    crate::xml_deser::endpoint_disabled_exception(response.body().as_ref(), output)
                        .map_err(crate::error::PublishError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::PublishError {
            meta: generic,
            kind: crate::error::PublishErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::PublishError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::PublishError {
            meta: generic,
            kind: crate::error::PublishErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::PublishError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterValueException" => crate::error::PublishError {
            meta: generic,
            kind: crate::error::PublishErrorKind::InvalidParameterValueError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_value_error::Builder::default();
                output = crate::xml_deser::invalid_parameter_value_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::PublishError::unhandled)?;
                output.build()
            }),
        },
        "InvalidSecurityException" => crate::error::PublishError {
            meta: generic,
            kind: crate::error::PublishErrorKind::InvalidSecurityError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_security_error::Builder::default();
                output =
                    crate::xml_deser::invalid_security_exception(response.body().as_ref(), output)
                        .map_err(crate::error::PublishError::unhandled)?;
                output.build()
            }),
        },
        "KMSAccessDeniedException" => crate::error::PublishError {
            meta: generic,
            kind: crate::error::PublishErrorKind::KMSAccessDeniedError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::kms_access_denied_error::Builder::default();
                output =
                    crate::xml_deser::kms_access_denied_exception(response.body().as_ref(), output)
                        .map_err(crate::error::PublishError::unhandled)?;
                output.build()
            }),
        },
        "KMSDisabledException" => crate::error::PublishError {
            meta: generic,
            kind: crate::error::PublishErrorKind::KMSDisabledError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::kms_disabled_error::Builder::default();
                output = crate::xml_deser::kms_disabled_exception(response.body().as_ref(), output)
                    .map_err(crate::error::PublishError::unhandled)?;
                output.build()
            }),
        },
        "KMSInvalidStateException" => crate::error::PublishError {
            meta: generic,
            kind: crate::error::PublishErrorKind::KMSInvalidStateError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::kms_invalid_state_error::Builder::default();
                output =
                    crate::xml_deser::kms_invalid_state_exception(response.body().as_ref(), output)
                        .map_err(crate::error::PublishError::unhandled)?;
                output.build()
            }),
        },
        "KMSNotFoundException" => crate::error::PublishError {
            meta: generic,
            kind: crate::error::PublishErrorKind::KMSNotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::kms_not_found_error::Builder::default();
                output =
                    crate::xml_deser::kms_not_found_exception(response.body().as_ref(), output)
                        .map_err(crate::error::PublishError::unhandled)?;
                output.build()
            }),
        },
        "KMSOptInRequired" => crate::error::PublishError {
            meta: generic,
            kind: crate::error::PublishErrorKind::KMSOptInRequired({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::kms_opt_in_required::Builder::default();
                output = crate::xml_deser::kms_opt_in_required(response.body().as_ref(), output)
                    .map_err(crate::error::PublishError::unhandled)?;
                output.build()
            }),
        },
        "KMSThrottlingException" => crate::error::PublishError {
            meta: generic,
            kind: crate::error::PublishErrorKind::KMSThrottlingError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::kms_throttling_error::Builder::default();
                output =
                    crate::xml_deser::kms_throttling_exception(response.body().as_ref(), output)
                        .map_err(crate::error::PublishError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::PublishError {
            meta: generic,
            kind: crate::error::PublishErrorKind::NotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                output = crate::xml_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::PublishError::unhandled)?;
                output.build()
            }),
        },
        "PlatformApplicationDisabledException" => crate::error::PublishError {
            meta: generic,
            kind: crate::error::PublishErrorKind::PlatformApplicationDisabledError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output =
                    crate::error::platform_application_disabled_error::Builder::default();
                output = crate::xml_deser::platform_application_disabled_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::PublishError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::PublishError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_publish_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::PublishOutput, crate::error::PublishError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::publish_output::Builder::default();
        output = crate::xml_deser::deser_operation_publish(response.body().as_ref(), output)
            .map_err(crate::error::PublishError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_remove_permission_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::RemovePermissionOutput, crate::error::RemovePermissionError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::RemovePermissionError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::RemovePermissionError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::RemovePermissionError {
            meta: generic,
            kind: crate::error::RemovePermissionErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RemovePermissionError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::RemovePermissionError {
            meta: generic,
            kind: crate::error::RemovePermissionErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::RemovePermissionError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::RemovePermissionError {
            meta: generic,
            kind: crate::error::RemovePermissionErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::RemovePermissionError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::RemovePermissionError {
            meta: generic,
            kind: crate::error::RemovePermissionErrorKind::NotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                output = crate::xml_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::RemovePermissionError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::RemovePermissionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_remove_permission_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::RemovePermissionOutput, crate::error::RemovePermissionError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::remove_permission_output::Builder::default();
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_set_endpoint_attributes_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::SetEndpointAttributesOutput, crate::error::SetEndpointAttributesError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::SetEndpointAttributesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::SetEndpointAttributesError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::SetEndpointAttributesError {
            meta: generic,
            kind: crate::error::SetEndpointAttributesErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::SetEndpointAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::SetEndpointAttributesError {
            meta: generic,
            kind: crate::error::SetEndpointAttributesErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::SetEndpointAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::SetEndpointAttributesError {
            meta: generic,
            kind: crate::error::SetEndpointAttributesErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::SetEndpointAttributesError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::SetEndpointAttributesError {
            meta: generic,
            kind: crate::error::SetEndpointAttributesErrorKind::NotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                output = crate::xml_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::SetEndpointAttributesError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::SetEndpointAttributesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_set_endpoint_attributes_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::SetEndpointAttributesOutput, crate::error::SetEndpointAttributesError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::set_endpoint_attributes_output::Builder::default();
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_set_platform_application_attributes_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::SetPlatformApplicationAttributesOutput,
    crate::error::SetPlatformApplicationAttributesError,
> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::SetPlatformApplicationAttributesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::SetPlatformApplicationAttributesError::unhandled(generic))
        }
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::SetPlatformApplicationAttributesError {
            meta: generic,
            kind: crate::error::SetPlatformApplicationAttributesErrorKind::AuthorizationErrorError(
                {
                    let _ = response;
                    #[allow(unused_mut)]
                    let mut output = crate::error::authorization_error_error::Builder::default();
                    output = crate::xml_deser::authorization_error_exception(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::SetPlatformApplicationAttributesError::unhandled)?;
                    output.build()
                },
            ),
        },
        "InternalErrorException" => crate::error::SetPlatformApplicationAttributesError {
            meta: generic,
            kind: crate::error::SetPlatformApplicationAttributesErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::SetPlatformApplicationAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::SetPlatformApplicationAttributesError {
            meta: generic,
            kind: crate::error::SetPlatformApplicationAttributesErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::SetPlatformApplicationAttributesError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::SetPlatformApplicationAttributesError {
            meta: generic,
            kind: crate::error::SetPlatformApplicationAttributesErrorKind::NotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                output = crate::xml_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::SetPlatformApplicationAttributesError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::SetPlatformApplicationAttributesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_set_platform_application_attributes_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::SetPlatformApplicationAttributesOutput,
    crate::error::SetPlatformApplicationAttributesError,
> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output =
            crate::output::set_platform_application_attributes_output::Builder::default();
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_set_sms_attributes_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::SetSMSAttributesOutput, crate::error::SetSMSAttributesError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::SetSMSAttributesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::SetSMSAttributesError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::SetSMSAttributesError {
            meta: generic,
            kind: crate::error::SetSMSAttributesErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::SetSMSAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::SetSMSAttributesError {
            meta: generic,
            kind: crate::error::SetSMSAttributesErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::SetSMSAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::SetSMSAttributesError {
            meta: generic,
            kind: crate::error::SetSMSAttributesErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::SetSMSAttributesError::unhandled)?;
                output.build()
            }),
        },
        "ThrottledException" => crate::error::SetSMSAttributesError {
            meta: generic,
            kind: crate::error::SetSMSAttributesErrorKind::ThrottledError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::throttled_error::Builder::default();
                output = crate::xml_deser::throttled_exception(response.body().as_ref(), output)
                    .map_err(crate::error::SetSMSAttributesError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::SetSMSAttributesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_set_sms_attributes_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::SetSMSAttributesOutput, crate::error::SetSMSAttributesError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::set_sms_attributes_output::Builder::default();
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_set_subscription_attributes_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::SetSubscriptionAttributesOutput,
    crate::error::SetSubscriptionAttributesError,
> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::SetSubscriptionAttributesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::SetSubscriptionAttributesError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::SetSubscriptionAttributesError {
            meta: generic,
            kind: crate::error::SetSubscriptionAttributesErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::SetSubscriptionAttributesError::unhandled)?;
                output.build()
            }),
        },
        "FilterPolicyLimitExceededException" => crate::error::SetSubscriptionAttributesError {
            meta: generic,
            kind: crate::error::SetSubscriptionAttributesErrorKind::FilterPolicyLimitExceededError(
                {
                    let _ = response;
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::filter_policy_limit_exceeded_error::Builder::default();
                    output = crate::xml_deser::filter_policy_limit_exceeded_exception(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::SetSubscriptionAttributesError::unhandled)?;
                    output.build()
                },
            ),
        },
        "InternalErrorException" => crate::error::SetSubscriptionAttributesError {
            meta: generic,
            kind: crate::error::SetSubscriptionAttributesErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::SetSubscriptionAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::SetSubscriptionAttributesError {
            meta: generic,
            kind: crate::error::SetSubscriptionAttributesErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::SetSubscriptionAttributesError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::SetSubscriptionAttributesError {
            meta: generic,
            kind: crate::error::SetSubscriptionAttributesErrorKind::NotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                output = crate::xml_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::SetSubscriptionAttributesError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::SetSubscriptionAttributesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_set_subscription_attributes_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::SetSubscriptionAttributesOutput,
    crate::error::SetSubscriptionAttributesError,
> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::set_subscription_attributes_output::Builder::default();
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_set_topic_attributes_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::SetTopicAttributesOutput, crate::error::SetTopicAttributesError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::SetTopicAttributesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::SetTopicAttributesError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::SetTopicAttributesError {
            meta: generic,
            kind: crate::error::SetTopicAttributesErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::SetTopicAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::SetTopicAttributesError {
            meta: generic,
            kind: crate::error::SetTopicAttributesErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::SetTopicAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::SetTopicAttributesError {
            meta: generic,
            kind: crate::error::SetTopicAttributesErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::SetTopicAttributesError::unhandled)?;
                output.build()
            }),
        },
        "InvalidSecurityException" => crate::error::SetTopicAttributesError {
            meta: generic,
            kind: crate::error::SetTopicAttributesErrorKind::InvalidSecurityError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_security_error::Builder::default();
                output =
                    crate::xml_deser::invalid_security_exception(response.body().as_ref(), output)
                        .map_err(crate::error::SetTopicAttributesError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::SetTopicAttributesError {
            meta: generic,
            kind: crate::error::SetTopicAttributesErrorKind::NotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                output = crate::xml_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::SetTopicAttributesError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::SetTopicAttributesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_set_topic_attributes_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::SetTopicAttributesOutput, crate::error::SetTopicAttributesError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::set_topic_attributes_output::Builder::default();
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_subscribe_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::SubscribeOutput, crate::error::SubscribeError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::SubscribeError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::SubscribeError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::SubscribeError {
            meta: generic,
            kind: crate::error::SubscribeErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::SubscribeError::unhandled)?;
                output.build()
            }),
        },
        "FilterPolicyLimitExceededException" => crate::error::SubscribeError {
            meta: generic,
            kind: crate::error::SubscribeErrorKind::FilterPolicyLimitExceededError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output =
                    crate::error::filter_policy_limit_exceeded_error::Builder::default();
                output = crate::xml_deser::filter_policy_limit_exceeded_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::SubscribeError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::SubscribeError {
            meta: generic,
            kind: crate::error::SubscribeErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::SubscribeError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::SubscribeError {
            meta: generic,
            kind: crate::error::SubscribeErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::SubscribeError::unhandled)?;
                output.build()
            }),
        },
        "InvalidSecurityException" => crate::error::SubscribeError {
            meta: generic,
            kind: crate::error::SubscribeErrorKind::InvalidSecurityError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_security_error::Builder::default();
                output =
                    crate::xml_deser::invalid_security_exception(response.body().as_ref(), output)
                        .map_err(crate::error::SubscribeError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::SubscribeError {
            meta: generic,
            kind: crate::error::SubscribeErrorKind::NotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                output = crate::xml_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::SubscribeError::unhandled)?;
                output.build()
            }),
        },
        "SubscriptionLimitExceededException" => crate::error::SubscribeError {
            meta: generic,
            kind: crate::error::SubscribeErrorKind::SubscriptionLimitExceededError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output =
                    crate::error::subscription_limit_exceeded_error::Builder::default();
                output = crate::xml_deser::subscription_limit_exceeded_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::SubscribeError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::SubscribeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_subscribe_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::SubscribeOutput, crate::error::SubscribeError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::subscribe_output::Builder::default();
        output = crate::xml_deser::deser_operation_subscribe(response.body().as_ref(), output)
            .map_err(crate::error::SubscribeError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_tag_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::TagResourceOutput, crate::error::TagResourceError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::TagResourceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::TagResourceError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::TagResourceError {
            meta: generic,
            kind: crate::error::TagResourceErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::TagResourceError::unhandled)?;
                output.build()
            }),
        },
        "ConcurrentAccessException" => crate::error::TagResourceError {
            meta: generic,
            kind: crate::error::TagResourceErrorKind::ConcurrentAccessError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::concurrent_access_error::Builder::default();
                output =
                    crate::xml_deser::concurrent_access_exception(response.body().as_ref(), output)
                        .map_err(crate::error::TagResourceError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::TagResourceError {
            meta: generic,
            kind: crate::error::TagResourceErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::TagResourceError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::TagResourceError {
            meta: generic,
            kind: crate::error::TagResourceErrorKind::ResourceNotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                output = crate::xml_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::TagResourceError::unhandled)?;
                output.build()
            }),
        },
        "StaleTagException" => crate::error::TagResourceError {
            meta: generic,
            kind: crate::error::TagResourceErrorKind::StaleTagError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::stale_tag_error::Builder::default();
                output = crate::xml_deser::stale_tag_exception(response.body().as_ref(), output)
                    .map_err(crate::error::TagResourceError::unhandled)?;
                output.build()
            }),
        },
        "TagLimitExceededException" => crate::error::TagResourceError {
            meta: generic,
            kind: crate::error::TagResourceErrorKind::TagLimitExceededError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::tag_limit_exceeded_error::Builder::default();
                output = crate::xml_deser::tag_limit_exceeded_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::TagResourceError::unhandled)?;
                output.build()
            }),
        },
        "TagPolicyException" => crate::error::TagResourceError {
            meta: generic,
            kind: crate::error::TagResourceErrorKind::TagPolicyError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::tag_policy_error::Builder::default();
                output = crate::xml_deser::tag_policy_exception(response.body().as_ref(), output)
                    .map_err(crate::error::TagResourceError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::TagResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_tag_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::TagResourceOutput, crate::error::TagResourceError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::tag_resource_output::Builder::default();
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_unsubscribe_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::UnsubscribeOutput, crate::error::UnsubscribeError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::UnsubscribeError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UnsubscribeError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::UnsubscribeError {
            meta: generic,
            kind: crate::error::UnsubscribeErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UnsubscribeError::unhandled)?;
                output.build()
            }),
        },
        "InternalErrorException" => crate::error::UnsubscribeError {
            meta: generic,
            kind: crate::error::UnsubscribeErrorKind::InternalErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_error::Builder::default();
                output =
                    crate::xml_deser::internal_error_exception(response.body().as_ref(), output)
                        .map_err(crate::error::UnsubscribeError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::UnsubscribeError {
            meta: generic,
            kind: crate::error::UnsubscribeErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::UnsubscribeError::unhandled)?;
                output.build()
            }),
        },
        "InvalidSecurityException" => crate::error::UnsubscribeError {
            meta: generic,
            kind: crate::error::UnsubscribeErrorKind::InvalidSecurityError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_security_error::Builder::default();
                output =
                    crate::xml_deser::invalid_security_exception(response.body().as_ref(), output)
                        .map_err(crate::error::UnsubscribeError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::UnsubscribeError {
            meta: generic,
            kind: crate::error::UnsubscribeErrorKind::NotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                output = crate::xml_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UnsubscribeError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::UnsubscribeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_unsubscribe_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::UnsubscribeOutput, crate::error::UnsubscribeError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::unsubscribe_output::Builder::default();
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_untag_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError> {
    let generic = crate::xml_deser::parse_generic_error(&response)
        .map_err(crate::error::UntagResourceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UntagResourceError::unhandled(generic)),
    };
    Err(match error_code {
        "AuthorizationErrorException" => crate::error::UntagResourceError {
            meta: generic,
            kind: crate::error::UntagResourceErrorKind::AuthorizationErrorError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_error::Builder::default();
                output = crate::xml_deser::authorization_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UntagResourceError::unhandled)?;
                output.build()
            }),
        },
        "ConcurrentAccessException" => crate::error::UntagResourceError {
            meta: generic,
            kind: crate::error::UntagResourceErrorKind::ConcurrentAccessError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::concurrent_access_error::Builder::default();
                output =
                    crate::xml_deser::concurrent_access_exception(response.body().as_ref(), output)
                        .map_err(crate::error::UntagResourceError::unhandled)?;
                output.build()
            }),
        },
        "InvalidParameterException" => crate::error::UntagResourceError {
            meta: generic,
            kind: crate::error::UntagResourceErrorKind::InvalidParameterError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                output =
                    crate::xml_deser::invalid_parameter_exception(response.body().as_ref(), output)
                        .map_err(crate::error::UntagResourceError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::UntagResourceError {
            meta: generic,
            kind: crate::error::UntagResourceErrorKind::ResourceNotFoundError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                output = crate::xml_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UntagResourceError::unhandled)?;
                output.build()
            }),
        },
        "StaleTagException" => crate::error::UntagResourceError {
            meta: generic,
            kind: crate::error::UntagResourceErrorKind::StaleTagError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::stale_tag_error::Builder::default();
                output = crate::xml_deser::stale_tag_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UntagResourceError::unhandled)?;
                output.build()
            }),
        },
        "TagLimitExceededException" => crate::error::UntagResourceError {
            meta: generic,
            kind: crate::error::UntagResourceErrorKind::TagLimitExceededError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::tag_limit_exceeded_error::Builder::default();
                output = crate::xml_deser::tag_limit_exceeded_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UntagResourceError::unhandled)?;
                output.build()
            }),
        },
        "TagPolicyException" => crate::error::UntagResourceError {
            meta: generic,
            kind: crate::error::UntagResourceErrorKind::TagPolicyError({
                let _ = response;
                #[allow(unused_mut)]
                let mut output = crate::error::tag_policy_error::Builder::default();
                output = crate::xml_deser::tag_policy_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UntagResourceError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::UntagResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_untag_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError> {
    Ok({
        let _ = response;
        #[allow(unused_mut)]
        let mut output = crate::output::untag_resource_output::Builder::default();
        output.build()
    })
}
