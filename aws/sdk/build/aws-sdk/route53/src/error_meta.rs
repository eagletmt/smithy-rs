// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    ConcurrentModification(crate::error::ConcurrentModification),
    ConflictingDomainExists(crate::error::ConflictingDomainExists),
    ConflictingTypes(crate::error::ConflictingTypes),
    DNSSECNotFound(crate::error::DNSSECNotFound),
    DelegationSetAlreadyCreated(crate::error::DelegationSetAlreadyCreated),
    DelegationSetAlreadyReusable(crate::error::DelegationSetAlreadyReusable),
    DelegationSetInUse(crate::error::DelegationSetInUse),
    DelegationSetNotAvailable(crate::error::DelegationSetNotAvailable),
    DelegationSetNotReusable(crate::error::DelegationSetNotReusable),
    HealthCheckAlreadyExists(crate::error::HealthCheckAlreadyExists),
    HealthCheckInUse(crate::error::HealthCheckInUse),
    HealthCheckVersionMismatch(crate::error::HealthCheckVersionMismatch),
    HostedZoneAlreadyExists(crate::error::HostedZoneAlreadyExists),
    HostedZoneNotEmpty(crate::error::HostedZoneNotEmpty),
    HostedZoneNotFound(crate::error::HostedZoneNotFound),
    HostedZoneNotPrivate(crate::error::HostedZoneNotPrivate),
    HostedZonePartiallyDelegated(crate::error::HostedZonePartiallyDelegated),
    IncompatibleVersion(crate::error::IncompatibleVersion),
    InsufficientCloudWatchLogsResourcePolicy(
        crate::error::InsufficientCloudWatchLogsResourcePolicy,
    ),
    InvalidArgument(crate::error::InvalidArgument),
    InvalidChangeBatch(crate::error::InvalidChangeBatch),
    InvalidDomainName(crate::error::InvalidDomainName),
    InvalidInput(crate::error::InvalidInput),
    InvalidKMSArn(crate::error::InvalidKMSArn),
    InvalidKeySigningKeyName(crate::error::InvalidKeySigningKeyName),
    InvalidKeySigningKeyStatus(crate::error::InvalidKeySigningKeyStatus),
    InvalidPaginationToken(crate::error::InvalidPaginationToken),
    InvalidSigningStatus(crate::error::InvalidSigningStatus),
    InvalidTrafficPolicyDocument(crate::error::InvalidTrafficPolicyDocument),
    InvalidVPCId(crate::error::InvalidVPCId),
    KeySigningKeyAlreadyExists(crate::error::KeySigningKeyAlreadyExists),
    KeySigningKeyInParentDSRecord(crate::error::KeySigningKeyInParentDSRecord),
    KeySigningKeyInUse(crate::error::KeySigningKeyInUse),
    KeySigningKeyWithActiveStatusNotFound(crate::error::KeySigningKeyWithActiveStatusNotFound),
    LastVPCAssociation(crate::error::LastVPCAssociation),
    LimitsExceeded(crate::error::LimitsExceeded),
    NoSuchChange(crate::error::NoSuchChange),
    NoSuchCloudWatchLogsLogGroup(crate::error::NoSuchCloudWatchLogsLogGroup),
    NoSuchDelegationSet(crate::error::NoSuchDelegationSet),
    NoSuchGeoLocation(crate::error::NoSuchGeoLocation),
    NoSuchHealthCheck(crate::error::NoSuchHealthCheck),
    NoSuchHostedZone(crate::error::NoSuchHostedZone),
    NoSuchKeySigningKey(crate::error::NoSuchKeySigningKey),
    NoSuchQueryLoggingConfig(crate::error::NoSuchQueryLoggingConfig),
    NoSuchTrafficPolicy(crate::error::NoSuchTrafficPolicy),
    NoSuchTrafficPolicyInstance(crate::error::NoSuchTrafficPolicyInstance),
    NotAuthorizedError(crate::error::NotAuthorizedError),
    PriorRequestNotComplete(crate::error::PriorRequestNotComplete),
    PublicZoneVPCAssociation(crate::error::PublicZoneVPCAssociation),
    QueryLoggingConfigAlreadyExists(crate::error::QueryLoggingConfigAlreadyExists),
    ThrottlingError(crate::error::ThrottlingError),
    TooManyHealthChecks(crate::error::TooManyHealthChecks),
    TooManyHostedZones(crate::error::TooManyHostedZones),
    TooManyKeySigningKeys(crate::error::TooManyKeySigningKeys),
    TooManyTrafficPolicies(crate::error::TooManyTrafficPolicies),
    TooManyTrafficPolicyInstances(crate::error::TooManyTrafficPolicyInstances),
    TooManyTrafficPolicyVersionsForCurrentPolicy(
        crate::error::TooManyTrafficPolicyVersionsForCurrentPolicy,
    ),
    TooManyVPCAssociationAuthorizations(crate::error::TooManyVPCAssociationAuthorizations),
    TrafficPolicyAlreadyExists(crate::error::TrafficPolicyAlreadyExists),
    TrafficPolicyInUse(crate::error::TrafficPolicyInUse),
    TrafficPolicyInstanceAlreadyExists(crate::error::TrafficPolicyInstanceAlreadyExists),
    VPCAssociationAuthorizationNotFound(crate::error::VPCAssociationAuthorizationNotFound),
    VPCAssociationNotFound(crate::error::VPCAssociationNotFound),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConcurrentModification(inner) => inner.fmt(f),
            Error::ConflictingDomainExists(inner) => inner.fmt(f),
            Error::ConflictingTypes(inner) => inner.fmt(f),
            Error::DNSSECNotFound(inner) => inner.fmt(f),
            Error::DelegationSetAlreadyCreated(inner) => inner.fmt(f),
            Error::DelegationSetAlreadyReusable(inner) => inner.fmt(f),
            Error::DelegationSetInUse(inner) => inner.fmt(f),
            Error::DelegationSetNotAvailable(inner) => inner.fmt(f),
            Error::DelegationSetNotReusable(inner) => inner.fmt(f),
            Error::HealthCheckAlreadyExists(inner) => inner.fmt(f),
            Error::HealthCheckInUse(inner) => inner.fmt(f),
            Error::HealthCheckVersionMismatch(inner) => inner.fmt(f),
            Error::HostedZoneAlreadyExists(inner) => inner.fmt(f),
            Error::HostedZoneNotEmpty(inner) => inner.fmt(f),
            Error::HostedZoneNotFound(inner) => inner.fmt(f),
            Error::HostedZoneNotPrivate(inner) => inner.fmt(f),
            Error::HostedZonePartiallyDelegated(inner) => inner.fmt(f),
            Error::IncompatibleVersion(inner) => inner.fmt(f),
            Error::InsufficientCloudWatchLogsResourcePolicy(inner) => inner.fmt(f),
            Error::InvalidArgument(inner) => inner.fmt(f),
            Error::InvalidChangeBatch(inner) => inner.fmt(f),
            Error::InvalidDomainName(inner) => inner.fmt(f),
            Error::InvalidInput(inner) => inner.fmt(f),
            Error::InvalidKMSArn(inner) => inner.fmt(f),
            Error::InvalidKeySigningKeyName(inner) => inner.fmt(f),
            Error::InvalidKeySigningKeyStatus(inner) => inner.fmt(f),
            Error::InvalidPaginationToken(inner) => inner.fmt(f),
            Error::InvalidSigningStatus(inner) => inner.fmt(f),
            Error::InvalidTrafficPolicyDocument(inner) => inner.fmt(f),
            Error::InvalidVPCId(inner) => inner.fmt(f),
            Error::KeySigningKeyAlreadyExists(inner) => inner.fmt(f),
            Error::KeySigningKeyInParentDSRecord(inner) => inner.fmt(f),
            Error::KeySigningKeyInUse(inner) => inner.fmt(f),
            Error::KeySigningKeyWithActiveStatusNotFound(inner) => inner.fmt(f),
            Error::LastVPCAssociation(inner) => inner.fmt(f),
            Error::LimitsExceeded(inner) => inner.fmt(f),
            Error::NoSuchChange(inner) => inner.fmt(f),
            Error::NoSuchCloudWatchLogsLogGroup(inner) => inner.fmt(f),
            Error::NoSuchDelegationSet(inner) => inner.fmt(f),
            Error::NoSuchGeoLocation(inner) => inner.fmt(f),
            Error::NoSuchHealthCheck(inner) => inner.fmt(f),
            Error::NoSuchHostedZone(inner) => inner.fmt(f),
            Error::NoSuchKeySigningKey(inner) => inner.fmt(f),
            Error::NoSuchQueryLoggingConfig(inner) => inner.fmt(f),
            Error::NoSuchTrafficPolicy(inner) => inner.fmt(f),
            Error::NoSuchTrafficPolicyInstance(inner) => inner.fmt(f),
            Error::NotAuthorizedError(inner) => inner.fmt(f),
            Error::PriorRequestNotComplete(inner) => inner.fmt(f),
            Error::PublicZoneVPCAssociation(inner) => inner.fmt(f),
            Error::QueryLoggingConfigAlreadyExists(inner) => inner.fmt(f),
            Error::ThrottlingError(inner) => inner.fmt(f),
            Error::TooManyHealthChecks(inner) => inner.fmt(f),
            Error::TooManyHostedZones(inner) => inner.fmt(f),
            Error::TooManyKeySigningKeys(inner) => inner.fmt(f),
            Error::TooManyTrafficPolicies(inner) => inner.fmt(f),
            Error::TooManyTrafficPolicyInstances(inner) => inner.fmt(f),
            Error::TooManyTrafficPolicyVersionsForCurrentPolicy(inner) => inner.fmt(f),
            Error::TooManyVPCAssociationAuthorizations(inner) => inner.fmt(f),
            Error::TrafficPolicyAlreadyExists(inner) => inner.fmt(f),
            Error::TrafficPolicyInUse(inner) => inner.fmt(f),
            Error::TrafficPolicyInstanceAlreadyExists(inner) => inner.fmt(f),
            Error::VPCAssociationAuthorizationNotFound(inner) => inner.fmt(f),
            Error::VPCAssociationNotFound(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ActivateKeySigningKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ActivateKeySigningKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ActivateKeySigningKeyErrorKind::ConcurrentModification(inner) => {
                    Error::ConcurrentModification(inner)
                }
                crate::error::ActivateKeySigningKeyErrorKind::InvalidKeySigningKeyStatus(inner) => {
                    Error::InvalidKeySigningKeyStatus(inner)
                }
                crate::error::ActivateKeySigningKeyErrorKind::InvalidKMSArn(inner) => {
                    Error::InvalidKMSArn(inner)
                }
                crate::error::ActivateKeySigningKeyErrorKind::InvalidSigningStatus(inner) => {
                    Error::InvalidSigningStatus(inner)
                }
                crate::error::ActivateKeySigningKeyErrorKind::NoSuchKeySigningKey(inner) => {
                    Error::NoSuchKeySigningKey(inner)
                }
                crate::error::ActivateKeySigningKeyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssociateVPCWithHostedZoneError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AssociateVPCWithHostedZoneError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssociateVPCWithHostedZoneErrorKind::ConflictingDomainExists(
                    inner,
                ) => Error::ConflictingDomainExists(inner),
                crate::error::AssociateVPCWithHostedZoneErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::AssociateVPCWithHostedZoneErrorKind::InvalidVPCId(inner) => {
                    Error::InvalidVPCId(inner)
                }
                crate::error::AssociateVPCWithHostedZoneErrorKind::LimitsExceeded(inner) => {
                    Error::LimitsExceeded(inner)
                }
                crate::error::AssociateVPCWithHostedZoneErrorKind::NoSuchHostedZone(inner) => {
                    Error::NoSuchHostedZone(inner)
                }
                crate::error::AssociateVPCWithHostedZoneErrorKind::NotAuthorizedError(inner) => {
                    Error::NotAuthorizedError(inner)
                }
                crate::error::AssociateVPCWithHostedZoneErrorKind::PriorRequestNotComplete(
                    inner,
                ) => Error::PriorRequestNotComplete(inner),
                crate::error::AssociateVPCWithHostedZoneErrorKind::PublicZoneVPCAssociation(
                    inner,
                ) => Error::PublicZoneVPCAssociation(inner),
                crate::error::AssociateVPCWithHostedZoneErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ChangeResourceRecordSetsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ChangeResourceRecordSetsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ChangeResourceRecordSetsErrorKind::InvalidChangeBatch(inner) => {
                    Error::InvalidChangeBatch(inner)
                }
                crate::error::ChangeResourceRecordSetsErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ChangeResourceRecordSetsErrorKind::NoSuchHealthCheck(inner) => {
                    Error::NoSuchHealthCheck(inner)
                }
                crate::error::ChangeResourceRecordSetsErrorKind::NoSuchHostedZone(inner) => {
                    Error::NoSuchHostedZone(inner)
                }
                crate::error::ChangeResourceRecordSetsErrorKind::PriorRequestNotComplete(inner) => {
                    Error::PriorRequestNotComplete(inner)
                }
                crate::error::ChangeResourceRecordSetsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ChangeTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ChangeTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ChangeTagsForResourceErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ChangeTagsForResourceErrorKind::NoSuchHealthCheck(inner) => {
                    Error::NoSuchHealthCheck(inner)
                }
                crate::error::ChangeTagsForResourceErrorKind::NoSuchHostedZone(inner) => {
                    Error::NoSuchHostedZone(inner)
                }
                crate::error::ChangeTagsForResourceErrorKind::PriorRequestNotComplete(inner) => {
                    Error::PriorRequestNotComplete(inner)
                }
                crate::error::ChangeTagsForResourceErrorKind::ThrottlingError(inner) => {
                    Error::ThrottlingError(inner)
                }
                crate::error::ChangeTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateHealthCheckError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateHealthCheckError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateHealthCheckErrorKind::HealthCheckAlreadyExists(inner) => {
                    Error::HealthCheckAlreadyExists(inner)
                }
                crate::error::CreateHealthCheckErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::CreateHealthCheckErrorKind::TooManyHealthChecks(inner) => {
                    Error::TooManyHealthChecks(inner)
                }
                crate::error::CreateHealthCheckErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateHostedZoneError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateHostedZoneError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateHostedZoneErrorKind::ConflictingDomainExists(inner) => {
                    Error::ConflictingDomainExists(inner)
                }
                crate::error::CreateHostedZoneErrorKind::DelegationSetNotAvailable(inner) => {
                    Error::DelegationSetNotAvailable(inner)
                }
                crate::error::CreateHostedZoneErrorKind::DelegationSetNotReusable(inner) => {
                    Error::DelegationSetNotReusable(inner)
                }
                crate::error::CreateHostedZoneErrorKind::HostedZoneAlreadyExists(inner) => {
                    Error::HostedZoneAlreadyExists(inner)
                }
                crate::error::CreateHostedZoneErrorKind::InvalidDomainName(inner) => {
                    Error::InvalidDomainName(inner)
                }
                crate::error::CreateHostedZoneErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::CreateHostedZoneErrorKind::InvalidVPCId(inner) => {
                    Error::InvalidVPCId(inner)
                }
                crate::error::CreateHostedZoneErrorKind::NoSuchDelegationSet(inner) => {
                    Error::NoSuchDelegationSet(inner)
                }
                crate::error::CreateHostedZoneErrorKind::TooManyHostedZones(inner) => {
                    Error::TooManyHostedZones(inner)
                }
                crate::error::CreateHostedZoneErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateKeySigningKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateKeySigningKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateKeySigningKeyErrorKind::ConcurrentModification(inner) => {
                    Error::ConcurrentModification(inner)
                }
                crate::error::CreateKeySigningKeyErrorKind::InvalidArgument(inner) => {
                    Error::InvalidArgument(inner)
                }
                crate::error::CreateKeySigningKeyErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::CreateKeySigningKeyErrorKind::InvalidKeySigningKeyName(inner) => {
                    Error::InvalidKeySigningKeyName(inner)
                }
                crate::error::CreateKeySigningKeyErrorKind::InvalidKeySigningKeyStatus(inner) => {
                    Error::InvalidKeySigningKeyStatus(inner)
                }
                crate::error::CreateKeySigningKeyErrorKind::InvalidKMSArn(inner) => {
                    Error::InvalidKMSArn(inner)
                }
                crate::error::CreateKeySigningKeyErrorKind::InvalidSigningStatus(inner) => {
                    Error::InvalidSigningStatus(inner)
                }
                crate::error::CreateKeySigningKeyErrorKind::KeySigningKeyAlreadyExists(inner) => {
                    Error::KeySigningKeyAlreadyExists(inner)
                }
                crate::error::CreateKeySigningKeyErrorKind::NoSuchHostedZone(inner) => {
                    Error::NoSuchHostedZone(inner)
                }
                crate::error::CreateKeySigningKeyErrorKind::TooManyKeySigningKeys(inner) => {
                    Error::TooManyKeySigningKeys(inner)
                }
                crate::error::CreateKeySigningKeyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateQueryLoggingConfigError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateQueryLoggingConfigError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateQueryLoggingConfigErrorKind::ConcurrentModification(inner) => Error::ConcurrentModification(inner),
                crate::error::CreateQueryLoggingConfigErrorKind::InsufficientCloudWatchLogsResourcePolicy(inner) => Error::InsufficientCloudWatchLogsResourcePolicy(inner),
                crate::error::CreateQueryLoggingConfigErrorKind::InvalidInput(inner) => Error::InvalidInput(inner),
                crate::error::CreateQueryLoggingConfigErrorKind::NoSuchCloudWatchLogsLogGroup(inner) => Error::NoSuchCloudWatchLogsLogGroup(inner),
                crate::error::CreateQueryLoggingConfigErrorKind::NoSuchHostedZone(inner) => Error::NoSuchHostedZone(inner),
                crate::error::CreateQueryLoggingConfigErrorKind::QueryLoggingConfigAlreadyExists(inner) => Error::QueryLoggingConfigAlreadyExists(inner),
                crate::error::CreateQueryLoggingConfigErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateReusableDelegationSetError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateReusableDelegationSetError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateReusableDelegationSetErrorKind::DelegationSetAlreadyCreated(inner) => Error::DelegationSetAlreadyCreated(inner),
                crate::error::CreateReusableDelegationSetErrorKind::DelegationSetAlreadyReusable(inner) => Error::DelegationSetAlreadyReusable(inner),
                crate::error::CreateReusableDelegationSetErrorKind::DelegationSetNotAvailable(inner) => Error::DelegationSetNotAvailable(inner),
                crate::error::CreateReusableDelegationSetErrorKind::HostedZoneNotFound(inner) => Error::HostedZoneNotFound(inner),
                crate::error::CreateReusableDelegationSetErrorKind::InvalidArgument(inner) => Error::InvalidArgument(inner),
                crate::error::CreateReusableDelegationSetErrorKind::InvalidInput(inner) => Error::InvalidInput(inner),
                crate::error::CreateReusableDelegationSetErrorKind::LimitsExceeded(inner) => Error::LimitsExceeded(inner),
                crate::error::CreateReusableDelegationSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTrafficPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateTrafficPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTrafficPolicyErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::CreateTrafficPolicyErrorKind::InvalidTrafficPolicyDocument(inner) => {
                    Error::InvalidTrafficPolicyDocument(inner)
                }
                crate::error::CreateTrafficPolicyErrorKind::TooManyTrafficPolicies(inner) => {
                    Error::TooManyTrafficPolicies(inner)
                }
                crate::error::CreateTrafficPolicyErrorKind::TrafficPolicyAlreadyExists(inner) => {
                    Error::TrafficPolicyAlreadyExists(inner)
                }
                crate::error::CreateTrafficPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTrafficPolicyInstanceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateTrafficPolicyInstanceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateTrafficPolicyInstanceErrorKind::InvalidInput(inner) => Error::InvalidInput(inner),
                crate::error::CreateTrafficPolicyInstanceErrorKind::NoSuchHostedZone(inner) => Error::NoSuchHostedZone(inner),
                crate::error::CreateTrafficPolicyInstanceErrorKind::NoSuchTrafficPolicy(inner) => Error::NoSuchTrafficPolicy(inner),
                crate::error::CreateTrafficPolicyInstanceErrorKind::TooManyTrafficPolicyInstances(inner) => Error::TooManyTrafficPolicyInstances(inner),
                crate::error::CreateTrafficPolicyInstanceErrorKind::TrafficPolicyInstanceAlreadyExists(inner) => Error::TrafficPolicyInstanceAlreadyExists(inner),
                crate::error::CreateTrafficPolicyInstanceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTrafficPolicyVersionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateTrafficPolicyVersionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateTrafficPolicyVersionErrorKind::ConcurrentModification(inner) => Error::ConcurrentModification(inner),
                crate::error::CreateTrafficPolicyVersionErrorKind::InvalidInput(inner) => Error::InvalidInput(inner),
                crate::error::CreateTrafficPolicyVersionErrorKind::InvalidTrafficPolicyDocument(inner) => Error::InvalidTrafficPolicyDocument(inner),
                crate::error::CreateTrafficPolicyVersionErrorKind::NoSuchTrafficPolicy(inner) => Error::NoSuchTrafficPolicy(inner),
                crate::error::CreateTrafficPolicyVersionErrorKind::TooManyTrafficPolicyVersionsForCurrentPolicy(inner) => Error::TooManyTrafficPolicyVersionsForCurrentPolicy(inner),
                crate::error::CreateTrafficPolicyVersionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateVPCAssociationAuthorizationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateVPCAssociationAuthorizationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateVPCAssociationAuthorizationErrorKind::ConcurrentModification(inner) => Error::ConcurrentModification(inner),
                crate::error::CreateVPCAssociationAuthorizationErrorKind::InvalidInput(inner) => Error::InvalidInput(inner),
                crate::error::CreateVPCAssociationAuthorizationErrorKind::InvalidVPCId(inner) => Error::InvalidVPCId(inner),
                crate::error::CreateVPCAssociationAuthorizationErrorKind::NoSuchHostedZone(inner) => Error::NoSuchHostedZone(inner),
                crate::error::CreateVPCAssociationAuthorizationErrorKind::TooManyVPCAssociationAuthorizations(inner) => Error::TooManyVPCAssociationAuthorizations(inner),
                crate::error::CreateVPCAssociationAuthorizationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeactivateKeySigningKeyError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeactivateKeySigningKeyError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeactivateKeySigningKeyErrorKind::ConcurrentModification(inner) => {
                    Error::ConcurrentModification(inner)
                }
                crate::error::DeactivateKeySigningKeyErrorKind::InvalidKeySigningKeyStatus(
                    inner,
                ) => Error::InvalidKeySigningKeyStatus(inner),
                crate::error::DeactivateKeySigningKeyErrorKind::InvalidSigningStatus(inner) => {
                    Error::InvalidSigningStatus(inner)
                }
                crate::error::DeactivateKeySigningKeyErrorKind::KeySigningKeyInParentDSRecord(
                    inner,
                ) => Error::KeySigningKeyInParentDSRecord(inner),
                crate::error::DeactivateKeySigningKeyErrorKind::KeySigningKeyInUse(inner) => {
                    Error::KeySigningKeyInUse(inner)
                }
                crate::error::DeactivateKeySigningKeyErrorKind::NoSuchKeySigningKey(inner) => {
                    Error::NoSuchKeySigningKey(inner)
                }
                crate::error::DeactivateKeySigningKeyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteHealthCheckError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteHealthCheckError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteHealthCheckErrorKind::HealthCheckInUse(inner) => {
                    Error::HealthCheckInUse(inner)
                }
                crate::error::DeleteHealthCheckErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::DeleteHealthCheckErrorKind::NoSuchHealthCheck(inner) => {
                    Error::NoSuchHealthCheck(inner)
                }
                crate::error::DeleteHealthCheckErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteHostedZoneError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteHostedZoneError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteHostedZoneErrorKind::HostedZoneNotEmpty(inner) => {
                    Error::HostedZoneNotEmpty(inner)
                }
                crate::error::DeleteHostedZoneErrorKind::InvalidDomainName(inner) => {
                    Error::InvalidDomainName(inner)
                }
                crate::error::DeleteHostedZoneErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::DeleteHostedZoneErrorKind::NoSuchHostedZone(inner) => {
                    Error::NoSuchHostedZone(inner)
                }
                crate::error::DeleteHostedZoneErrorKind::PriorRequestNotComplete(inner) => {
                    Error::PriorRequestNotComplete(inner)
                }
                crate::error::DeleteHostedZoneErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteKeySigningKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteKeySigningKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteKeySigningKeyErrorKind::ConcurrentModification(inner) => {
                    Error::ConcurrentModification(inner)
                }
                crate::error::DeleteKeySigningKeyErrorKind::InvalidKeySigningKeyStatus(inner) => {
                    Error::InvalidKeySigningKeyStatus(inner)
                }
                crate::error::DeleteKeySigningKeyErrorKind::InvalidKMSArn(inner) => {
                    Error::InvalidKMSArn(inner)
                }
                crate::error::DeleteKeySigningKeyErrorKind::InvalidSigningStatus(inner) => {
                    Error::InvalidSigningStatus(inner)
                }
                crate::error::DeleteKeySigningKeyErrorKind::NoSuchKeySigningKey(inner) => {
                    Error::NoSuchKeySigningKey(inner)
                }
                crate::error::DeleteKeySigningKeyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteQueryLoggingConfigError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteQueryLoggingConfigError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteQueryLoggingConfigErrorKind::ConcurrentModification(inner) => {
                    Error::ConcurrentModification(inner)
                }
                crate::error::DeleteQueryLoggingConfigErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::DeleteQueryLoggingConfigErrorKind::NoSuchQueryLoggingConfig(
                    inner,
                ) => Error::NoSuchQueryLoggingConfig(inner),
                crate::error::DeleteQueryLoggingConfigErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteReusableDelegationSetError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteReusableDelegationSetError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteReusableDelegationSetErrorKind::DelegationSetInUse(inner) => {
                    Error::DelegationSetInUse(inner)
                }
                crate::error::DeleteReusableDelegationSetErrorKind::DelegationSetNotReusable(
                    inner,
                ) => Error::DelegationSetNotReusable(inner),
                crate::error::DeleteReusableDelegationSetErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::DeleteReusableDelegationSetErrorKind::NoSuchDelegationSet(inner) => {
                    Error::NoSuchDelegationSet(inner)
                }
                crate::error::DeleteReusableDelegationSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTrafficPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteTrafficPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTrafficPolicyErrorKind::ConcurrentModification(inner) => {
                    Error::ConcurrentModification(inner)
                }
                crate::error::DeleteTrafficPolicyErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::DeleteTrafficPolicyErrorKind::NoSuchTrafficPolicy(inner) => {
                    Error::NoSuchTrafficPolicy(inner)
                }
                crate::error::DeleteTrafficPolicyErrorKind::TrafficPolicyInUse(inner) => {
                    Error::TrafficPolicyInUse(inner)
                }
                crate::error::DeleteTrafficPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTrafficPolicyInstanceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteTrafficPolicyInstanceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTrafficPolicyInstanceErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::DeleteTrafficPolicyInstanceErrorKind::NoSuchTrafficPolicyInstance(
                    inner,
                ) => Error::NoSuchTrafficPolicyInstance(inner),
                crate::error::DeleteTrafficPolicyInstanceErrorKind::PriorRequestNotComplete(
                    inner,
                ) => Error::PriorRequestNotComplete(inner),
                crate::error::DeleteTrafficPolicyInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteVPCAssociationAuthorizationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteVPCAssociationAuthorizationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteVPCAssociationAuthorizationErrorKind::ConcurrentModification(inner) => Error::ConcurrentModification(inner),
                crate::error::DeleteVPCAssociationAuthorizationErrorKind::InvalidInput(inner) => Error::InvalidInput(inner),
                crate::error::DeleteVPCAssociationAuthorizationErrorKind::InvalidVPCId(inner) => Error::InvalidVPCId(inner),
                crate::error::DeleteVPCAssociationAuthorizationErrorKind::NoSuchHostedZone(inner) => Error::NoSuchHostedZone(inner),
                crate::error::DeleteVPCAssociationAuthorizationErrorKind::VPCAssociationAuthorizationNotFound(inner) => Error::VPCAssociationAuthorizationNotFound(inner),
                crate::error::DeleteVPCAssociationAuthorizationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisableHostedZoneDNSSECError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisableHostedZoneDNSSECError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisableHostedZoneDNSSECErrorKind::ConcurrentModification(inner) => {
                    Error::ConcurrentModification(inner)
                }
                crate::error::DisableHostedZoneDNSSECErrorKind::DNSSECNotFound(inner) => {
                    Error::DNSSECNotFound(inner)
                }
                crate::error::DisableHostedZoneDNSSECErrorKind::InvalidArgument(inner) => {
                    Error::InvalidArgument(inner)
                }
                crate::error::DisableHostedZoneDNSSECErrorKind::InvalidKeySigningKeyStatus(
                    inner,
                ) => Error::InvalidKeySigningKeyStatus(inner),
                crate::error::DisableHostedZoneDNSSECErrorKind::InvalidKMSArn(inner) => {
                    Error::InvalidKMSArn(inner)
                }
                crate::error::DisableHostedZoneDNSSECErrorKind::KeySigningKeyInParentDSRecord(
                    inner,
                ) => Error::KeySigningKeyInParentDSRecord(inner),
                crate::error::DisableHostedZoneDNSSECErrorKind::NoSuchHostedZone(inner) => {
                    Error::NoSuchHostedZone(inner)
                }
                crate::error::DisableHostedZoneDNSSECErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisassociateVPCFromHostedZoneError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisassociateVPCFromHostedZoneError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisassociateVPCFromHostedZoneErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::DisassociateVPCFromHostedZoneErrorKind::InvalidVPCId(inner) => {
                    Error::InvalidVPCId(inner)
                }
                crate::error::DisassociateVPCFromHostedZoneErrorKind::LastVPCAssociation(inner) => {
                    Error::LastVPCAssociation(inner)
                }
                crate::error::DisassociateVPCFromHostedZoneErrorKind::NoSuchHostedZone(inner) => {
                    Error::NoSuchHostedZone(inner)
                }
                crate::error::DisassociateVPCFromHostedZoneErrorKind::VPCAssociationNotFound(
                    inner,
                ) => Error::VPCAssociationNotFound(inner),
                crate::error::DisassociateVPCFromHostedZoneErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableHostedZoneDNSSECError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::EnableHostedZoneDNSSECError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::EnableHostedZoneDNSSECErrorKind::ConcurrentModification(inner) => Error::ConcurrentModification(inner),
                crate::error::EnableHostedZoneDNSSECErrorKind::DNSSECNotFound(inner) => Error::DNSSECNotFound(inner),
                crate::error::EnableHostedZoneDNSSECErrorKind::HostedZonePartiallyDelegated(inner) => Error::HostedZonePartiallyDelegated(inner),
                crate::error::EnableHostedZoneDNSSECErrorKind::InvalidArgument(inner) => Error::InvalidArgument(inner),
                crate::error::EnableHostedZoneDNSSECErrorKind::InvalidKeySigningKeyStatus(inner) => Error::InvalidKeySigningKeyStatus(inner),
                crate::error::EnableHostedZoneDNSSECErrorKind::InvalidKMSArn(inner) => Error::InvalidKMSArn(inner),
                crate::error::EnableHostedZoneDNSSECErrorKind::KeySigningKeyWithActiveStatusNotFound(inner) => Error::KeySigningKeyWithActiveStatusNotFound(inner),
                crate::error::EnableHostedZoneDNSSECErrorKind::NoSuchHostedZone(inner) => Error::NoSuchHostedZone(inner),
                crate::error::EnableHostedZoneDNSSECErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetAccountLimitError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetAccountLimitError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetAccountLimitErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::GetAccountLimitErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetChangeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetChangeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetChangeErrorKind::InvalidInput(inner) => Error::InvalidInput(inner),
                crate::error::GetChangeErrorKind::NoSuchChange(inner) => Error::NoSuchChange(inner),
                crate::error::GetChangeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetCheckerIpRangesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetCheckerIpRangesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetCheckerIpRangesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDNSSECError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetDNSSECError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDNSSECErrorKind::InvalidArgument(inner) => {
                    Error::InvalidArgument(inner)
                }
                crate::error::GetDNSSECErrorKind::NoSuchHostedZone(inner) => {
                    Error::NoSuchHostedZone(inner)
                }
                crate::error::GetDNSSECErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetGeoLocationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetGeoLocationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetGeoLocationErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::GetGeoLocationErrorKind::NoSuchGeoLocation(inner) => {
                    Error::NoSuchGeoLocation(inner)
                }
                crate::error::GetGeoLocationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetHealthCheckError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetHealthCheckError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetHealthCheckErrorKind::IncompatibleVersion(inner) => {
                    Error::IncompatibleVersion(inner)
                }
                crate::error::GetHealthCheckErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::GetHealthCheckErrorKind::NoSuchHealthCheck(inner) => {
                    Error::NoSuchHealthCheck(inner)
                }
                crate::error::GetHealthCheckErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetHealthCheckCountError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetHealthCheckCountError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetHealthCheckCountErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetHealthCheckLastFailureReasonError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetHealthCheckLastFailureReasonError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetHealthCheckLastFailureReasonErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::GetHealthCheckLastFailureReasonErrorKind::NoSuchHealthCheck(
                    inner,
                ) => Error::NoSuchHealthCheck(inner),
                crate::error::GetHealthCheckLastFailureReasonErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetHealthCheckStatusError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetHealthCheckStatusError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetHealthCheckStatusErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::GetHealthCheckStatusErrorKind::NoSuchHealthCheck(inner) => {
                    Error::NoSuchHealthCheck(inner)
                }
                crate::error::GetHealthCheckStatusErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetHostedZoneError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetHostedZoneError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetHostedZoneErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::GetHostedZoneErrorKind::NoSuchHostedZone(inner) => {
                    Error::NoSuchHostedZone(inner)
                }
                crate::error::GetHostedZoneErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetHostedZoneCountError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetHostedZoneCountError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetHostedZoneCountErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::GetHostedZoneCountErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetHostedZoneLimitError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetHostedZoneLimitError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetHostedZoneLimitErrorKind::HostedZoneNotPrivate(inner) => {
                    Error::HostedZoneNotPrivate(inner)
                }
                crate::error::GetHostedZoneLimitErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::GetHostedZoneLimitErrorKind::NoSuchHostedZone(inner) => {
                    Error::NoSuchHostedZone(inner)
                }
                crate::error::GetHostedZoneLimitErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetQueryLoggingConfigError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetQueryLoggingConfigError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetQueryLoggingConfigErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::GetQueryLoggingConfigErrorKind::NoSuchQueryLoggingConfig(inner) => {
                    Error::NoSuchQueryLoggingConfig(inner)
                }
                crate::error::GetQueryLoggingConfigErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetReusableDelegationSetError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetReusableDelegationSetError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetReusableDelegationSetErrorKind::DelegationSetNotReusable(
                    inner,
                ) => Error::DelegationSetNotReusable(inner),
                crate::error::GetReusableDelegationSetErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::GetReusableDelegationSetErrorKind::NoSuchDelegationSet(inner) => {
                    Error::NoSuchDelegationSet(inner)
                }
                crate::error::GetReusableDelegationSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetReusableDelegationSetLimitError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetReusableDelegationSetLimitError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetReusableDelegationSetLimitErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::GetReusableDelegationSetLimitErrorKind::NoSuchDelegationSet(
                    inner,
                ) => Error::NoSuchDelegationSet(inner),
                crate::error::GetReusableDelegationSetLimitErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetTrafficPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetTrafficPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTrafficPolicyErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::GetTrafficPolicyErrorKind::NoSuchTrafficPolicy(inner) => {
                    Error::NoSuchTrafficPolicy(inner)
                }
                crate::error::GetTrafficPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetTrafficPolicyInstanceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetTrafficPolicyInstanceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTrafficPolicyInstanceErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::GetTrafficPolicyInstanceErrorKind::NoSuchTrafficPolicyInstance(
                    inner,
                ) => Error::NoSuchTrafficPolicyInstance(inner),
                crate::error::GetTrafficPolicyInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetTrafficPolicyInstanceCountError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetTrafficPolicyInstanceCountError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTrafficPolicyInstanceCountErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListGeoLocationsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListGeoLocationsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListGeoLocationsErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ListGeoLocationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListHealthChecksError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListHealthChecksError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListHealthChecksErrorKind::IncompatibleVersion(inner) => {
                    Error::IncompatibleVersion(inner)
                }
                crate::error::ListHealthChecksErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ListHealthChecksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListHostedZonesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListHostedZonesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListHostedZonesErrorKind::DelegationSetNotReusable(inner) => {
                    Error::DelegationSetNotReusable(inner)
                }
                crate::error::ListHostedZonesErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ListHostedZonesErrorKind::NoSuchDelegationSet(inner) => {
                    Error::NoSuchDelegationSet(inner)
                }
                crate::error::ListHostedZonesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListHostedZonesByNameError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListHostedZonesByNameError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListHostedZonesByNameErrorKind::InvalidDomainName(inner) => {
                    Error::InvalidDomainName(inner)
                }
                crate::error::ListHostedZonesByNameErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ListHostedZonesByNameErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListHostedZonesByVPCError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListHostedZonesByVPCError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListHostedZonesByVPCErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ListHostedZonesByVPCErrorKind::InvalidPaginationToken(inner) => {
                    Error::InvalidPaginationToken(inner)
                }
                crate::error::ListHostedZonesByVPCErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListQueryLoggingConfigsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListQueryLoggingConfigsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListQueryLoggingConfigsErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ListQueryLoggingConfigsErrorKind::InvalidPaginationToken(inner) => {
                    Error::InvalidPaginationToken(inner)
                }
                crate::error::ListQueryLoggingConfigsErrorKind::NoSuchHostedZone(inner) => {
                    Error::NoSuchHostedZone(inner)
                }
                crate::error::ListQueryLoggingConfigsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListResourceRecordSetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListResourceRecordSetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListResourceRecordSetsErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ListResourceRecordSetsErrorKind::NoSuchHostedZone(inner) => {
                    Error::NoSuchHostedZone(inner)
                }
                crate::error::ListResourceRecordSetsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListReusableDelegationSetsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListReusableDelegationSetsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListReusableDelegationSetsErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ListReusableDelegationSetsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ListTagsForResourceErrorKind::NoSuchHealthCheck(inner) => {
                    Error::NoSuchHealthCheck(inner)
                }
                crate::error::ListTagsForResourceErrorKind::NoSuchHostedZone(inner) => {
                    Error::NoSuchHostedZone(inner)
                }
                crate::error::ListTagsForResourceErrorKind::PriorRequestNotComplete(inner) => {
                    Error::PriorRequestNotComplete(inner)
                }
                crate::error::ListTagsForResourceErrorKind::ThrottlingError(inner) => {
                    Error::ThrottlingError(inner)
                }
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourcesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourcesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourcesErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ListTagsForResourcesErrorKind::NoSuchHealthCheck(inner) => {
                    Error::NoSuchHealthCheck(inner)
                }
                crate::error::ListTagsForResourcesErrorKind::NoSuchHostedZone(inner) => {
                    Error::NoSuchHostedZone(inner)
                }
                crate::error::ListTagsForResourcesErrorKind::PriorRequestNotComplete(inner) => {
                    Error::PriorRequestNotComplete(inner)
                }
                crate::error::ListTagsForResourcesErrorKind::ThrottlingError(inner) => {
                    Error::ThrottlingError(inner)
                }
                crate::error::ListTagsForResourcesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTrafficPoliciesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTrafficPoliciesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTrafficPoliciesErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ListTrafficPoliciesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTrafficPolicyInstancesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListTrafficPolicyInstancesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTrafficPolicyInstancesErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ListTrafficPolicyInstancesErrorKind::NoSuchTrafficPolicyInstance(
                    inner,
                ) => Error::NoSuchTrafficPolicyInstance(inner),
                crate::error::ListTrafficPolicyInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTrafficPolicyInstancesByHostedZoneError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::ListTrafficPolicyInstancesByHostedZoneError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListTrafficPolicyInstancesByHostedZoneErrorKind::InvalidInput(inner) => Error::InvalidInput(inner),
                crate::error::ListTrafficPolicyInstancesByHostedZoneErrorKind::NoSuchHostedZone(inner) => Error::NoSuchHostedZone(inner),
                crate::error::ListTrafficPolicyInstancesByHostedZoneErrorKind::NoSuchTrafficPolicyInstance(inner) => Error::NoSuchTrafficPolicyInstance(inner),
                crate::error::ListTrafficPolicyInstancesByHostedZoneErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTrafficPolicyInstancesByPolicyError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListTrafficPolicyInstancesByPolicyError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListTrafficPolicyInstancesByPolicyErrorKind::InvalidInput(inner) => Error::InvalidInput(inner),
                crate::error::ListTrafficPolicyInstancesByPolicyErrorKind::NoSuchTrafficPolicy(inner) => Error::NoSuchTrafficPolicy(inner),
                crate::error::ListTrafficPolicyInstancesByPolicyErrorKind::NoSuchTrafficPolicyInstance(inner) => Error::NoSuchTrafficPolicyInstance(inner),
                crate::error::ListTrafficPolicyInstancesByPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTrafficPolicyVersionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListTrafficPolicyVersionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTrafficPolicyVersionsErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ListTrafficPolicyVersionsErrorKind::NoSuchTrafficPolicy(inner) => {
                    Error::NoSuchTrafficPolicy(inner)
                }
                crate::error::ListTrafficPolicyVersionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListVPCAssociationAuthorizationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListVPCAssociationAuthorizationsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListVPCAssociationAuthorizationsErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::ListVPCAssociationAuthorizationsErrorKind::InvalidPaginationToken(
                    inner,
                ) => Error::InvalidPaginationToken(inner),
                crate::error::ListVPCAssociationAuthorizationsErrorKind::NoSuchHostedZone(
                    inner,
                ) => Error::NoSuchHostedZone(inner),
                crate::error::ListVPCAssociationAuthorizationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TestDNSAnswerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TestDNSAnswerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TestDNSAnswerErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::TestDNSAnswerErrorKind::NoSuchHostedZone(inner) => {
                    Error::NoSuchHostedZone(inner)
                }
                crate::error::TestDNSAnswerErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateHealthCheckError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateHealthCheckError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateHealthCheckErrorKind::HealthCheckVersionMismatch(inner) => {
                    Error::HealthCheckVersionMismatch(inner)
                }
                crate::error::UpdateHealthCheckErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::UpdateHealthCheckErrorKind::NoSuchHealthCheck(inner) => {
                    Error::NoSuchHealthCheck(inner)
                }
                crate::error::UpdateHealthCheckErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateHostedZoneCommentError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateHostedZoneCommentError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateHostedZoneCommentErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::UpdateHostedZoneCommentErrorKind::NoSuchHostedZone(inner) => {
                    Error::NoSuchHostedZone(inner)
                }
                crate::error::UpdateHostedZoneCommentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateTrafficPolicyCommentError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateTrafficPolicyCommentError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateTrafficPolicyCommentErrorKind::ConcurrentModification(
                    inner,
                ) => Error::ConcurrentModification(inner),
                crate::error::UpdateTrafficPolicyCommentErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::UpdateTrafficPolicyCommentErrorKind::NoSuchTrafficPolicy(inner) => {
                    Error::NoSuchTrafficPolicy(inner)
                }
                crate::error::UpdateTrafficPolicyCommentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateTrafficPolicyInstanceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateTrafficPolicyInstanceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateTrafficPolicyInstanceErrorKind::ConflictingTypes(inner) => {
                    Error::ConflictingTypes(inner)
                }
                crate::error::UpdateTrafficPolicyInstanceErrorKind::InvalidInput(inner) => {
                    Error::InvalidInput(inner)
                }
                crate::error::UpdateTrafficPolicyInstanceErrorKind::NoSuchTrafficPolicy(inner) => {
                    Error::NoSuchTrafficPolicy(inner)
                }
                crate::error::UpdateTrafficPolicyInstanceErrorKind::NoSuchTrafficPolicyInstance(
                    inner,
                ) => Error::NoSuchTrafficPolicyInstance(inner),
                crate::error::UpdateTrafficPolicyInstanceErrorKind::PriorRequestNotComplete(
                    inner,
                ) => Error::PriorRequestNotComplete(inner),
                crate::error::UpdateTrafficPolicyInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
