// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    AlreadyExistsError(crate::error::AlreadyExistsError),
    AssociatedInstances(crate::error::AssociatedInstances),
    AssociationAlreadyExists(crate::error::AssociationAlreadyExists),
    AssociationDoesNotExist(crate::error::AssociationDoesNotExist),
    AssociationExecutionDoesNotExist(crate::error::AssociationExecutionDoesNotExist),
    AssociationLimitExceeded(crate::error::AssociationLimitExceeded),
    AssociationVersionLimitExceeded(crate::error::AssociationVersionLimitExceeded),
    AutomationDefinitionNotApprovedError(crate::error::AutomationDefinitionNotApprovedError),
    AutomationDefinitionNotFoundError(crate::error::AutomationDefinitionNotFoundError),
    AutomationDefinitionVersionNotFoundError(
        crate::error::AutomationDefinitionVersionNotFoundError,
    ),
    AutomationExecutionLimitExceededError(crate::error::AutomationExecutionLimitExceededError),
    AutomationExecutionNotFoundError(crate::error::AutomationExecutionNotFoundError),
    AutomationStepNotFoundError(crate::error::AutomationStepNotFoundError),
    ComplianceTypeCountLimitExceededError(crate::error::ComplianceTypeCountLimitExceededError),
    CustomSchemaCountLimitExceededError(crate::error::CustomSchemaCountLimitExceededError),
    DocumentAlreadyExists(crate::error::DocumentAlreadyExists),
    DocumentLimitExceeded(crate::error::DocumentLimitExceeded),
    DocumentPermissionLimit(crate::error::DocumentPermissionLimit),
    DocumentVersionLimitExceeded(crate::error::DocumentVersionLimitExceeded),
    DoesNotExistError(crate::error::DoesNotExistError),
    DuplicateDocumentContent(crate::error::DuplicateDocumentContent),
    DuplicateDocumentVersionName(crate::error::DuplicateDocumentVersionName),
    DuplicateInstanceId(crate::error::DuplicateInstanceId),
    FeatureNotAvailableError(crate::error::FeatureNotAvailableError),
    HierarchyLevelLimitExceededError(crate::error::HierarchyLevelLimitExceededError),
    HierarchyTypeMismatchError(crate::error::HierarchyTypeMismatchError),
    IdempotentParameterMismatch(crate::error::IdempotentParameterMismatch),
    IncompatiblePolicyError(crate::error::IncompatiblePolicyError),
    InternalServerError(crate::error::InternalServerError),
    InvalidActivation(crate::error::InvalidActivation),
    InvalidActivationId(crate::error::InvalidActivationId),
    InvalidAggregatorError(crate::error::InvalidAggregatorError),
    InvalidAllowedPatternError(crate::error::InvalidAllowedPatternError),
    InvalidAssociation(crate::error::InvalidAssociation),
    InvalidAssociationVersion(crate::error::InvalidAssociationVersion),
    InvalidAutomationExecutionParametersError(
        crate::error::InvalidAutomationExecutionParametersError,
    ),
    InvalidAutomationSignalError(crate::error::InvalidAutomationSignalError),
    InvalidAutomationStatusUpdateError(crate::error::InvalidAutomationStatusUpdateError),
    InvalidCommandId(crate::error::InvalidCommandId),
    InvalidDeleteInventoryParametersError(crate::error::InvalidDeleteInventoryParametersError),
    InvalidDeletionIdError(crate::error::InvalidDeletionIdError),
    InvalidDocument(crate::error::InvalidDocument),
    InvalidDocumentContent(crate::error::InvalidDocumentContent),
    InvalidDocumentOperation(crate::error::InvalidDocumentOperation),
    InvalidDocumentSchemaVersion(crate::error::InvalidDocumentSchemaVersion),
    InvalidDocumentType(crate::error::InvalidDocumentType),
    InvalidDocumentVersion(crate::error::InvalidDocumentVersion),
    InvalidFilter(crate::error::InvalidFilter),
    InvalidFilterKey(crate::error::InvalidFilterKey),
    InvalidFilterOption(crate::error::InvalidFilterOption),
    InvalidFilterValue(crate::error::InvalidFilterValue),
    InvalidInstanceId(crate::error::InvalidInstanceId),
    InvalidInstanceInformationFilterValue(crate::error::InvalidInstanceInformationFilterValue),
    InvalidInventoryGroupError(crate::error::InvalidInventoryGroupError),
    InvalidInventoryItemContextError(crate::error::InvalidInventoryItemContextError),
    InvalidInventoryRequestError(crate::error::InvalidInventoryRequestError),
    InvalidItemContentError(crate::error::InvalidItemContentError),
    InvalidKeyId(crate::error::InvalidKeyId),
    InvalidNextToken(crate::error::InvalidNextToken),
    InvalidNotificationConfig(crate::error::InvalidNotificationConfig),
    InvalidOptionError(crate::error::InvalidOptionError),
    InvalidOutputFolder(crate::error::InvalidOutputFolder),
    InvalidOutputLocation(crate::error::InvalidOutputLocation),
    InvalidParameters(crate::error::InvalidParameters),
    InvalidPermissionType(crate::error::InvalidPermissionType),
    InvalidPluginName(crate::error::InvalidPluginName),
    InvalidPolicyAttributeError(crate::error::InvalidPolicyAttributeError),
    InvalidPolicyTypeError(crate::error::InvalidPolicyTypeError),
    InvalidResourceId(crate::error::InvalidResourceId),
    InvalidResourceType(crate::error::InvalidResourceType),
    InvalidResultAttributeError(crate::error::InvalidResultAttributeError),
    InvalidRole(crate::error::InvalidRole),
    InvalidSchedule(crate::error::InvalidSchedule),
    InvalidTarget(crate::error::InvalidTarget),
    InvalidTypeNameError(crate::error::InvalidTypeNameError),
    InvalidUpdate(crate::error::InvalidUpdate),
    InvocationDoesNotExist(crate::error::InvocationDoesNotExist),
    ItemContentMismatchError(crate::error::ItemContentMismatchError),
    ItemSizeLimitExceededError(crate::error::ItemSizeLimitExceededError),
    MaxDocumentSizeExceeded(crate::error::MaxDocumentSizeExceeded),
    OpsItemAlreadyExistsError(crate::error::OpsItemAlreadyExistsError),
    OpsItemInvalidParameterError(crate::error::OpsItemInvalidParameterError),
    OpsItemLimitExceededError(crate::error::OpsItemLimitExceededError),
    OpsItemNotFoundError(crate::error::OpsItemNotFoundError),
    OpsItemRelatedItemAlreadyExistsError(crate::error::OpsItemRelatedItemAlreadyExistsError),
    OpsItemRelatedItemAssociationNotFoundError(
        crate::error::OpsItemRelatedItemAssociationNotFoundError,
    ),
    OpsMetadataAlreadyExistsError(crate::error::OpsMetadataAlreadyExistsError),
    OpsMetadataInvalidArgumentError(crate::error::OpsMetadataInvalidArgumentError),
    OpsMetadataKeyLimitExceededError(crate::error::OpsMetadataKeyLimitExceededError),
    OpsMetadataLimitExceededError(crate::error::OpsMetadataLimitExceededError),
    OpsMetadataNotFoundError(crate::error::OpsMetadataNotFoundError),
    OpsMetadataTooManyUpdatesError(crate::error::OpsMetadataTooManyUpdatesError),
    ParameterAlreadyExists(crate::error::ParameterAlreadyExists),
    ParameterLimitExceeded(crate::error::ParameterLimitExceeded),
    ParameterMaxVersionLimitExceeded(crate::error::ParameterMaxVersionLimitExceeded),
    ParameterNotFound(crate::error::ParameterNotFound),
    ParameterPatternMismatchError(crate::error::ParameterPatternMismatchError),
    ParameterVersionLabelLimitExceeded(crate::error::ParameterVersionLabelLimitExceeded),
    ParameterVersionNotFound(crate::error::ParameterVersionNotFound),
    PoliciesLimitExceededError(crate::error::PoliciesLimitExceededError),
    ResourceDataSyncAlreadyExistsError(crate::error::ResourceDataSyncAlreadyExistsError),
    ResourceDataSyncConflictError(crate::error::ResourceDataSyncConflictError),
    ResourceDataSyncCountExceededError(crate::error::ResourceDataSyncCountExceededError),
    ResourceDataSyncInvalidConfigurationError(
        crate::error::ResourceDataSyncInvalidConfigurationError,
    ),
    ResourceDataSyncNotFoundError(crate::error::ResourceDataSyncNotFoundError),
    ResourceInUseError(crate::error::ResourceInUseError),
    ResourceLimitExceededError(crate::error::ResourceLimitExceededError),
    ServiceSettingNotFound(crate::error::ServiceSettingNotFound),
    StatusUnchanged(crate::error::StatusUnchanged),
    SubTypeCountLimitExceededError(crate::error::SubTypeCountLimitExceededError),
    TargetInUseError(crate::error::TargetInUseError),
    TargetNotConnected(crate::error::TargetNotConnected),
    TooManyTagsError(crate::error::TooManyTagsError),
    TooManyUpdates(crate::error::TooManyUpdates),
    TotalSizeLimitExceededError(crate::error::TotalSizeLimitExceededError),
    UnsupportedCalendarError(crate::error::UnsupportedCalendarError),
    UnsupportedFeatureRequiredError(crate::error::UnsupportedFeatureRequiredError),
    UnsupportedInventoryItemContextError(crate::error::UnsupportedInventoryItemContextError),
    UnsupportedInventorySchemaVersionError(crate::error::UnsupportedInventorySchemaVersionError),
    UnsupportedOperatingSystem(crate::error::UnsupportedOperatingSystem),
    UnsupportedParameterType(crate::error::UnsupportedParameterType),
    UnsupportedPlatformType(crate::error::UnsupportedPlatformType),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AlreadyExistsError(inner) => inner.fmt(f),
            Error::AssociatedInstances(inner) => inner.fmt(f),
            Error::AssociationAlreadyExists(inner) => inner.fmt(f),
            Error::AssociationDoesNotExist(inner) => inner.fmt(f),
            Error::AssociationExecutionDoesNotExist(inner) => inner.fmt(f),
            Error::AssociationLimitExceeded(inner) => inner.fmt(f),
            Error::AssociationVersionLimitExceeded(inner) => inner.fmt(f),
            Error::AutomationDefinitionNotApprovedError(inner) => inner.fmt(f),
            Error::AutomationDefinitionNotFoundError(inner) => inner.fmt(f),
            Error::AutomationDefinitionVersionNotFoundError(inner) => inner.fmt(f),
            Error::AutomationExecutionLimitExceededError(inner) => inner.fmt(f),
            Error::AutomationExecutionNotFoundError(inner) => inner.fmt(f),
            Error::AutomationStepNotFoundError(inner) => inner.fmt(f),
            Error::ComplianceTypeCountLimitExceededError(inner) => inner.fmt(f),
            Error::CustomSchemaCountLimitExceededError(inner) => inner.fmt(f),
            Error::DocumentAlreadyExists(inner) => inner.fmt(f),
            Error::DocumentLimitExceeded(inner) => inner.fmt(f),
            Error::DocumentPermissionLimit(inner) => inner.fmt(f),
            Error::DocumentVersionLimitExceeded(inner) => inner.fmt(f),
            Error::DoesNotExistError(inner) => inner.fmt(f),
            Error::DuplicateDocumentContent(inner) => inner.fmt(f),
            Error::DuplicateDocumentVersionName(inner) => inner.fmt(f),
            Error::DuplicateInstanceId(inner) => inner.fmt(f),
            Error::FeatureNotAvailableError(inner) => inner.fmt(f),
            Error::HierarchyLevelLimitExceededError(inner) => inner.fmt(f),
            Error::HierarchyTypeMismatchError(inner) => inner.fmt(f),
            Error::IdempotentParameterMismatch(inner) => inner.fmt(f),
            Error::IncompatiblePolicyError(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::InvalidActivation(inner) => inner.fmt(f),
            Error::InvalidActivationId(inner) => inner.fmt(f),
            Error::InvalidAggregatorError(inner) => inner.fmt(f),
            Error::InvalidAllowedPatternError(inner) => inner.fmt(f),
            Error::InvalidAssociation(inner) => inner.fmt(f),
            Error::InvalidAssociationVersion(inner) => inner.fmt(f),
            Error::InvalidAutomationExecutionParametersError(inner) => inner.fmt(f),
            Error::InvalidAutomationSignalError(inner) => inner.fmt(f),
            Error::InvalidAutomationStatusUpdateError(inner) => inner.fmt(f),
            Error::InvalidCommandId(inner) => inner.fmt(f),
            Error::InvalidDeleteInventoryParametersError(inner) => inner.fmt(f),
            Error::InvalidDeletionIdError(inner) => inner.fmt(f),
            Error::InvalidDocument(inner) => inner.fmt(f),
            Error::InvalidDocumentContent(inner) => inner.fmt(f),
            Error::InvalidDocumentOperation(inner) => inner.fmt(f),
            Error::InvalidDocumentSchemaVersion(inner) => inner.fmt(f),
            Error::InvalidDocumentType(inner) => inner.fmt(f),
            Error::InvalidDocumentVersion(inner) => inner.fmt(f),
            Error::InvalidFilter(inner) => inner.fmt(f),
            Error::InvalidFilterKey(inner) => inner.fmt(f),
            Error::InvalidFilterOption(inner) => inner.fmt(f),
            Error::InvalidFilterValue(inner) => inner.fmt(f),
            Error::InvalidInstanceId(inner) => inner.fmt(f),
            Error::InvalidInstanceInformationFilterValue(inner) => inner.fmt(f),
            Error::InvalidInventoryGroupError(inner) => inner.fmt(f),
            Error::InvalidInventoryItemContextError(inner) => inner.fmt(f),
            Error::InvalidInventoryRequestError(inner) => inner.fmt(f),
            Error::InvalidItemContentError(inner) => inner.fmt(f),
            Error::InvalidKeyId(inner) => inner.fmt(f),
            Error::InvalidNextToken(inner) => inner.fmt(f),
            Error::InvalidNotificationConfig(inner) => inner.fmt(f),
            Error::InvalidOptionError(inner) => inner.fmt(f),
            Error::InvalidOutputFolder(inner) => inner.fmt(f),
            Error::InvalidOutputLocation(inner) => inner.fmt(f),
            Error::InvalidParameters(inner) => inner.fmt(f),
            Error::InvalidPermissionType(inner) => inner.fmt(f),
            Error::InvalidPluginName(inner) => inner.fmt(f),
            Error::InvalidPolicyAttributeError(inner) => inner.fmt(f),
            Error::InvalidPolicyTypeError(inner) => inner.fmt(f),
            Error::InvalidResourceId(inner) => inner.fmt(f),
            Error::InvalidResourceType(inner) => inner.fmt(f),
            Error::InvalidResultAttributeError(inner) => inner.fmt(f),
            Error::InvalidRole(inner) => inner.fmt(f),
            Error::InvalidSchedule(inner) => inner.fmt(f),
            Error::InvalidTarget(inner) => inner.fmt(f),
            Error::InvalidTypeNameError(inner) => inner.fmt(f),
            Error::InvalidUpdate(inner) => inner.fmt(f),
            Error::InvocationDoesNotExist(inner) => inner.fmt(f),
            Error::ItemContentMismatchError(inner) => inner.fmt(f),
            Error::ItemSizeLimitExceededError(inner) => inner.fmt(f),
            Error::MaxDocumentSizeExceeded(inner) => inner.fmt(f),
            Error::OpsItemAlreadyExistsError(inner) => inner.fmt(f),
            Error::OpsItemInvalidParameterError(inner) => inner.fmt(f),
            Error::OpsItemLimitExceededError(inner) => inner.fmt(f),
            Error::OpsItemNotFoundError(inner) => inner.fmt(f),
            Error::OpsItemRelatedItemAlreadyExistsError(inner) => inner.fmt(f),
            Error::OpsItemRelatedItemAssociationNotFoundError(inner) => inner.fmt(f),
            Error::OpsMetadataAlreadyExistsError(inner) => inner.fmt(f),
            Error::OpsMetadataInvalidArgumentError(inner) => inner.fmt(f),
            Error::OpsMetadataKeyLimitExceededError(inner) => inner.fmt(f),
            Error::OpsMetadataLimitExceededError(inner) => inner.fmt(f),
            Error::OpsMetadataNotFoundError(inner) => inner.fmt(f),
            Error::OpsMetadataTooManyUpdatesError(inner) => inner.fmt(f),
            Error::ParameterAlreadyExists(inner) => inner.fmt(f),
            Error::ParameterLimitExceeded(inner) => inner.fmt(f),
            Error::ParameterMaxVersionLimitExceeded(inner) => inner.fmt(f),
            Error::ParameterNotFound(inner) => inner.fmt(f),
            Error::ParameterPatternMismatchError(inner) => inner.fmt(f),
            Error::ParameterVersionLabelLimitExceeded(inner) => inner.fmt(f),
            Error::ParameterVersionNotFound(inner) => inner.fmt(f),
            Error::PoliciesLimitExceededError(inner) => inner.fmt(f),
            Error::ResourceDataSyncAlreadyExistsError(inner) => inner.fmt(f),
            Error::ResourceDataSyncConflictError(inner) => inner.fmt(f),
            Error::ResourceDataSyncCountExceededError(inner) => inner.fmt(f),
            Error::ResourceDataSyncInvalidConfigurationError(inner) => inner.fmt(f),
            Error::ResourceDataSyncNotFoundError(inner) => inner.fmt(f),
            Error::ResourceInUseError(inner) => inner.fmt(f),
            Error::ResourceLimitExceededError(inner) => inner.fmt(f),
            Error::ServiceSettingNotFound(inner) => inner.fmt(f),
            Error::StatusUnchanged(inner) => inner.fmt(f),
            Error::SubTypeCountLimitExceededError(inner) => inner.fmt(f),
            Error::TargetInUseError(inner) => inner.fmt(f),
            Error::TargetNotConnected(inner) => inner.fmt(f),
            Error::TooManyTagsError(inner) => inner.fmt(f),
            Error::TooManyUpdates(inner) => inner.fmt(f),
            Error::TotalSizeLimitExceededError(inner) => inner.fmt(f),
            Error::UnsupportedCalendarError(inner) => inner.fmt(f),
            Error::UnsupportedFeatureRequiredError(inner) => inner.fmt(f),
            Error::UnsupportedInventoryItemContextError(inner) => inner.fmt(f),
            Error::UnsupportedInventorySchemaVersionError(inner) => inner.fmt(f),
            Error::UnsupportedOperatingSystem(inner) => inner.fmt(f),
            Error::UnsupportedParameterType(inner) => inner.fmt(f),
            Error::UnsupportedPlatformType(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AddTagsToResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AddTagsToResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AddTagsToResourceErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::AddTagsToResourceErrorKind::InvalidResourceId(inner) => {
                    Error::InvalidResourceId(inner)
                }
                crate::error::AddTagsToResourceErrorKind::InvalidResourceType(inner) => {
                    Error::InvalidResourceType(inner)
                }
                crate::error::AddTagsToResourceErrorKind::TooManyTagsError(inner) => {
                    Error::TooManyTagsError(inner)
                }
                crate::error::AddTagsToResourceErrorKind::TooManyUpdates(inner) => {
                    Error::TooManyUpdates(inner)
                }
                crate::error::AddTagsToResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssociateOpsItemRelatedItemError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AssociateOpsItemRelatedItemError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::AssociateOpsItemRelatedItemErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::AssociateOpsItemRelatedItemErrorKind::OpsItemInvalidParameterError(inner) => Error::OpsItemInvalidParameterError(inner),
                crate::error::AssociateOpsItemRelatedItemErrorKind::OpsItemLimitExceededError(inner) => Error::OpsItemLimitExceededError(inner),
                crate::error::AssociateOpsItemRelatedItemErrorKind::OpsItemNotFoundError(inner) => Error::OpsItemNotFoundError(inner),
                crate::error::AssociateOpsItemRelatedItemErrorKind::OpsItemRelatedItemAlreadyExistsError(inner) => Error::OpsItemRelatedItemAlreadyExistsError(inner),
                crate::error::AssociateOpsItemRelatedItemErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelCommandError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CancelCommandError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelCommandErrorKind::DuplicateInstanceId(inner) => {
                    Error::DuplicateInstanceId(inner)
                }
                crate::error::CancelCommandErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CancelCommandErrorKind::InvalidCommandId(inner) => {
                    Error::InvalidCommandId(inner)
                }
                crate::error::CancelCommandErrorKind::InvalidInstanceId(inner) => {
                    Error::InvalidInstanceId(inner)
                }
                crate::error::CancelCommandErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelMaintenanceWindowExecutionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CancelMaintenanceWindowExecutionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelMaintenanceWindowExecutionErrorKind::DoesNotExistError(
                    inner,
                ) => Error::DoesNotExistError(inner),
                crate::error::CancelMaintenanceWindowExecutionErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::CancelMaintenanceWindowExecutionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateActivationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateActivationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateActivationErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreateActivationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateAssociationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateAssociationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateAssociationErrorKind::AssociationAlreadyExists(inner) => {
                    Error::AssociationAlreadyExists(inner)
                }
                crate::error::CreateAssociationErrorKind::AssociationLimitExceeded(inner) => {
                    Error::AssociationLimitExceeded(inner)
                }
                crate::error::CreateAssociationErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreateAssociationErrorKind::InvalidDocument(inner) => {
                    Error::InvalidDocument(inner)
                }
                crate::error::CreateAssociationErrorKind::InvalidDocumentVersion(inner) => {
                    Error::InvalidDocumentVersion(inner)
                }
                crate::error::CreateAssociationErrorKind::InvalidInstanceId(inner) => {
                    Error::InvalidInstanceId(inner)
                }
                crate::error::CreateAssociationErrorKind::InvalidOutputLocation(inner) => {
                    Error::InvalidOutputLocation(inner)
                }
                crate::error::CreateAssociationErrorKind::InvalidParameters(inner) => {
                    Error::InvalidParameters(inner)
                }
                crate::error::CreateAssociationErrorKind::InvalidSchedule(inner) => {
                    Error::InvalidSchedule(inner)
                }
                crate::error::CreateAssociationErrorKind::InvalidTarget(inner) => {
                    Error::InvalidTarget(inner)
                }
                crate::error::CreateAssociationErrorKind::UnsupportedPlatformType(inner) => {
                    Error::UnsupportedPlatformType(inner)
                }
                crate::error::CreateAssociationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateAssociationBatchError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateAssociationBatchError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateAssociationBatchErrorKind::AssociationLimitExceeded(inner) => {
                    Error::AssociationLimitExceeded(inner)
                }
                crate::error::CreateAssociationBatchErrorKind::DuplicateInstanceId(inner) => {
                    Error::DuplicateInstanceId(inner)
                }
                crate::error::CreateAssociationBatchErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreateAssociationBatchErrorKind::InvalidDocument(inner) => {
                    Error::InvalidDocument(inner)
                }
                crate::error::CreateAssociationBatchErrorKind::InvalidDocumentVersion(inner) => {
                    Error::InvalidDocumentVersion(inner)
                }
                crate::error::CreateAssociationBatchErrorKind::InvalidInstanceId(inner) => {
                    Error::InvalidInstanceId(inner)
                }
                crate::error::CreateAssociationBatchErrorKind::InvalidOutputLocation(inner) => {
                    Error::InvalidOutputLocation(inner)
                }
                crate::error::CreateAssociationBatchErrorKind::InvalidParameters(inner) => {
                    Error::InvalidParameters(inner)
                }
                crate::error::CreateAssociationBatchErrorKind::InvalidSchedule(inner) => {
                    Error::InvalidSchedule(inner)
                }
                crate::error::CreateAssociationBatchErrorKind::InvalidTarget(inner) => {
                    Error::InvalidTarget(inner)
                }
                crate::error::CreateAssociationBatchErrorKind::UnsupportedPlatformType(inner) => {
                    Error::UnsupportedPlatformType(inner)
                }
                crate::error::CreateAssociationBatchErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDocumentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateDocumentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDocumentErrorKind::DocumentAlreadyExists(inner) => {
                    Error::DocumentAlreadyExists(inner)
                }
                crate::error::CreateDocumentErrorKind::DocumentLimitExceeded(inner) => {
                    Error::DocumentLimitExceeded(inner)
                }
                crate::error::CreateDocumentErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreateDocumentErrorKind::InvalidDocumentContent(inner) => {
                    Error::InvalidDocumentContent(inner)
                }
                crate::error::CreateDocumentErrorKind::InvalidDocumentSchemaVersion(inner) => {
                    Error::InvalidDocumentSchemaVersion(inner)
                }
                crate::error::CreateDocumentErrorKind::MaxDocumentSizeExceeded(inner) => {
                    Error::MaxDocumentSizeExceeded(inner)
                }
                crate::error::CreateDocumentErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateMaintenanceWindowError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateMaintenanceWindowError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateMaintenanceWindowErrorKind::IdempotentParameterMismatch(
                    inner,
                ) => Error::IdempotentParameterMismatch(inner),
                crate::error::CreateMaintenanceWindowErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreateMaintenanceWindowErrorKind::ResourceLimitExceededError(
                    inner,
                ) => Error::ResourceLimitExceededError(inner),
                crate::error::CreateMaintenanceWindowErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateOpsItemError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateOpsItemError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateOpsItemErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreateOpsItemErrorKind::OpsItemAlreadyExistsError(inner) => {
                    Error::OpsItemAlreadyExistsError(inner)
                }
                crate::error::CreateOpsItemErrorKind::OpsItemInvalidParameterError(inner) => {
                    Error::OpsItemInvalidParameterError(inner)
                }
                crate::error::CreateOpsItemErrorKind::OpsItemLimitExceededError(inner) => {
                    Error::OpsItemLimitExceededError(inner)
                }
                crate::error::CreateOpsItemErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateOpsMetadataError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateOpsMetadataError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateOpsMetadataErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreateOpsMetadataErrorKind::OpsMetadataAlreadyExistsError(inner) => {
                    Error::OpsMetadataAlreadyExistsError(inner)
                }
                crate::error::CreateOpsMetadataErrorKind::OpsMetadataInvalidArgumentError(
                    inner,
                ) => Error::OpsMetadataInvalidArgumentError(inner),
                crate::error::CreateOpsMetadataErrorKind::OpsMetadataLimitExceededError(inner) => {
                    Error::OpsMetadataLimitExceededError(inner)
                }
                crate::error::CreateOpsMetadataErrorKind::OpsMetadataTooManyUpdatesError(inner) => {
                    Error::OpsMetadataTooManyUpdatesError(inner)
                }
                crate::error::CreateOpsMetadataErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreatePatchBaselineError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreatePatchBaselineError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreatePatchBaselineErrorKind::IdempotentParameterMismatch(inner) => {
                    Error::IdempotentParameterMismatch(inner)
                }
                crate::error::CreatePatchBaselineErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreatePatchBaselineErrorKind::ResourceLimitExceededError(inner) => {
                    Error::ResourceLimitExceededError(inner)
                }
                crate::error::CreatePatchBaselineErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateResourceDataSyncError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateResourceDataSyncError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateResourceDataSyncErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::CreateResourceDataSyncErrorKind::ResourceDataSyncAlreadyExistsError(inner) => Error::ResourceDataSyncAlreadyExistsError(inner),
                crate::error::CreateResourceDataSyncErrorKind::ResourceDataSyncCountExceededError(inner) => Error::ResourceDataSyncCountExceededError(inner),
                crate::error::CreateResourceDataSyncErrorKind::ResourceDataSyncInvalidConfigurationError(inner) => Error::ResourceDataSyncInvalidConfigurationError(inner),
                crate::error::CreateResourceDataSyncErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteActivationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteActivationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteActivationErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteActivationErrorKind::InvalidActivation(inner) => {
                    Error::InvalidActivation(inner)
                }
                crate::error::DeleteActivationErrorKind::InvalidActivationId(inner) => {
                    Error::InvalidActivationId(inner)
                }
                crate::error::DeleteActivationErrorKind::TooManyUpdates(inner) => {
                    Error::TooManyUpdates(inner)
                }
                crate::error::DeleteActivationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteAssociationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteAssociationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteAssociationErrorKind::AssociationDoesNotExist(inner) => {
                    Error::AssociationDoesNotExist(inner)
                }
                crate::error::DeleteAssociationErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteAssociationErrorKind::InvalidDocument(inner) => {
                    Error::InvalidDocument(inner)
                }
                crate::error::DeleteAssociationErrorKind::InvalidInstanceId(inner) => {
                    Error::InvalidInstanceId(inner)
                }
                crate::error::DeleteAssociationErrorKind::TooManyUpdates(inner) => {
                    Error::TooManyUpdates(inner)
                }
                crate::error::DeleteAssociationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDocumentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteDocumentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteDocumentErrorKind::AssociatedInstances(inner) => {
                    Error::AssociatedInstances(inner)
                }
                crate::error::DeleteDocumentErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteDocumentErrorKind::InvalidDocument(inner) => {
                    Error::InvalidDocument(inner)
                }
                crate::error::DeleteDocumentErrorKind::InvalidDocumentOperation(inner) => {
                    Error::InvalidDocumentOperation(inner)
                }
                crate::error::DeleteDocumentErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteInventoryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteInventoryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteInventoryErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteInventoryErrorKind::InvalidDeleteInventoryParametersError(
                    inner,
                ) => Error::InvalidDeleteInventoryParametersError(inner),
                crate::error::DeleteInventoryErrorKind::InvalidInventoryRequestError(inner) => {
                    Error::InvalidInventoryRequestError(inner)
                }
                crate::error::DeleteInventoryErrorKind::InvalidOptionError(inner) => {
                    Error::InvalidOptionError(inner)
                }
                crate::error::DeleteInventoryErrorKind::InvalidTypeNameError(inner) => {
                    Error::InvalidTypeNameError(inner)
                }
                crate::error::DeleteInventoryErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteMaintenanceWindowError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteMaintenanceWindowError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteMaintenanceWindowErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteMaintenanceWindowErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteOpsMetadataError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteOpsMetadataError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteOpsMetadataErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteOpsMetadataErrorKind::OpsMetadataInvalidArgumentError(
                    inner,
                ) => Error::OpsMetadataInvalidArgumentError(inner),
                crate::error::DeleteOpsMetadataErrorKind::OpsMetadataNotFoundError(inner) => {
                    Error::OpsMetadataNotFoundError(inner)
                }
                crate::error::DeleteOpsMetadataErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteParameterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteParameterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteParameterErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteParameterErrorKind::ParameterNotFound(inner) => {
                    Error::ParameterNotFound(inner)
                }
                crate::error::DeleteParameterErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteParametersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteParametersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteParametersErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteParametersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeletePatchBaselineError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeletePatchBaselineError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeletePatchBaselineErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeletePatchBaselineErrorKind::ResourceInUseError(inner) => {
                    Error::ResourceInUseError(inner)
                }
                crate::error::DeletePatchBaselineErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteResourceDataSyncError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteResourceDataSyncError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteResourceDataSyncErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::DeleteResourceDataSyncErrorKind::ResourceDataSyncInvalidConfigurationError(inner) => Error::ResourceDataSyncInvalidConfigurationError(inner),
                crate::error::DeleteResourceDataSyncErrorKind::ResourceDataSyncNotFoundError(inner) => Error::ResourceDataSyncNotFoundError(inner),
                crate::error::DeleteResourceDataSyncErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeregisterManagedInstanceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeregisterManagedInstanceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeregisterManagedInstanceErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeregisterManagedInstanceErrorKind::InvalidInstanceId(inner) => {
                    Error::InvalidInstanceId(inner)
                }
                crate::error::DeregisterManagedInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeregisterPatchBaselineForPatchGroupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeregisterPatchBaselineForPatchGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeregisterPatchBaselineForPatchGroupErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::DeregisterPatchBaselineForPatchGroupErrorKind::InvalidResourceId(inner) => Error::InvalidResourceId(inner),
                crate::error::DeregisterPatchBaselineForPatchGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeregisterTargetFromMaintenanceWindowError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DeregisterTargetFromMaintenanceWindowError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeregisterTargetFromMaintenanceWindowErrorKind::DoesNotExistError(inner) => Error::DoesNotExistError(inner),
                crate::error::DeregisterTargetFromMaintenanceWindowErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::DeregisterTargetFromMaintenanceWindowErrorKind::TargetInUseError(inner) => Error::TargetInUseError(inner),
                crate::error::DeregisterTargetFromMaintenanceWindowErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeregisterTaskFromMaintenanceWindowError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeregisterTaskFromMaintenanceWindowError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeregisterTaskFromMaintenanceWindowErrorKind::DoesNotExistError(
                    inner,
                ) => Error::DoesNotExistError(inner),
                crate::error::DeregisterTaskFromMaintenanceWindowErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::DeregisterTaskFromMaintenanceWindowErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeActivationsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeActivationsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeActivationsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeActivationsErrorKind::InvalidFilter(inner) => {
                    Error::InvalidFilter(inner)
                }
                crate::error::DescribeActivationsErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribeActivationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAssociationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeAssociationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAssociationErrorKind::AssociationDoesNotExist(inner) => {
                    Error::AssociationDoesNotExist(inner)
                }
                crate::error::DescribeAssociationErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeAssociationErrorKind::InvalidAssociationVersion(inner) => {
                    Error::InvalidAssociationVersion(inner)
                }
                crate::error::DescribeAssociationErrorKind::InvalidDocument(inner) => {
                    Error::InvalidDocument(inner)
                }
                crate::error::DescribeAssociationErrorKind::InvalidInstanceId(inner) => {
                    Error::InvalidInstanceId(inner)
                }
                crate::error::DescribeAssociationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAssociationExecutionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeAssociationExecutionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAssociationExecutionsErrorKind::AssociationDoesNotExist(
                    inner,
                ) => Error::AssociationDoesNotExist(inner),
                crate::error::DescribeAssociationExecutionsErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::DescribeAssociationExecutionsErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribeAssociationExecutionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAssociationExecutionTargetsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeAssociationExecutionTargetsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeAssociationExecutionTargetsErrorKind::AssociationDoesNotExist(inner) => Error::AssociationDoesNotExist(inner),
                crate::error::DescribeAssociationExecutionTargetsErrorKind::AssociationExecutionDoesNotExist(inner) => Error::AssociationExecutionDoesNotExist(inner),
                crate::error::DescribeAssociationExecutionTargetsErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::DescribeAssociationExecutionTargetsErrorKind::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
                crate::error::DescribeAssociationExecutionTargetsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAutomationExecutionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeAutomationExecutionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAutomationExecutionsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeAutomationExecutionsErrorKind::InvalidFilterKey(inner) => {
                    Error::InvalidFilterKey(inner)
                }
                crate::error::DescribeAutomationExecutionsErrorKind::InvalidFilterValue(inner) => {
                    Error::InvalidFilterValue(inner)
                }
                crate::error::DescribeAutomationExecutionsErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribeAutomationExecutionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAutomationStepExecutionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeAutomationStepExecutionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeAutomationStepExecutionsErrorKind::AutomationExecutionNotFoundError(inner) => Error::AutomationExecutionNotFoundError(inner),
                crate::error::DescribeAutomationStepExecutionsErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::DescribeAutomationStepExecutionsErrorKind::InvalidFilterKey(inner) => Error::InvalidFilterKey(inner),
                crate::error::DescribeAutomationStepExecutionsErrorKind::InvalidFilterValue(inner) => Error::InvalidFilterValue(inner),
                crate::error::DescribeAutomationStepExecutionsErrorKind::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
                crate::error::DescribeAutomationStepExecutionsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAvailablePatchesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeAvailablePatchesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAvailablePatchesErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeAvailablePatchesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDocumentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeDocumentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDocumentErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeDocumentErrorKind::InvalidDocument(inner) => {
                    Error::InvalidDocument(inner)
                }
                crate::error::DescribeDocumentErrorKind::InvalidDocumentVersion(inner) => {
                    Error::InvalidDocumentVersion(inner)
                }
                crate::error::DescribeDocumentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDocumentPermissionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeDocumentPermissionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDocumentPermissionErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeDocumentPermissionErrorKind::InvalidDocument(inner) => {
                    Error::InvalidDocument(inner)
                }
                crate::error::DescribeDocumentPermissionErrorKind::InvalidDocumentOperation(
                    inner,
                ) => Error::InvalidDocumentOperation(inner),
                crate::error::DescribeDocumentPermissionErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribeDocumentPermissionErrorKind::InvalidPermissionType(inner) => {
                    Error::InvalidPermissionType(inner)
                }
                crate::error::DescribeDocumentPermissionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEffectiveInstanceAssociationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeEffectiveInstanceAssociationsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeEffectiveInstanceAssociationsErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::DescribeEffectiveInstanceAssociationsErrorKind::InvalidInstanceId(inner) => Error::InvalidInstanceId(inner),
                crate::error::DescribeEffectiveInstanceAssociationsErrorKind::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
                crate::error::DescribeEffectiveInstanceAssociationsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<smithy_http::result::SdkError<crate::error::DescribeEffectivePatchesForPatchBaselineError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeEffectivePatchesForPatchBaselineError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeEffectivePatchesForPatchBaselineErrorKind::DoesNotExistError(inner) => Error::DoesNotExistError(inner),
                crate::error::DescribeEffectivePatchesForPatchBaselineErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::DescribeEffectivePatchesForPatchBaselineErrorKind::InvalidResourceId(inner) => Error::InvalidResourceId(inner),
                crate::error::DescribeEffectivePatchesForPatchBaselineErrorKind::UnsupportedOperatingSystem(inner) => Error::UnsupportedOperatingSystem(inner),
                crate::error::DescribeEffectivePatchesForPatchBaselineErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeInstanceAssociationsStatusError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeInstanceAssociationsStatusError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeInstanceAssociationsStatusErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::DescribeInstanceAssociationsStatusErrorKind::InvalidInstanceId(
                    inner,
                ) => Error::InvalidInstanceId(inner),
                crate::error::DescribeInstanceAssociationsStatusErrorKind::InvalidNextToken(
                    inner,
                ) => Error::InvalidNextToken(inner),
                crate::error::DescribeInstanceAssociationsStatusErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeInstanceInformationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeInstanceInformationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeInstanceInformationErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::DescribeInstanceInformationErrorKind::InvalidFilterKey(inner) => Error::InvalidFilterKey(inner),
                crate::error::DescribeInstanceInformationErrorKind::InvalidInstanceId(inner) => Error::InvalidInstanceId(inner),
                crate::error::DescribeInstanceInformationErrorKind::InvalidInstanceInformationFilterValue(inner) => Error::InvalidInstanceInformationFilterValue(inner),
                crate::error::DescribeInstanceInformationErrorKind::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
                crate::error::DescribeInstanceInformationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeInstancePatchesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeInstancePatchesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeInstancePatchesErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeInstancePatchesErrorKind::InvalidFilter(inner) => {
                    Error::InvalidFilter(inner)
                }
                crate::error::DescribeInstancePatchesErrorKind::InvalidInstanceId(inner) => {
                    Error::InvalidInstanceId(inner)
                }
                crate::error::DescribeInstancePatchesErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribeInstancePatchesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeInstancePatchStatesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeInstancePatchStatesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeInstancePatchStatesErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeInstancePatchStatesErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribeInstancePatchStatesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<smithy_http::result::SdkError<crate::error::DescribeInstancePatchStatesForPatchGroupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeInstancePatchStatesForPatchGroupError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeInstancePatchStatesForPatchGroupErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::DescribeInstancePatchStatesForPatchGroupErrorKind::InvalidFilter(inner) => Error::InvalidFilter(inner),
                crate::error::DescribeInstancePatchStatesForPatchGroupErrorKind::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
                crate::error::DescribeInstancePatchStatesForPatchGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeInventoryDeletionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeInventoryDeletionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeInventoryDeletionsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeInventoryDeletionsErrorKind::InvalidDeletionIdError(
                    inner,
                ) => Error::InvalidDeletionIdError(inner),
                crate::error::DescribeInventoryDeletionsErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribeInventoryDeletionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeMaintenanceWindowExecutionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeMaintenanceWindowExecutionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeMaintenanceWindowExecutionsErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::DescribeMaintenanceWindowExecutionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::DescribeMaintenanceWindowExecutionTaskInvocationsError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeMaintenanceWindowExecutionTaskInvocationsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeMaintenanceWindowExecutionTaskInvocationsErrorKind::DoesNotExistError(inner) => Error::DoesNotExistError(inner),
                crate::error::DescribeMaintenanceWindowExecutionTaskInvocationsErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::DescribeMaintenanceWindowExecutionTaskInvocationsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeMaintenanceWindowExecutionTasksError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeMaintenanceWindowExecutionTasksError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeMaintenanceWindowExecutionTasksErrorKind::DoesNotExistError(inner) => Error::DoesNotExistError(inner),
                crate::error::DescribeMaintenanceWindowExecutionTasksErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::DescribeMaintenanceWindowExecutionTasksErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeMaintenanceWindowsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeMaintenanceWindowsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeMaintenanceWindowsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeMaintenanceWindowsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeMaintenanceWindowScheduleError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeMaintenanceWindowScheduleError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeMaintenanceWindowScheduleErrorKind::DoesNotExistError(
                    inner,
                ) => Error::DoesNotExistError(inner),
                crate::error::DescribeMaintenanceWindowScheduleErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::DescribeMaintenanceWindowScheduleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeMaintenanceWindowsForTargetError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeMaintenanceWindowsForTargetError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeMaintenanceWindowsForTargetErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::DescribeMaintenanceWindowsForTargetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeMaintenanceWindowTargetsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeMaintenanceWindowTargetsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeMaintenanceWindowTargetsErrorKind::DoesNotExistError(
                    inner,
                ) => Error::DoesNotExistError(inner),
                crate::error::DescribeMaintenanceWindowTargetsErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::DescribeMaintenanceWindowTargetsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeMaintenanceWindowTasksError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeMaintenanceWindowTasksError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeMaintenanceWindowTasksErrorKind::DoesNotExistError(inner) => {
                    Error::DoesNotExistError(inner)
                }
                crate::error::DescribeMaintenanceWindowTasksErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::DescribeMaintenanceWindowTasksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeOpsItemsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeOpsItemsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeOpsItemsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeOpsItemsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeParametersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeParametersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeParametersErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeParametersErrorKind::InvalidFilterKey(inner) => {
                    Error::InvalidFilterKey(inner)
                }
                crate::error::DescribeParametersErrorKind::InvalidFilterOption(inner) => {
                    Error::InvalidFilterOption(inner)
                }
                crate::error::DescribeParametersErrorKind::InvalidFilterValue(inner) => {
                    Error::InvalidFilterValue(inner)
                }
                crate::error::DescribeParametersErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribeParametersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribePatchBaselinesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribePatchBaselinesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribePatchBaselinesErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribePatchBaselinesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribePatchGroupsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribePatchGroupsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribePatchGroupsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribePatchGroupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribePatchGroupStateError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribePatchGroupStateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribePatchGroupStateErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribePatchGroupStateErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribePatchGroupStateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribePatchPropertiesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribePatchPropertiesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribePatchPropertiesErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribePatchPropertiesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeSessionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeSessionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeSessionsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeSessionsErrorKind::InvalidFilterKey(inner) => {
                    Error::InvalidFilterKey(inner)
                }
                crate::error::DescribeSessionsErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribeSessionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisassociateOpsItemRelatedItemError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisassociateOpsItemRelatedItemError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DisassociateOpsItemRelatedItemErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::DisassociateOpsItemRelatedItemErrorKind::OpsItemInvalidParameterError(inner) => Error::OpsItemInvalidParameterError(inner),
                crate::error::DisassociateOpsItemRelatedItemErrorKind::OpsItemNotFoundError(inner) => Error::OpsItemNotFoundError(inner),
                crate::error::DisassociateOpsItemRelatedItemErrorKind::OpsItemRelatedItemAssociationNotFoundError(inner) => Error::OpsItemRelatedItemAssociationNotFoundError(inner),
                crate::error::DisassociateOpsItemRelatedItemErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetAutomationExecutionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetAutomationExecutionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetAutomationExecutionErrorKind::AutomationExecutionNotFoundError(
                    inner,
                ) => Error::AutomationExecutionNotFoundError(inner),
                crate::error::GetAutomationExecutionErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetAutomationExecutionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetCalendarStateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetCalendarStateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetCalendarStateErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetCalendarStateErrorKind::InvalidDocument(inner) => {
                    Error::InvalidDocument(inner)
                }
                crate::error::GetCalendarStateErrorKind::InvalidDocumentType(inner) => {
                    Error::InvalidDocumentType(inner)
                }
                crate::error::GetCalendarStateErrorKind::UnsupportedCalendarError(inner) => {
                    Error::UnsupportedCalendarError(inner)
                }
                crate::error::GetCalendarStateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetCommandInvocationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetCommandInvocationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetCommandInvocationErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetCommandInvocationErrorKind::InvalidCommandId(inner) => {
                    Error::InvalidCommandId(inner)
                }
                crate::error::GetCommandInvocationErrorKind::InvalidInstanceId(inner) => {
                    Error::InvalidInstanceId(inner)
                }
                crate::error::GetCommandInvocationErrorKind::InvalidPluginName(inner) => {
                    Error::InvalidPluginName(inner)
                }
                crate::error::GetCommandInvocationErrorKind::InvocationDoesNotExist(inner) => {
                    Error::InvocationDoesNotExist(inner)
                }
                crate::error::GetCommandInvocationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetConnectionStatusError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetConnectionStatusError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetConnectionStatusErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetConnectionStatusErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDefaultPatchBaselineError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetDefaultPatchBaselineError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDefaultPatchBaselineErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetDefaultPatchBaselineErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDeployablePatchSnapshotForInstanceError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::GetDeployablePatchSnapshotForInstanceError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::GetDeployablePatchSnapshotForInstanceErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::GetDeployablePatchSnapshotForInstanceErrorKind::UnsupportedFeatureRequiredError(inner) => Error::UnsupportedFeatureRequiredError(inner),
                crate::error::GetDeployablePatchSnapshotForInstanceErrorKind::UnsupportedOperatingSystem(inner) => Error::UnsupportedOperatingSystem(inner),
                crate::error::GetDeployablePatchSnapshotForInstanceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDocumentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetDocumentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDocumentErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetDocumentErrorKind::InvalidDocument(inner) => {
                    Error::InvalidDocument(inner)
                }
                crate::error::GetDocumentErrorKind::InvalidDocumentVersion(inner) => {
                    Error::InvalidDocumentVersion(inner)
                }
                crate::error::GetDocumentErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetInventoryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetInventoryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetInventoryErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetInventoryErrorKind::InvalidAggregatorError(inner) => {
                    Error::InvalidAggregatorError(inner)
                }
                crate::error::GetInventoryErrorKind::InvalidFilter(inner) => {
                    Error::InvalidFilter(inner)
                }
                crate::error::GetInventoryErrorKind::InvalidInventoryGroupError(inner) => {
                    Error::InvalidInventoryGroupError(inner)
                }
                crate::error::GetInventoryErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::GetInventoryErrorKind::InvalidResultAttributeError(inner) => {
                    Error::InvalidResultAttributeError(inner)
                }
                crate::error::GetInventoryErrorKind::InvalidTypeNameError(inner) => {
                    Error::InvalidTypeNameError(inner)
                }
                crate::error::GetInventoryErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetInventorySchemaError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetInventorySchemaError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetInventorySchemaErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetInventorySchemaErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::GetInventorySchemaErrorKind::InvalidTypeNameError(inner) => {
                    Error::InvalidTypeNameError(inner)
                }
                crate::error::GetInventorySchemaErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetMaintenanceWindowError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetMaintenanceWindowError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetMaintenanceWindowErrorKind::DoesNotExistError(inner) => {
                    Error::DoesNotExistError(inner)
                }
                crate::error::GetMaintenanceWindowErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetMaintenanceWindowErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetMaintenanceWindowExecutionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetMaintenanceWindowExecutionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetMaintenanceWindowExecutionErrorKind::DoesNotExistError(inner) => {
                    Error::DoesNotExistError(inner)
                }
                crate::error::GetMaintenanceWindowExecutionErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::GetMaintenanceWindowExecutionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetMaintenanceWindowExecutionTaskError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetMaintenanceWindowExecutionTaskError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetMaintenanceWindowExecutionTaskErrorKind::DoesNotExistError(
                    inner,
                ) => Error::DoesNotExistError(inner),
                crate::error::GetMaintenanceWindowExecutionTaskErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::GetMaintenanceWindowExecutionTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::GetMaintenanceWindowExecutionTaskInvocationError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::GetMaintenanceWindowExecutionTaskInvocationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::GetMaintenanceWindowExecutionTaskInvocationErrorKind::DoesNotExistError(inner) => Error::DoesNotExistError(inner),
                crate::error::GetMaintenanceWindowExecutionTaskInvocationErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::GetMaintenanceWindowExecutionTaskInvocationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetMaintenanceWindowTaskError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetMaintenanceWindowTaskError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetMaintenanceWindowTaskErrorKind::DoesNotExistError(inner) => {
                    Error::DoesNotExistError(inner)
                }
                crate::error::GetMaintenanceWindowTaskErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetMaintenanceWindowTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetOpsItemError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetOpsItemError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetOpsItemErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetOpsItemErrorKind::OpsItemNotFoundError(inner) => {
                    Error::OpsItemNotFoundError(inner)
                }
                crate::error::GetOpsItemErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetOpsMetadataError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetOpsMetadataError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetOpsMetadataErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetOpsMetadataErrorKind::OpsMetadataInvalidArgumentError(inner) => {
                    Error::OpsMetadataInvalidArgumentError(inner)
                }
                crate::error::GetOpsMetadataErrorKind::OpsMetadataNotFoundError(inner) => {
                    Error::OpsMetadataNotFoundError(inner)
                }
                crate::error::GetOpsMetadataErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetOpsSummaryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetOpsSummaryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetOpsSummaryErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetOpsSummaryErrorKind::InvalidAggregatorError(inner) => {
                    Error::InvalidAggregatorError(inner)
                }
                crate::error::GetOpsSummaryErrorKind::InvalidFilter(inner) => {
                    Error::InvalidFilter(inner)
                }
                crate::error::GetOpsSummaryErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::GetOpsSummaryErrorKind::InvalidTypeNameError(inner) => {
                    Error::InvalidTypeNameError(inner)
                }
                crate::error::GetOpsSummaryErrorKind::ResourceDataSyncNotFoundError(inner) => {
                    Error::ResourceDataSyncNotFoundError(inner)
                }
                crate::error::GetOpsSummaryErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetParameterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetParameterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetParameterErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetParameterErrorKind::InvalidKeyId(inner) => {
                    Error::InvalidKeyId(inner)
                }
                crate::error::GetParameterErrorKind::ParameterNotFound(inner) => {
                    Error::ParameterNotFound(inner)
                }
                crate::error::GetParameterErrorKind::ParameterVersionNotFound(inner) => {
                    Error::ParameterVersionNotFound(inner)
                }
                crate::error::GetParameterErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetParameterHistoryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetParameterHistoryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetParameterHistoryErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetParameterHistoryErrorKind::InvalidKeyId(inner) => {
                    Error::InvalidKeyId(inner)
                }
                crate::error::GetParameterHistoryErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::GetParameterHistoryErrorKind::ParameterNotFound(inner) => {
                    Error::ParameterNotFound(inner)
                }
                crate::error::GetParameterHistoryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetParametersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetParametersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetParametersErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetParametersErrorKind::InvalidKeyId(inner) => {
                    Error::InvalidKeyId(inner)
                }
                crate::error::GetParametersErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetParametersByPathError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetParametersByPathError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetParametersByPathErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetParametersByPathErrorKind::InvalidFilterKey(inner) => {
                    Error::InvalidFilterKey(inner)
                }
                crate::error::GetParametersByPathErrorKind::InvalidFilterOption(inner) => {
                    Error::InvalidFilterOption(inner)
                }
                crate::error::GetParametersByPathErrorKind::InvalidFilterValue(inner) => {
                    Error::InvalidFilterValue(inner)
                }
                crate::error::GetParametersByPathErrorKind::InvalidKeyId(inner) => {
                    Error::InvalidKeyId(inner)
                }
                crate::error::GetParametersByPathErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::GetParametersByPathErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetPatchBaselineError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetPatchBaselineError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetPatchBaselineErrorKind::DoesNotExistError(inner) => {
                    Error::DoesNotExistError(inner)
                }
                crate::error::GetPatchBaselineErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetPatchBaselineErrorKind::InvalidResourceId(inner) => {
                    Error::InvalidResourceId(inner)
                }
                crate::error::GetPatchBaselineErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetPatchBaselineForPatchGroupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetPatchBaselineForPatchGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetPatchBaselineForPatchGroupErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::GetPatchBaselineForPatchGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetServiceSettingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetServiceSettingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetServiceSettingErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetServiceSettingErrorKind::ServiceSettingNotFound(inner) => {
                    Error::ServiceSettingNotFound(inner)
                }
                crate::error::GetServiceSettingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::LabelParameterVersionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::LabelParameterVersionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::LabelParameterVersionErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::LabelParameterVersionErrorKind::ParameterNotFound(inner) => Error::ParameterNotFound(inner),
                crate::error::LabelParameterVersionErrorKind::ParameterVersionLabelLimitExceeded(inner) => Error::ParameterVersionLabelLimitExceeded(inner),
                crate::error::LabelParameterVersionErrorKind::ParameterVersionNotFound(inner) => Error::ParameterVersionNotFound(inner),
                crate::error::LabelParameterVersionErrorKind::TooManyUpdates(inner) => Error::TooManyUpdates(inner),
                crate::error::LabelParameterVersionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAssociationsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListAssociationsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAssociationsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListAssociationsErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::ListAssociationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAssociationVersionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListAssociationVersionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAssociationVersionsErrorKind::AssociationDoesNotExist(inner) => {
                    Error::AssociationDoesNotExist(inner)
                }
                crate::error::ListAssociationVersionsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListAssociationVersionsErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::ListAssociationVersionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListCommandInvocationsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListCommandInvocationsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListCommandInvocationsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListCommandInvocationsErrorKind::InvalidCommandId(inner) => {
                    Error::InvalidCommandId(inner)
                }
                crate::error::ListCommandInvocationsErrorKind::InvalidFilterKey(inner) => {
                    Error::InvalidFilterKey(inner)
                }
                crate::error::ListCommandInvocationsErrorKind::InvalidInstanceId(inner) => {
                    Error::InvalidInstanceId(inner)
                }
                crate::error::ListCommandInvocationsErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::ListCommandInvocationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListCommandsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListCommandsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListCommandsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListCommandsErrorKind::InvalidCommandId(inner) => {
                    Error::InvalidCommandId(inner)
                }
                crate::error::ListCommandsErrorKind::InvalidFilterKey(inner) => {
                    Error::InvalidFilterKey(inner)
                }
                crate::error::ListCommandsErrorKind::InvalidInstanceId(inner) => {
                    Error::InvalidInstanceId(inner)
                }
                crate::error::ListCommandsErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::ListCommandsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListComplianceItemsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListComplianceItemsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListComplianceItemsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListComplianceItemsErrorKind::InvalidFilter(inner) => {
                    Error::InvalidFilter(inner)
                }
                crate::error::ListComplianceItemsErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::ListComplianceItemsErrorKind::InvalidResourceId(inner) => {
                    Error::InvalidResourceId(inner)
                }
                crate::error::ListComplianceItemsErrorKind::InvalidResourceType(inner) => {
                    Error::InvalidResourceType(inner)
                }
                crate::error::ListComplianceItemsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListComplianceSummariesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListComplianceSummariesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListComplianceSummariesErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListComplianceSummariesErrorKind::InvalidFilter(inner) => {
                    Error::InvalidFilter(inner)
                }
                crate::error::ListComplianceSummariesErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::ListComplianceSummariesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListDocumentMetadataHistoryError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListDocumentMetadataHistoryError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListDocumentMetadataHistoryErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListDocumentMetadataHistoryErrorKind::InvalidDocument(inner) => {
                    Error::InvalidDocument(inner)
                }
                crate::error::ListDocumentMetadataHistoryErrorKind::InvalidDocumentVersion(
                    inner,
                ) => Error::InvalidDocumentVersion(inner),
                crate::error::ListDocumentMetadataHistoryErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::ListDocumentMetadataHistoryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListDocumentsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListDocumentsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListDocumentsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListDocumentsErrorKind::InvalidFilterKey(inner) => {
                    Error::InvalidFilterKey(inner)
                }
                crate::error::ListDocumentsErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::ListDocumentsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListDocumentVersionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListDocumentVersionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListDocumentVersionsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListDocumentVersionsErrorKind::InvalidDocument(inner) => {
                    Error::InvalidDocument(inner)
                }
                crate::error::ListDocumentVersionsErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::ListDocumentVersionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListInventoryEntriesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListInventoryEntriesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListInventoryEntriesErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListInventoryEntriesErrorKind::InvalidFilter(inner) => {
                    Error::InvalidFilter(inner)
                }
                crate::error::ListInventoryEntriesErrorKind::InvalidInstanceId(inner) => {
                    Error::InvalidInstanceId(inner)
                }
                crate::error::ListInventoryEntriesErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::ListInventoryEntriesErrorKind::InvalidTypeNameError(inner) => {
                    Error::InvalidTypeNameError(inner)
                }
                crate::error::ListInventoryEntriesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListOpsItemEventsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListOpsItemEventsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListOpsItemEventsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListOpsItemEventsErrorKind::OpsItemInvalidParameterError(inner) => {
                    Error::OpsItemInvalidParameterError(inner)
                }
                crate::error::ListOpsItemEventsErrorKind::OpsItemLimitExceededError(inner) => {
                    Error::OpsItemLimitExceededError(inner)
                }
                crate::error::ListOpsItemEventsErrorKind::OpsItemNotFoundError(inner) => {
                    Error::OpsItemNotFoundError(inner)
                }
                crate::error::ListOpsItemEventsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListOpsItemRelatedItemsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListOpsItemRelatedItemsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListOpsItemRelatedItemsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListOpsItemRelatedItemsErrorKind::OpsItemInvalidParameterError(
                    inner,
                ) => Error::OpsItemInvalidParameterError(inner),
                crate::error::ListOpsItemRelatedItemsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListOpsMetadataError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListOpsMetadataError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListOpsMetadataErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListOpsMetadataErrorKind::OpsMetadataInvalidArgumentError(inner) => {
                    Error::OpsMetadataInvalidArgumentError(inner)
                }
                crate::error::ListOpsMetadataErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListResourceComplianceSummariesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListResourceComplianceSummariesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListResourceComplianceSummariesErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::ListResourceComplianceSummariesErrorKind::InvalidFilter(inner) => {
                    Error::InvalidFilter(inner)
                }
                crate::error::ListResourceComplianceSummariesErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::ListResourceComplianceSummariesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListResourceDataSyncError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListResourceDataSyncError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListResourceDataSyncErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::ListResourceDataSyncErrorKind::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
                crate::error::ListResourceDataSyncErrorKind::ResourceDataSyncInvalidConfigurationError(inner) => Error::ResourceDataSyncInvalidConfigurationError(inner),
                crate::error::ListResourceDataSyncErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListTagsForResourceErrorKind::InvalidResourceId(inner) => {
                    Error::InvalidResourceId(inner)
                }
                crate::error::ListTagsForResourceErrorKind::InvalidResourceType(inner) => {
                    Error::InvalidResourceType(inner)
                }
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyDocumentPermissionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyDocumentPermissionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyDocumentPermissionErrorKind::DocumentLimitExceeded(inner) => {
                    Error::DocumentLimitExceeded(inner)
                }
                crate::error::ModifyDocumentPermissionErrorKind::DocumentPermissionLimit(inner) => {
                    Error::DocumentPermissionLimit(inner)
                }
                crate::error::ModifyDocumentPermissionErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ModifyDocumentPermissionErrorKind::InvalidDocument(inner) => {
                    Error::InvalidDocument(inner)
                }
                crate::error::ModifyDocumentPermissionErrorKind::InvalidPermissionType(inner) => {
                    Error::InvalidPermissionType(inner)
                }
                crate::error::ModifyDocumentPermissionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutComplianceItemsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutComplianceItemsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::PutComplianceItemsErrorKind::ComplianceTypeCountLimitExceededError(inner) => Error::ComplianceTypeCountLimitExceededError(inner),
                crate::error::PutComplianceItemsErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::PutComplianceItemsErrorKind::InvalidItemContentError(inner) => Error::InvalidItemContentError(inner),
                crate::error::PutComplianceItemsErrorKind::InvalidResourceId(inner) => Error::InvalidResourceId(inner),
                crate::error::PutComplianceItemsErrorKind::InvalidResourceType(inner) => Error::InvalidResourceType(inner),
                crate::error::PutComplianceItemsErrorKind::ItemSizeLimitExceededError(inner) => Error::ItemSizeLimitExceededError(inner),
                crate::error::PutComplianceItemsErrorKind::TotalSizeLimitExceededError(inner) => Error::TotalSizeLimitExceededError(inner),
                crate::error::PutComplianceItemsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutInventoryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutInventoryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutInventoryErrorKind::CustomSchemaCountLimitExceededError(inner) => {
                    Error::CustomSchemaCountLimitExceededError(inner)
                }
                crate::error::PutInventoryErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::PutInventoryErrorKind::InvalidInstanceId(inner) => {
                    Error::InvalidInstanceId(inner)
                }
                crate::error::PutInventoryErrorKind::InvalidInventoryItemContextError(inner) => {
                    Error::InvalidInventoryItemContextError(inner)
                }
                crate::error::PutInventoryErrorKind::InvalidItemContentError(inner) => {
                    Error::InvalidItemContentError(inner)
                }
                crate::error::PutInventoryErrorKind::InvalidTypeNameError(inner) => {
                    Error::InvalidTypeNameError(inner)
                }
                crate::error::PutInventoryErrorKind::ItemContentMismatchError(inner) => {
                    Error::ItemContentMismatchError(inner)
                }
                crate::error::PutInventoryErrorKind::ItemSizeLimitExceededError(inner) => {
                    Error::ItemSizeLimitExceededError(inner)
                }
                crate::error::PutInventoryErrorKind::SubTypeCountLimitExceededError(inner) => {
                    Error::SubTypeCountLimitExceededError(inner)
                }
                crate::error::PutInventoryErrorKind::TotalSizeLimitExceededError(inner) => {
                    Error::TotalSizeLimitExceededError(inner)
                }
                crate::error::PutInventoryErrorKind::UnsupportedInventoryItemContextError(
                    inner,
                ) => Error::UnsupportedInventoryItemContextError(inner),
                crate::error::PutInventoryErrorKind::UnsupportedInventorySchemaVersionError(
                    inner,
                ) => Error::UnsupportedInventorySchemaVersionError(inner),
                crate::error::PutInventoryErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutParameterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutParameterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutParameterErrorKind::HierarchyLevelLimitExceededError(inner) => {
                    Error::HierarchyLevelLimitExceededError(inner)
                }
                crate::error::PutParameterErrorKind::HierarchyTypeMismatchError(inner) => {
                    Error::HierarchyTypeMismatchError(inner)
                }
                crate::error::PutParameterErrorKind::IncompatiblePolicyError(inner) => {
                    Error::IncompatiblePolicyError(inner)
                }
                crate::error::PutParameterErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::PutParameterErrorKind::InvalidAllowedPatternError(inner) => {
                    Error::InvalidAllowedPatternError(inner)
                }
                crate::error::PutParameterErrorKind::InvalidKeyId(inner) => {
                    Error::InvalidKeyId(inner)
                }
                crate::error::PutParameterErrorKind::InvalidPolicyAttributeError(inner) => {
                    Error::InvalidPolicyAttributeError(inner)
                }
                crate::error::PutParameterErrorKind::InvalidPolicyTypeError(inner) => {
                    Error::InvalidPolicyTypeError(inner)
                }
                crate::error::PutParameterErrorKind::ParameterAlreadyExists(inner) => {
                    Error::ParameterAlreadyExists(inner)
                }
                crate::error::PutParameterErrorKind::ParameterLimitExceeded(inner) => {
                    Error::ParameterLimitExceeded(inner)
                }
                crate::error::PutParameterErrorKind::ParameterMaxVersionLimitExceeded(inner) => {
                    Error::ParameterMaxVersionLimitExceeded(inner)
                }
                crate::error::PutParameterErrorKind::ParameterPatternMismatchError(inner) => {
                    Error::ParameterPatternMismatchError(inner)
                }
                crate::error::PutParameterErrorKind::PoliciesLimitExceededError(inner) => {
                    Error::PoliciesLimitExceededError(inner)
                }
                crate::error::PutParameterErrorKind::TooManyUpdates(inner) => {
                    Error::TooManyUpdates(inner)
                }
                crate::error::PutParameterErrorKind::UnsupportedParameterType(inner) => {
                    Error::UnsupportedParameterType(inner)
                }
                crate::error::PutParameterErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterDefaultPatchBaselineError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RegisterDefaultPatchBaselineError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RegisterDefaultPatchBaselineErrorKind::DoesNotExistError(inner) => {
                    Error::DoesNotExistError(inner)
                }
                crate::error::RegisterDefaultPatchBaselineErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::RegisterDefaultPatchBaselineErrorKind::InvalidResourceId(inner) => {
                    Error::InvalidResourceId(inner)
                }
                crate::error::RegisterDefaultPatchBaselineErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterPatchBaselineForPatchGroupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RegisterPatchBaselineForPatchGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RegisterPatchBaselineForPatchGroupErrorKind::AlreadyExistsError(inner) => Error::AlreadyExistsError(inner),
                crate::error::RegisterPatchBaselineForPatchGroupErrorKind::DoesNotExistError(inner) => Error::DoesNotExistError(inner),
                crate::error::RegisterPatchBaselineForPatchGroupErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::RegisterPatchBaselineForPatchGroupErrorKind::InvalidResourceId(inner) => Error::InvalidResourceId(inner),
                crate::error::RegisterPatchBaselineForPatchGroupErrorKind::ResourceLimitExceededError(inner) => Error::ResourceLimitExceededError(inner),
                crate::error::RegisterPatchBaselineForPatchGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterTargetWithMaintenanceWindowError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RegisterTargetWithMaintenanceWindowError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RegisterTargetWithMaintenanceWindowErrorKind::DoesNotExistError(inner) => Error::DoesNotExistError(inner),
                crate::error::RegisterTargetWithMaintenanceWindowErrorKind::IdempotentParameterMismatch(inner) => Error::IdempotentParameterMismatch(inner),
                crate::error::RegisterTargetWithMaintenanceWindowErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::RegisterTargetWithMaintenanceWindowErrorKind::ResourceLimitExceededError(inner) => Error::ResourceLimitExceededError(inner),
                crate::error::RegisterTargetWithMaintenanceWindowErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterTaskWithMaintenanceWindowError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RegisterTaskWithMaintenanceWindowError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RegisterTaskWithMaintenanceWindowErrorKind::DoesNotExistError(inner) => Error::DoesNotExistError(inner),
                crate::error::RegisterTaskWithMaintenanceWindowErrorKind::FeatureNotAvailableError(inner) => Error::FeatureNotAvailableError(inner),
                crate::error::RegisterTaskWithMaintenanceWindowErrorKind::IdempotentParameterMismatch(inner) => Error::IdempotentParameterMismatch(inner),
                crate::error::RegisterTaskWithMaintenanceWindowErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::RegisterTaskWithMaintenanceWindowErrorKind::ResourceLimitExceededError(inner) => Error::ResourceLimitExceededError(inner),
                crate::error::RegisterTaskWithMaintenanceWindowErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RemoveTagsFromResourceErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::RemoveTagsFromResourceErrorKind::InvalidResourceId(inner) => {
                    Error::InvalidResourceId(inner)
                }
                crate::error::RemoveTagsFromResourceErrorKind::InvalidResourceType(inner) => {
                    Error::InvalidResourceType(inner)
                }
                crate::error::RemoveTagsFromResourceErrorKind::TooManyUpdates(inner) => {
                    Error::TooManyUpdates(inner)
                }
                crate::error::RemoveTagsFromResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ResetServiceSettingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ResetServiceSettingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ResetServiceSettingErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ResetServiceSettingErrorKind::ServiceSettingNotFound(inner) => {
                    Error::ServiceSettingNotFound(inner)
                }
                crate::error::ResetServiceSettingErrorKind::TooManyUpdates(inner) => {
                    Error::TooManyUpdates(inner)
                }
                crate::error::ResetServiceSettingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ResumeSessionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ResumeSessionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ResumeSessionErrorKind::DoesNotExistError(inner) => {
                    Error::DoesNotExistError(inner)
                }
                crate::error::ResumeSessionErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ResumeSessionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SendAutomationSignalError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SendAutomationSignalError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SendAutomationSignalErrorKind::AutomationExecutionNotFoundError(
                    inner,
                ) => Error::AutomationExecutionNotFoundError(inner),
                crate::error::SendAutomationSignalErrorKind::AutomationStepNotFoundError(inner) => {
                    Error::AutomationStepNotFoundError(inner)
                }
                crate::error::SendAutomationSignalErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::SendAutomationSignalErrorKind::InvalidAutomationSignalError(
                    inner,
                ) => Error::InvalidAutomationSignalError(inner),
                crate::error::SendAutomationSignalErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SendCommandError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SendCommandError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SendCommandErrorKind::DuplicateInstanceId(inner) => {
                    Error::DuplicateInstanceId(inner)
                }
                crate::error::SendCommandErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::SendCommandErrorKind::InvalidDocument(inner) => {
                    Error::InvalidDocument(inner)
                }
                crate::error::SendCommandErrorKind::InvalidDocumentVersion(inner) => {
                    Error::InvalidDocumentVersion(inner)
                }
                crate::error::SendCommandErrorKind::InvalidInstanceId(inner) => {
                    Error::InvalidInstanceId(inner)
                }
                crate::error::SendCommandErrorKind::InvalidNotificationConfig(inner) => {
                    Error::InvalidNotificationConfig(inner)
                }
                crate::error::SendCommandErrorKind::InvalidOutputFolder(inner) => {
                    Error::InvalidOutputFolder(inner)
                }
                crate::error::SendCommandErrorKind::InvalidParameters(inner) => {
                    Error::InvalidParameters(inner)
                }
                crate::error::SendCommandErrorKind::InvalidRole(inner) => Error::InvalidRole(inner),
                crate::error::SendCommandErrorKind::MaxDocumentSizeExceeded(inner) => {
                    Error::MaxDocumentSizeExceeded(inner)
                }
                crate::error::SendCommandErrorKind::UnsupportedPlatformType(inner) => {
                    Error::UnsupportedPlatformType(inner)
                }
                crate::error::SendCommandErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartAssociationsOnceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartAssociationsOnceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartAssociationsOnceErrorKind::AssociationDoesNotExist(inner) => {
                    Error::AssociationDoesNotExist(inner)
                }
                crate::error::StartAssociationsOnceErrorKind::InvalidAssociation(inner) => {
                    Error::InvalidAssociation(inner)
                }
                crate::error::StartAssociationsOnceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartAutomationExecutionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::StartAutomationExecutionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::StartAutomationExecutionErrorKind::AutomationDefinitionNotFoundError(inner) => Error::AutomationDefinitionNotFoundError(inner),
                crate::error::StartAutomationExecutionErrorKind::AutomationDefinitionVersionNotFoundError(inner) => Error::AutomationDefinitionVersionNotFoundError(inner),
                crate::error::StartAutomationExecutionErrorKind::AutomationExecutionLimitExceededError(inner) => Error::AutomationExecutionLimitExceededError(inner),
                crate::error::StartAutomationExecutionErrorKind::IdempotentParameterMismatch(inner) => Error::IdempotentParameterMismatch(inner),
                crate::error::StartAutomationExecutionErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::StartAutomationExecutionErrorKind::InvalidAutomationExecutionParametersError(inner) => Error::InvalidAutomationExecutionParametersError(inner),
                crate::error::StartAutomationExecutionErrorKind::InvalidTarget(inner) => Error::InvalidTarget(inner),
                crate::error::StartAutomationExecutionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartChangeRequestExecutionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::StartChangeRequestExecutionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::StartChangeRequestExecutionErrorKind::AutomationDefinitionNotApprovedError(inner) => Error::AutomationDefinitionNotApprovedError(inner),
                crate::error::StartChangeRequestExecutionErrorKind::AutomationDefinitionNotFoundError(inner) => Error::AutomationDefinitionNotFoundError(inner),
                crate::error::StartChangeRequestExecutionErrorKind::AutomationDefinitionVersionNotFoundError(inner) => Error::AutomationDefinitionVersionNotFoundError(inner),
                crate::error::StartChangeRequestExecutionErrorKind::AutomationExecutionLimitExceededError(inner) => Error::AutomationExecutionLimitExceededError(inner),
                crate::error::StartChangeRequestExecutionErrorKind::IdempotentParameterMismatch(inner) => Error::IdempotentParameterMismatch(inner),
                crate::error::StartChangeRequestExecutionErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::StartChangeRequestExecutionErrorKind::InvalidAutomationExecutionParametersError(inner) => Error::InvalidAutomationExecutionParametersError(inner),
                crate::error::StartChangeRequestExecutionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartSessionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartSessionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartSessionErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::StartSessionErrorKind::InvalidDocument(inner) => {
                    Error::InvalidDocument(inner)
                }
                crate::error::StartSessionErrorKind::TargetNotConnected(inner) => {
                    Error::TargetNotConnected(inner)
                }
                crate::error::StartSessionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopAutomationExecutionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::StopAutomationExecutionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::StopAutomationExecutionErrorKind::AutomationExecutionNotFoundError(inner) => Error::AutomationExecutionNotFoundError(inner),
                crate::error::StopAutomationExecutionErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::StopAutomationExecutionErrorKind::InvalidAutomationStatusUpdateError(inner) => Error::InvalidAutomationStatusUpdateError(inner),
                crate::error::StopAutomationExecutionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TerminateSessionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TerminateSessionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TerminateSessionErrorKind::DoesNotExistError(inner) => {
                    Error::DoesNotExistError(inner)
                }
                crate::error::TerminateSessionErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::TerminateSessionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UnlabelParameterVersionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UnlabelParameterVersionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UnlabelParameterVersionErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UnlabelParameterVersionErrorKind::ParameterNotFound(inner) => {
                    Error::ParameterNotFound(inner)
                }
                crate::error::UnlabelParameterVersionErrorKind::ParameterVersionNotFound(inner) => {
                    Error::ParameterVersionNotFound(inner)
                }
                crate::error::UnlabelParameterVersionErrorKind::TooManyUpdates(inner) => {
                    Error::TooManyUpdates(inner)
                }
                crate::error::UnlabelParameterVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateAssociationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateAssociationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateAssociationErrorKind::AssociationDoesNotExist(inner) => {
                    Error::AssociationDoesNotExist(inner)
                }
                crate::error::UpdateAssociationErrorKind::AssociationVersionLimitExceeded(
                    inner,
                ) => Error::AssociationVersionLimitExceeded(inner),
                crate::error::UpdateAssociationErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdateAssociationErrorKind::InvalidAssociationVersion(inner) => {
                    Error::InvalidAssociationVersion(inner)
                }
                crate::error::UpdateAssociationErrorKind::InvalidDocument(inner) => {
                    Error::InvalidDocument(inner)
                }
                crate::error::UpdateAssociationErrorKind::InvalidDocumentVersion(inner) => {
                    Error::InvalidDocumentVersion(inner)
                }
                crate::error::UpdateAssociationErrorKind::InvalidOutputLocation(inner) => {
                    Error::InvalidOutputLocation(inner)
                }
                crate::error::UpdateAssociationErrorKind::InvalidParameters(inner) => {
                    Error::InvalidParameters(inner)
                }
                crate::error::UpdateAssociationErrorKind::InvalidSchedule(inner) => {
                    Error::InvalidSchedule(inner)
                }
                crate::error::UpdateAssociationErrorKind::InvalidTarget(inner) => {
                    Error::InvalidTarget(inner)
                }
                crate::error::UpdateAssociationErrorKind::InvalidUpdate(inner) => {
                    Error::InvalidUpdate(inner)
                }
                crate::error::UpdateAssociationErrorKind::TooManyUpdates(inner) => {
                    Error::TooManyUpdates(inner)
                }
                crate::error::UpdateAssociationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateAssociationStatusError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateAssociationStatusError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateAssociationStatusErrorKind::AssociationDoesNotExist(inner) => {
                    Error::AssociationDoesNotExist(inner)
                }
                crate::error::UpdateAssociationStatusErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdateAssociationStatusErrorKind::InvalidDocument(inner) => {
                    Error::InvalidDocument(inner)
                }
                crate::error::UpdateAssociationStatusErrorKind::InvalidInstanceId(inner) => {
                    Error::InvalidInstanceId(inner)
                }
                crate::error::UpdateAssociationStatusErrorKind::StatusUnchanged(inner) => {
                    Error::StatusUnchanged(inner)
                }
                crate::error::UpdateAssociationStatusErrorKind::TooManyUpdates(inner) => {
                    Error::TooManyUpdates(inner)
                }
                crate::error::UpdateAssociationStatusErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateDocumentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateDocumentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateDocumentErrorKind::DocumentVersionLimitExceeded(inner) => {
                    Error::DocumentVersionLimitExceeded(inner)
                }
                crate::error::UpdateDocumentErrorKind::DuplicateDocumentContent(inner) => {
                    Error::DuplicateDocumentContent(inner)
                }
                crate::error::UpdateDocumentErrorKind::DuplicateDocumentVersionName(inner) => {
                    Error::DuplicateDocumentVersionName(inner)
                }
                crate::error::UpdateDocumentErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdateDocumentErrorKind::InvalidDocument(inner) => {
                    Error::InvalidDocument(inner)
                }
                crate::error::UpdateDocumentErrorKind::InvalidDocumentContent(inner) => {
                    Error::InvalidDocumentContent(inner)
                }
                crate::error::UpdateDocumentErrorKind::InvalidDocumentOperation(inner) => {
                    Error::InvalidDocumentOperation(inner)
                }
                crate::error::UpdateDocumentErrorKind::InvalidDocumentSchemaVersion(inner) => {
                    Error::InvalidDocumentSchemaVersion(inner)
                }
                crate::error::UpdateDocumentErrorKind::InvalidDocumentVersion(inner) => {
                    Error::InvalidDocumentVersion(inner)
                }
                crate::error::UpdateDocumentErrorKind::MaxDocumentSizeExceeded(inner) => {
                    Error::MaxDocumentSizeExceeded(inner)
                }
                crate::error::UpdateDocumentErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateDocumentDefaultVersionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateDocumentDefaultVersionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateDocumentDefaultVersionErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::UpdateDocumentDefaultVersionErrorKind::InvalidDocument(inner) => Error::InvalidDocument(inner),
                crate::error::UpdateDocumentDefaultVersionErrorKind::InvalidDocumentSchemaVersion(inner) => Error::InvalidDocumentSchemaVersion(inner),
                crate::error::UpdateDocumentDefaultVersionErrorKind::InvalidDocumentVersion(inner) => Error::InvalidDocumentVersion(inner),
                crate::error::UpdateDocumentDefaultVersionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateDocumentMetadataError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateDocumentMetadataError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateDocumentMetadataErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdateDocumentMetadataErrorKind::InvalidDocument(inner) => {
                    Error::InvalidDocument(inner)
                }
                crate::error::UpdateDocumentMetadataErrorKind::InvalidDocumentOperation(inner) => {
                    Error::InvalidDocumentOperation(inner)
                }
                crate::error::UpdateDocumentMetadataErrorKind::InvalidDocumentVersion(inner) => {
                    Error::InvalidDocumentVersion(inner)
                }
                crate::error::UpdateDocumentMetadataErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateMaintenanceWindowError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateMaintenanceWindowError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateMaintenanceWindowErrorKind::DoesNotExistError(inner) => {
                    Error::DoesNotExistError(inner)
                }
                crate::error::UpdateMaintenanceWindowErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdateMaintenanceWindowErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateMaintenanceWindowTargetError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateMaintenanceWindowTargetError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateMaintenanceWindowTargetErrorKind::DoesNotExistError(inner) => {
                    Error::DoesNotExistError(inner)
                }
                crate::error::UpdateMaintenanceWindowTargetErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::UpdateMaintenanceWindowTargetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateMaintenanceWindowTaskError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateMaintenanceWindowTaskError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateMaintenanceWindowTaskErrorKind::DoesNotExistError(inner) => {
                    Error::DoesNotExistError(inner)
                }
                crate::error::UpdateMaintenanceWindowTaskErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdateMaintenanceWindowTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateManagedInstanceRoleError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateManagedInstanceRoleError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateManagedInstanceRoleErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdateManagedInstanceRoleErrorKind::InvalidInstanceId(inner) => {
                    Error::InvalidInstanceId(inner)
                }
                crate::error::UpdateManagedInstanceRoleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateOpsItemError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateOpsItemError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateOpsItemErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdateOpsItemErrorKind::OpsItemAlreadyExistsError(inner) => {
                    Error::OpsItemAlreadyExistsError(inner)
                }
                crate::error::UpdateOpsItemErrorKind::OpsItemInvalidParameterError(inner) => {
                    Error::OpsItemInvalidParameterError(inner)
                }
                crate::error::UpdateOpsItemErrorKind::OpsItemLimitExceededError(inner) => {
                    Error::OpsItemLimitExceededError(inner)
                }
                crate::error::UpdateOpsItemErrorKind::OpsItemNotFoundError(inner) => {
                    Error::OpsItemNotFoundError(inner)
                }
                crate::error::UpdateOpsItemErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateOpsMetadataError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateOpsMetadataError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateOpsMetadataErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdateOpsMetadataErrorKind::OpsMetadataInvalidArgumentError(
                    inner,
                ) => Error::OpsMetadataInvalidArgumentError(inner),
                crate::error::UpdateOpsMetadataErrorKind::OpsMetadataKeyLimitExceededError(
                    inner,
                ) => Error::OpsMetadataKeyLimitExceededError(inner),
                crate::error::UpdateOpsMetadataErrorKind::OpsMetadataNotFoundError(inner) => {
                    Error::OpsMetadataNotFoundError(inner)
                }
                crate::error::UpdateOpsMetadataErrorKind::OpsMetadataTooManyUpdatesError(inner) => {
                    Error::OpsMetadataTooManyUpdatesError(inner)
                }
                crate::error::UpdateOpsMetadataErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdatePatchBaselineError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdatePatchBaselineError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdatePatchBaselineErrorKind::DoesNotExistError(inner) => {
                    Error::DoesNotExistError(inner)
                }
                crate::error::UpdatePatchBaselineErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdatePatchBaselineErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateResourceDataSyncError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateResourceDataSyncError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateResourceDataSyncErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::UpdateResourceDataSyncErrorKind::ResourceDataSyncConflictError(inner) => Error::ResourceDataSyncConflictError(inner),
                crate::error::UpdateResourceDataSyncErrorKind::ResourceDataSyncInvalidConfigurationError(inner) => Error::ResourceDataSyncInvalidConfigurationError(inner),
                crate::error::UpdateResourceDataSyncErrorKind::ResourceDataSyncNotFoundError(inner) => Error::ResourceDataSyncNotFoundError(inner),
                crate::error::UpdateResourceDataSyncErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateServiceSettingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateServiceSettingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateServiceSettingErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdateServiceSettingErrorKind::ServiceSettingNotFound(inner) => {
                    Error::ServiceSettingNotFound(inner)
                }
                crate::error::UpdateServiceSettingErrorKind::TooManyUpdates(inner) => {
                    Error::TooManyUpdates(inner)
                }
                crate::error::UpdateServiceSettingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
