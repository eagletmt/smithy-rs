// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_add_tags_to_resource_input_body(
    input: &crate::input::AddTagsToResourceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::AddTagsToResourceInputBody {
        resource_type: &input.resource_type,
        resource_id: &input.resource_id,
        tags: &input.tags,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_associate_ops_item_related_item_input_body(
    input: &crate::input::AssociateOpsItemRelatedItemInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::AssociateOpsItemRelatedItemInputBody {
        ops_item_id: &input.ops_item_id,
        association_type: &input.association_type,
        resource_type: &input.resource_type,
        resource_uri: &input.resource_uri,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_cancel_command_input_body(
    input: &crate::input::CancelCommandInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CancelCommandInputBody {
        command_id: &input.command_id,
        instance_ids: &input.instance_ids,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_cancel_maintenance_window_execution_input_body(
    input: &crate::input::CancelMaintenanceWindowExecutionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CancelMaintenanceWindowExecutionInputBody {
        window_execution_id: &input.window_execution_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_activation_input_body(
    input: &crate::input::CreateActivationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateActivationInputBody {
        description: &input.description,
        default_instance_name: &input.default_instance_name,
        iam_role: &input.iam_role,
        registration_limit: &input.registration_limit,
        expiration_date: &input.expiration_date,
        tags: &input.tags,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_association_input_body(
    input: &crate::input::CreateAssociationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateAssociationInputBody {
        name: &input.name,
        document_version: &input.document_version,
        instance_id: &input.instance_id,
        parameters: &input.parameters,
        targets: &input.targets,
        schedule_expression: &input.schedule_expression,
        output_location: &input.output_location,
        association_name: &input.association_name,
        automation_target_parameter_name: &input.automation_target_parameter_name,
        max_errors: &input.max_errors,
        max_concurrency: &input.max_concurrency,
        compliance_severity: &input.compliance_severity,
        sync_compliance: &input.sync_compliance,
        apply_only_at_cron_interval: &input.apply_only_at_cron_interval,
        calendar_names: &input.calendar_names,
        target_locations: &input.target_locations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_association_batch_input_body(
    input: &crate::input::CreateAssociationBatchInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateAssociationBatchInputBody {
        entries: &input.entries,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_document_input_body(
    input: &crate::input::CreateDocumentInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateDocumentInputBody {
        content: &input.content,
        requires: &input.requires,
        attachments: &input.attachments,
        name: &input.name,
        display_name: &input.display_name,
        version_name: &input.version_name,
        document_type: &input.document_type,
        document_format: &input.document_format,
        target_type: &input.target_type,
        tags: &input.tags,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_maintenance_window_input_body(
    input: &crate::input::CreateMaintenanceWindowInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateMaintenanceWindowInputBody {
        name: &input.name,
        description: &input.description,
        start_date: &input.start_date,
        end_date: &input.end_date,
        schedule: &input.schedule,
        schedule_timezone: &input.schedule_timezone,
        schedule_offset: &input.schedule_offset,
        duration: &input.duration,
        cutoff: &input.cutoff,
        allow_unassociated_targets: &input.allow_unassociated_targets,
        client_token: &input.client_token,
        tags: &input.tags,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_ops_item_input_body(
    input: &crate::input::CreateOpsItemInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateOpsItemInputBody {
        description: &input.description,
        ops_item_type: &input.ops_item_type,
        operational_data: &input.operational_data,
        notifications: &input.notifications,
        priority: &input.priority,
        related_ops_items: &input.related_ops_items,
        source: &input.source,
        title: &input.title,
        tags: &input.tags,
        category: &input.category,
        severity: &input.severity,
        actual_start_time: &input.actual_start_time,
        actual_end_time: &input.actual_end_time,
        planned_start_time: &input.planned_start_time,
        planned_end_time: &input.planned_end_time,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_ops_metadata_input_body(
    input: &crate::input::CreateOpsMetadataInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateOpsMetadataInputBody {
        resource_id: &input.resource_id,
        metadata: &input.metadata,
        tags: &input.tags,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_patch_baseline_input_body(
    input: &crate::input::CreatePatchBaselineInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreatePatchBaselineInputBody {
        operating_system: &input.operating_system,
        name: &input.name,
        global_filters: &input.global_filters,
        approval_rules: &input.approval_rules,
        approved_patches: &input.approved_patches,
        approved_patches_compliance_level: &input.approved_patches_compliance_level,
        approved_patches_enable_non_security: &input.approved_patches_enable_non_security,
        rejected_patches: &input.rejected_patches,
        rejected_patches_action: &input.rejected_patches_action,
        description: &input.description,
        sources: &input.sources,
        client_token: &input.client_token,
        tags: &input.tags,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_resource_data_sync_input_body(
    input: &crate::input::CreateResourceDataSyncInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateResourceDataSyncInputBody {
        sync_name: &input.sync_name,
        s3_destination: &input.s3_destination,
        sync_type: &input.sync_type,
        sync_source: &input.sync_source,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_delete_activation_input_body(
    input: &crate::input::DeleteActivationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeleteActivationInputBody {
        activation_id: &input.activation_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_delete_association_input_body(
    input: &crate::input::DeleteAssociationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeleteAssociationInputBody {
        name: &input.name,
        instance_id: &input.instance_id,
        association_id: &input.association_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_delete_document_input_body(
    input: &crate::input::DeleteDocumentInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeleteDocumentInputBody {
        name: &input.name,
        document_version: &input.document_version,
        version_name: &input.version_name,
        force: &input.force,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_delete_inventory_input_body(
    input: &crate::input::DeleteInventoryInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeleteInventoryInputBody {
        type_name: &input.type_name,
        schema_delete_option: &input.schema_delete_option,
        dry_run: &input.dry_run,
        client_token: &input.client_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_delete_maintenance_window_input_body(
    input: &crate::input::DeleteMaintenanceWindowInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeleteMaintenanceWindowInputBody {
        window_id: &input.window_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_delete_ops_metadata_input_body(
    input: &crate::input::DeleteOpsMetadataInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeleteOpsMetadataInputBody {
        ops_metadata_arn: &input.ops_metadata_arn,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_delete_parameter_input_body(
    input: &crate::input::DeleteParameterInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeleteParameterInputBody { name: &input.name };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_delete_parameters_input_body(
    input: &crate::input::DeleteParametersInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeleteParametersInputBody {
        names: &input.names,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_delete_patch_baseline_input_body(
    input: &crate::input::DeletePatchBaselineInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeletePatchBaselineInputBody {
        baseline_id: &input.baseline_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_delete_resource_data_sync_input_body(
    input: &crate::input::DeleteResourceDataSyncInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeleteResourceDataSyncInputBody {
        sync_name: &input.sync_name,
        sync_type: &input.sync_type,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_deregister_managed_instance_input_body(
    input: &crate::input::DeregisterManagedInstanceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeregisterManagedInstanceInputBody {
        instance_id: &input.instance_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_deregister_patch_baseline_for_patch_group_input_body(
    input: &crate::input::DeregisterPatchBaselineForPatchGroupInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeregisterPatchBaselineForPatchGroupInputBody {
        baseline_id: &input.baseline_id,
        patch_group: &input.patch_group,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_deregister_target_from_maintenance_window_input_body(
    input: &crate::input::DeregisterTargetFromMaintenanceWindowInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeregisterTargetFromMaintenanceWindowInputBody {
        window_id: &input.window_id,
        window_target_id: &input.window_target_id,
        safe: &input.safe,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_deregister_task_from_maintenance_window_input_body(
    input: &crate::input::DeregisterTaskFromMaintenanceWindowInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeregisterTaskFromMaintenanceWindowInputBody {
        window_id: &input.window_id,
        window_task_id: &input.window_task_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_activations_input_body(
    input: &crate::input::DescribeActivationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeActivationsInputBody {
        filters: &input.filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_association_input_body(
    input: &crate::input::DescribeAssociationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeAssociationInputBody {
        name: &input.name,
        instance_id: &input.instance_id,
        association_id: &input.association_id,
        association_version: &input.association_version,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_association_executions_input_body(
    input: &crate::input::DescribeAssociationExecutionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeAssociationExecutionsInputBody {
        association_id: &input.association_id,
        filters: &input.filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_association_execution_targets_input_body(
    input: &crate::input::DescribeAssociationExecutionTargetsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeAssociationExecutionTargetsInputBody {
        association_id: &input.association_id,
        execution_id: &input.execution_id,
        filters: &input.filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_automation_executions_input_body(
    input: &crate::input::DescribeAutomationExecutionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeAutomationExecutionsInputBody {
        filters: &input.filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_automation_step_executions_input_body(
    input: &crate::input::DescribeAutomationStepExecutionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeAutomationStepExecutionsInputBody {
        automation_execution_id: &input.automation_execution_id,
        filters: &input.filters,
        next_token: &input.next_token,
        max_results: &input.max_results,
        reverse_order: &input.reverse_order,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_available_patches_input_body(
    input: &crate::input::DescribeAvailablePatchesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeAvailablePatchesInputBody {
        filters: &input.filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_document_input_body(
    input: &crate::input::DescribeDocumentInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeDocumentInputBody {
        name: &input.name,
        document_version: &input.document_version,
        version_name: &input.version_name,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_document_permission_input_body(
    input: &crate::input::DescribeDocumentPermissionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeDocumentPermissionInputBody {
        name: &input.name,
        permission_type: &input.permission_type,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_effective_instance_associations_input_body(
    input: &crate::input::DescribeEffectiveInstanceAssociationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeEffectiveInstanceAssociationsInputBody {
        instance_id: &input.instance_id,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_effective_patches_for_patch_baseline_input_body(
    input: &crate::input::DescribeEffectivePatchesForPatchBaselineInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeEffectivePatchesForPatchBaselineInputBody {
        baseline_id: &input.baseline_id,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_instance_associations_status_input_body(
    input: &crate::input::DescribeInstanceAssociationsStatusInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeInstanceAssociationsStatusInputBody {
        instance_id: &input.instance_id,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_instance_information_input_body(
    input: &crate::input::DescribeInstanceInformationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeInstanceInformationInputBody {
        instance_information_filter_list: &input.instance_information_filter_list,
        filters: &input.filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_instance_patches_input_body(
    input: &crate::input::DescribeInstancePatchesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeInstancePatchesInputBody {
        instance_id: &input.instance_id,
        filters: &input.filters,
        next_token: &input.next_token,
        max_results: &input.max_results,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_instance_patch_states_input_body(
    input: &crate::input::DescribeInstancePatchStatesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeInstancePatchStatesInputBody {
        instance_ids: &input.instance_ids,
        next_token: &input.next_token,
        max_results: &input.max_results,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_instance_patch_states_for_patch_group_input_body(
    input: &crate::input::DescribeInstancePatchStatesForPatchGroupInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeInstancePatchStatesForPatchGroupInputBody {
        patch_group: &input.patch_group,
        filters: &input.filters,
        next_token: &input.next_token,
        max_results: &input.max_results,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_inventory_deletions_input_body(
    input: &crate::input::DescribeInventoryDeletionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeInventoryDeletionsInputBody {
        deletion_id: &input.deletion_id,
        next_token: &input.next_token,
        max_results: &input.max_results,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_maintenance_window_executions_input_body(
    input: &crate::input::DescribeMaintenanceWindowExecutionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeMaintenanceWindowExecutionsInputBody {
        window_id: &input.window_id,
        filters: &input.filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_maintenance_window_execution_task_invocations_input_body(
    input: &crate::input::DescribeMaintenanceWindowExecutionTaskInvocationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeMaintenanceWindowExecutionTaskInvocationsInputBody {
        window_execution_id: &input.window_execution_id,
        task_id: &input.task_id,
        filters: &input.filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_maintenance_window_execution_tasks_input_body(
    input: &crate::input::DescribeMaintenanceWindowExecutionTasksInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeMaintenanceWindowExecutionTasksInputBody {
        window_execution_id: &input.window_execution_id,
        filters: &input.filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_maintenance_windows_input_body(
    input: &crate::input::DescribeMaintenanceWindowsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeMaintenanceWindowsInputBody {
        filters: &input.filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_maintenance_window_schedule_input_body(
    input: &crate::input::DescribeMaintenanceWindowScheduleInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeMaintenanceWindowScheduleInputBody {
        window_id: &input.window_id,
        targets: &input.targets,
        resource_type: &input.resource_type,
        filters: &input.filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_maintenance_windows_for_target_input_body(
    input: &crate::input::DescribeMaintenanceWindowsForTargetInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeMaintenanceWindowsForTargetInputBody {
        targets: &input.targets,
        resource_type: &input.resource_type,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_maintenance_window_targets_input_body(
    input: &crate::input::DescribeMaintenanceWindowTargetsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeMaintenanceWindowTargetsInputBody {
        window_id: &input.window_id,
        filters: &input.filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_maintenance_window_tasks_input_body(
    input: &crate::input::DescribeMaintenanceWindowTasksInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeMaintenanceWindowTasksInputBody {
        window_id: &input.window_id,
        filters: &input.filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_ops_items_input_body(
    input: &crate::input::DescribeOpsItemsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeOpsItemsInputBody {
        ops_item_filters: &input.ops_item_filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_parameters_input_body(
    input: &crate::input::DescribeParametersInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeParametersInputBody {
        filters: &input.filters,
        parameter_filters: &input.parameter_filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_patch_baselines_input_body(
    input: &crate::input::DescribePatchBaselinesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribePatchBaselinesInputBody {
        filters: &input.filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_patch_groups_input_body(
    input: &crate::input::DescribePatchGroupsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribePatchGroupsInputBody {
        max_results: &input.max_results,
        filters: &input.filters,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_patch_group_state_input_body(
    input: &crate::input::DescribePatchGroupStateInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribePatchGroupStateInputBody {
        patch_group: &input.patch_group,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_patch_properties_input_body(
    input: &crate::input::DescribePatchPropertiesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribePatchPropertiesInputBody {
        operating_system: &input.operating_system,
        property: &input.property,
        patch_set: &input.patch_set,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_sessions_input_body(
    input: &crate::input::DescribeSessionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeSessionsInputBody {
        state: &input.state,
        max_results: &input.max_results,
        next_token: &input.next_token,
        filters: &input.filters,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_disassociate_ops_item_related_item_input_body(
    input: &crate::input::DisassociateOpsItemRelatedItemInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DisassociateOpsItemRelatedItemInputBody {
        ops_item_id: &input.ops_item_id,
        association_id: &input.association_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_automation_execution_input_body(
    input: &crate::input::GetAutomationExecutionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetAutomationExecutionInputBody {
        automation_execution_id: &input.automation_execution_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_calendar_state_input_body(
    input: &crate::input::GetCalendarStateInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetCalendarStateInputBody {
        calendar_names: &input.calendar_names,
        at_time: &input.at_time,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_command_invocation_input_body(
    input: &crate::input::GetCommandInvocationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetCommandInvocationInputBody {
        command_id: &input.command_id,
        instance_id: &input.instance_id,
        plugin_name: &input.plugin_name,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_connection_status_input_body(
    input: &crate::input::GetConnectionStatusInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetConnectionStatusInputBody {
        target: &input.target,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_default_patch_baseline_input_body(
    input: &crate::input::GetDefaultPatchBaselineInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetDefaultPatchBaselineInputBody {
        operating_system: &input.operating_system,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_deployable_patch_snapshot_for_instance_input_body(
    input: &crate::input::GetDeployablePatchSnapshotForInstanceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetDeployablePatchSnapshotForInstanceInputBody {
        instance_id: &input.instance_id,
        snapshot_id: &input.snapshot_id,
        baseline_override: &input.baseline_override,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_document_input_body(
    input: &crate::input::GetDocumentInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetDocumentInputBody {
        name: &input.name,
        version_name: &input.version_name,
        document_version: &input.document_version,
        document_format: &input.document_format,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_inventory_input_body(
    input: &crate::input::GetInventoryInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetInventoryInputBody {
        filters: &input.filters,
        aggregators: &input.aggregators,
        result_attributes: &input.result_attributes,
        next_token: &input.next_token,
        max_results: &input.max_results,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_inventory_schema_input_body(
    input: &crate::input::GetInventorySchemaInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetInventorySchemaInputBody {
        type_name: &input.type_name,
        next_token: &input.next_token,
        max_results: &input.max_results,
        aggregator: &input.aggregator,
        sub_type: &input.sub_type,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_maintenance_window_input_body(
    input: &crate::input::GetMaintenanceWindowInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetMaintenanceWindowInputBody {
        window_id: &input.window_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_maintenance_window_execution_input_body(
    input: &crate::input::GetMaintenanceWindowExecutionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetMaintenanceWindowExecutionInputBody {
        window_execution_id: &input.window_execution_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_maintenance_window_execution_task_input_body(
    input: &crate::input::GetMaintenanceWindowExecutionTaskInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetMaintenanceWindowExecutionTaskInputBody {
        window_execution_id: &input.window_execution_id,
        task_id: &input.task_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_maintenance_window_execution_task_invocation_input_body(
    input: &crate::input::GetMaintenanceWindowExecutionTaskInvocationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetMaintenanceWindowExecutionTaskInvocationInputBody {
        window_execution_id: &input.window_execution_id,
        task_id: &input.task_id,
        invocation_id: &input.invocation_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_maintenance_window_task_input_body(
    input: &crate::input::GetMaintenanceWindowTaskInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetMaintenanceWindowTaskInputBody {
        window_id: &input.window_id,
        window_task_id: &input.window_task_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_ops_item_input_body(
    input: &crate::input::GetOpsItemInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetOpsItemInputBody {
        ops_item_id: &input.ops_item_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_ops_metadata_input_body(
    input: &crate::input::GetOpsMetadataInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetOpsMetadataInputBody {
        ops_metadata_arn: &input.ops_metadata_arn,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_ops_summary_input_body(
    input: &crate::input::GetOpsSummaryInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetOpsSummaryInputBody {
        sync_name: &input.sync_name,
        filters: &input.filters,
        aggregators: &input.aggregators,
        result_attributes: &input.result_attributes,
        next_token: &input.next_token,
        max_results: &input.max_results,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_parameter_input_body(
    input: &crate::input::GetParameterInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetParameterInputBody {
        name: &input.name,
        with_decryption: &input.with_decryption,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_parameter_history_input_body(
    input: &crate::input::GetParameterHistoryInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetParameterHistoryInputBody {
        name: &input.name,
        with_decryption: &input.with_decryption,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_parameters_input_body(
    input: &crate::input::GetParametersInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetParametersInputBody {
        names: &input.names,
        with_decryption: &input.with_decryption,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_parameters_by_path_input_body(
    input: &crate::input::GetParametersByPathInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetParametersByPathInputBody {
        path: &input.path,
        recursive: &input.recursive,
        parameter_filters: &input.parameter_filters,
        with_decryption: &input.with_decryption,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_patch_baseline_input_body(
    input: &crate::input::GetPatchBaselineInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetPatchBaselineInputBody {
        baseline_id: &input.baseline_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_patch_baseline_for_patch_group_input_body(
    input: &crate::input::GetPatchBaselineForPatchGroupInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetPatchBaselineForPatchGroupInputBody {
        patch_group: &input.patch_group,
        operating_system: &input.operating_system,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_service_setting_input_body(
    input: &crate::input::GetServiceSettingInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetServiceSettingInputBody {
        setting_id: &input.setting_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_label_parameter_version_input_body(
    input: &crate::input::LabelParameterVersionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::LabelParameterVersionInputBody {
        name: &input.name,
        parameter_version: &input.parameter_version,
        labels: &input.labels,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_associations_input_body(
    input: &crate::input::ListAssociationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListAssociationsInputBody {
        association_filter_list: &input.association_filter_list,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_association_versions_input_body(
    input: &crate::input::ListAssociationVersionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListAssociationVersionsInputBody {
        association_id: &input.association_id,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_command_invocations_input_body(
    input: &crate::input::ListCommandInvocationsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListCommandInvocationsInputBody {
        command_id: &input.command_id,
        instance_id: &input.instance_id,
        max_results: &input.max_results,
        next_token: &input.next_token,
        filters: &input.filters,
        details: &input.details,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_commands_input_body(
    input: &crate::input::ListCommandsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListCommandsInputBody {
        command_id: &input.command_id,
        instance_id: &input.instance_id,
        max_results: &input.max_results,
        next_token: &input.next_token,
        filters: &input.filters,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_compliance_items_input_body(
    input: &crate::input::ListComplianceItemsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListComplianceItemsInputBody {
        filters: &input.filters,
        resource_ids: &input.resource_ids,
        resource_types: &input.resource_types,
        next_token: &input.next_token,
        max_results: &input.max_results,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_compliance_summaries_input_body(
    input: &crate::input::ListComplianceSummariesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListComplianceSummariesInputBody {
        filters: &input.filters,
        next_token: &input.next_token,
        max_results: &input.max_results,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_document_metadata_history_input_body(
    input: &crate::input::ListDocumentMetadataHistoryInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListDocumentMetadataHistoryInputBody {
        name: &input.name,
        document_version: &input.document_version,
        metadata: &input.metadata,
        next_token: &input.next_token,
        max_results: &input.max_results,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_documents_input_body(
    input: &crate::input::ListDocumentsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListDocumentsInputBody {
        document_filter_list: &input.document_filter_list,
        filters: &input.filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_document_versions_input_body(
    input: &crate::input::ListDocumentVersionsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListDocumentVersionsInputBody {
        name: &input.name,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_inventory_entries_input_body(
    input: &crate::input::ListInventoryEntriesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListInventoryEntriesInputBody {
        instance_id: &input.instance_id,
        type_name: &input.type_name,
        filters: &input.filters,
        next_token: &input.next_token,
        max_results: &input.max_results,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_ops_item_events_input_body(
    input: &crate::input::ListOpsItemEventsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListOpsItemEventsInputBody {
        filters: &input.filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_ops_item_related_items_input_body(
    input: &crate::input::ListOpsItemRelatedItemsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListOpsItemRelatedItemsInputBody {
        ops_item_id: &input.ops_item_id,
        filters: &input.filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_ops_metadata_input_body(
    input: &crate::input::ListOpsMetadataInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListOpsMetadataInputBody {
        filters: &input.filters,
        max_results: &input.max_results,
        next_token: &input.next_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_resource_compliance_summaries_input_body(
    input: &crate::input::ListResourceComplianceSummariesInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListResourceComplianceSummariesInputBody {
        filters: &input.filters,
        next_token: &input.next_token,
        max_results: &input.max_results,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_resource_data_sync_input_body(
    input: &crate::input::ListResourceDataSyncInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListResourceDataSyncInputBody {
        sync_type: &input.sync_type,
        next_token: &input.next_token,
        max_results: &input.max_results,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_tags_for_resource_input_body(
    input: &crate::input::ListTagsForResourceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListTagsForResourceInputBody {
        resource_type: &input.resource_type,
        resource_id: &input.resource_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_modify_document_permission_input_body(
    input: &crate::input::ModifyDocumentPermissionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ModifyDocumentPermissionInputBody {
        name: &input.name,
        permission_type: &input.permission_type,
        account_ids_to_add: &input.account_ids_to_add,
        account_ids_to_remove: &input.account_ids_to_remove,
        shared_document_version: &input.shared_document_version,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_put_compliance_items_input_body(
    input: &crate::input::PutComplianceItemsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::PutComplianceItemsInputBody {
        resource_id: &input.resource_id,
        resource_type: &input.resource_type,
        compliance_type: &input.compliance_type,
        execution_summary: &input.execution_summary,
        items: &input.items,
        item_content_hash: &input.item_content_hash,
        upload_type: &input.upload_type,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_put_inventory_input_body(
    input: &crate::input::PutInventoryInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::PutInventoryInputBody {
        instance_id: &input.instance_id,
        items: &input.items,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_put_parameter_input_body(
    input: &crate::input::PutParameterInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::PutParameterInputBody {
        name: &input.name,
        description: &input.description,
        value: &input.value,
        r#type: &input.r#type,
        key_id: &input.key_id,
        overwrite: &input.overwrite,
        allowed_pattern: &input.allowed_pattern,
        tags: &input.tags,
        tier: &input.tier,
        policies: &input.policies,
        data_type: &input.data_type,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_register_default_patch_baseline_input_body(
    input: &crate::input::RegisterDefaultPatchBaselineInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::RegisterDefaultPatchBaselineInputBody {
        baseline_id: &input.baseline_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_register_patch_baseline_for_patch_group_input_body(
    input: &crate::input::RegisterPatchBaselineForPatchGroupInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::RegisterPatchBaselineForPatchGroupInputBody {
        baseline_id: &input.baseline_id,
        patch_group: &input.patch_group,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_register_target_with_maintenance_window_input_body(
    input: &crate::input::RegisterTargetWithMaintenanceWindowInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::RegisterTargetWithMaintenanceWindowInputBody {
        window_id: &input.window_id,
        resource_type: &input.resource_type,
        targets: &input.targets,
        owner_information: &input.owner_information,
        name: &input.name,
        description: &input.description,
        client_token: &input.client_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_register_task_with_maintenance_window_input_body(
    input: &crate::input::RegisterTaskWithMaintenanceWindowInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::RegisterTaskWithMaintenanceWindowInputBody {
        window_id: &input.window_id,
        targets: &input.targets,
        task_arn: &input.task_arn,
        service_role_arn: &input.service_role_arn,
        task_type: &input.task_type,
        task_parameters: &input.task_parameters,
        task_invocation_parameters: &input.task_invocation_parameters,
        priority: &input.priority,
        max_concurrency: &input.max_concurrency,
        max_errors: &input.max_errors,
        logging_info: &input.logging_info,
        name: &input.name,
        description: &input.description,
        client_token: &input.client_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_remove_tags_from_resource_input_body(
    input: &crate::input::RemoveTagsFromResourceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::RemoveTagsFromResourceInputBody {
        resource_type: &input.resource_type,
        resource_id: &input.resource_id,
        tag_keys: &input.tag_keys,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_reset_service_setting_input_body(
    input: &crate::input::ResetServiceSettingInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ResetServiceSettingInputBody {
        setting_id: &input.setting_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_resume_session_input_body(
    input: &crate::input::ResumeSessionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ResumeSessionInputBody {
        session_id: &input.session_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_send_automation_signal_input_body(
    input: &crate::input::SendAutomationSignalInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::SendAutomationSignalInputBody {
        automation_execution_id: &input.automation_execution_id,
        signal_type: &input.signal_type,
        payload: &input.payload,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_send_command_input_body(
    input: &crate::input::SendCommandInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::SendCommandInputBody {
        instance_ids: &input.instance_ids,
        targets: &input.targets,
        document_name: &input.document_name,
        document_version: &input.document_version,
        document_hash: &input.document_hash,
        document_hash_type: &input.document_hash_type,
        timeout_seconds: &input.timeout_seconds,
        comment: &input.comment,
        parameters: &input.parameters,
        output_s3_region: &input.output_s3_region,
        output_s3_bucket_name: &input.output_s3_bucket_name,
        output_s3_key_prefix: &input.output_s3_key_prefix,
        max_concurrency: &input.max_concurrency,
        max_errors: &input.max_errors,
        service_role_arn: &input.service_role_arn,
        notification_config: &input.notification_config,
        cloud_watch_output_config: &input.cloud_watch_output_config,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_start_associations_once_input_body(
    input: &crate::input::StartAssociationsOnceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::StartAssociationsOnceInputBody {
        association_ids: &input.association_ids,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_start_automation_execution_input_body(
    input: &crate::input::StartAutomationExecutionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::StartAutomationExecutionInputBody {
        document_name: &input.document_name,
        document_version: &input.document_version,
        parameters: &input.parameters,
        client_token: &input.client_token,
        mode: &input.mode,
        target_parameter_name: &input.target_parameter_name,
        targets: &input.targets,
        target_maps: &input.target_maps,
        max_concurrency: &input.max_concurrency,
        max_errors: &input.max_errors,
        target_locations: &input.target_locations,
        tags: &input.tags,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_start_change_request_execution_input_body(
    input: &crate::input::StartChangeRequestExecutionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::StartChangeRequestExecutionInputBody {
        scheduled_time: &input.scheduled_time,
        document_name: &input.document_name,
        document_version: &input.document_version,
        parameters: &input.parameters,
        change_request_name: &input.change_request_name,
        client_token: &input.client_token,
        runbooks: &input.runbooks,
        tags: &input.tags,
        scheduled_end_time: &input.scheduled_end_time,
        change_details: &input.change_details,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_start_session_input_body(
    input: &crate::input::StartSessionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::StartSessionInputBody {
        target: &input.target,
        document_name: &input.document_name,
        parameters: &input.parameters,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_stop_automation_execution_input_body(
    input: &crate::input::StopAutomationExecutionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::StopAutomationExecutionInputBody {
        automation_execution_id: &input.automation_execution_id,
        r#type: &input.r#type,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_terminate_session_input_body(
    input: &crate::input::TerminateSessionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::TerminateSessionInputBody {
        session_id: &input.session_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_unlabel_parameter_version_input_body(
    input: &crate::input::UnlabelParameterVersionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UnlabelParameterVersionInputBody {
        name: &input.name,
        parameter_version: &input.parameter_version,
        labels: &input.labels,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_association_input_body(
    input: &crate::input::UpdateAssociationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateAssociationInputBody {
        association_id: &input.association_id,
        parameters: &input.parameters,
        document_version: &input.document_version,
        schedule_expression: &input.schedule_expression,
        output_location: &input.output_location,
        name: &input.name,
        targets: &input.targets,
        association_name: &input.association_name,
        association_version: &input.association_version,
        automation_target_parameter_name: &input.automation_target_parameter_name,
        max_errors: &input.max_errors,
        max_concurrency: &input.max_concurrency,
        compliance_severity: &input.compliance_severity,
        sync_compliance: &input.sync_compliance,
        apply_only_at_cron_interval: &input.apply_only_at_cron_interval,
        calendar_names: &input.calendar_names,
        target_locations: &input.target_locations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_association_status_input_body(
    input: &crate::input::UpdateAssociationStatusInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateAssociationStatusInputBody {
        name: &input.name,
        instance_id: &input.instance_id,
        association_status: &input.association_status,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_document_input_body(
    input: &crate::input::UpdateDocumentInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateDocumentInputBody {
        content: &input.content,
        attachments: &input.attachments,
        name: &input.name,
        display_name: &input.display_name,
        version_name: &input.version_name,
        document_version: &input.document_version,
        document_format: &input.document_format,
        target_type: &input.target_type,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_document_default_version_input_body(
    input: &crate::input::UpdateDocumentDefaultVersionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateDocumentDefaultVersionInputBody {
        name: &input.name,
        document_version: &input.document_version,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_document_metadata_input_body(
    input: &crate::input::UpdateDocumentMetadataInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateDocumentMetadataInputBody {
        name: &input.name,
        document_version: &input.document_version,
        document_reviews: &input.document_reviews,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_maintenance_window_input_body(
    input: &crate::input::UpdateMaintenanceWindowInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateMaintenanceWindowInputBody {
        window_id: &input.window_id,
        name: &input.name,
        description: &input.description,
        start_date: &input.start_date,
        end_date: &input.end_date,
        schedule: &input.schedule,
        schedule_timezone: &input.schedule_timezone,
        schedule_offset: &input.schedule_offset,
        duration: &input.duration,
        cutoff: &input.cutoff,
        allow_unassociated_targets: &input.allow_unassociated_targets,
        enabled: &input.enabled,
        replace: &input.replace,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_maintenance_window_target_input_body(
    input: &crate::input::UpdateMaintenanceWindowTargetInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateMaintenanceWindowTargetInputBody {
        window_id: &input.window_id,
        window_target_id: &input.window_target_id,
        targets: &input.targets,
        owner_information: &input.owner_information,
        name: &input.name,
        description: &input.description,
        replace: &input.replace,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_maintenance_window_task_input_body(
    input: &crate::input::UpdateMaintenanceWindowTaskInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateMaintenanceWindowTaskInputBody {
        window_id: &input.window_id,
        window_task_id: &input.window_task_id,
        targets: &input.targets,
        task_arn: &input.task_arn,
        service_role_arn: &input.service_role_arn,
        task_parameters: &input.task_parameters,
        task_invocation_parameters: &input.task_invocation_parameters,
        priority: &input.priority,
        max_concurrency: &input.max_concurrency,
        max_errors: &input.max_errors,
        logging_info: &input.logging_info,
        name: &input.name,
        description: &input.description,
        replace: &input.replace,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_managed_instance_role_input_body(
    input: &crate::input::UpdateManagedInstanceRoleInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateManagedInstanceRoleInputBody {
        instance_id: &input.instance_id,
        iam_role: &input.iam_role,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_ops_item_input_body(
    input: &crate::input::UpdateOpsItemInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateOpsItemInputBody {
        description: &input.description,
        operational_data: &input.operational_data,
        operational_data_to_delete: &input.operational_data_to_delete,
        notifications: &input.notifications,
        priority: &input.priority,
        related_ops_items: &input.related_ops_items,
        status: &input.status,
        ops_item_id: &input.ops_item_id,
        title: &input.title,
        category: &input.category,
        severity: &input.severity,
        actual_start_time: &input.actual_start_time,
        actual_end_time: &input.actual_end_time,
        planned_start_time: &input.planned_start_time,
        planned_end_time: &input.planned_end_time,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_ops_metadata_input_body(
    input: &crate::input::UpdateOpsMetadataInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateOpsMetadataInputBody {
        ops_metadata_arn: &input.ops_metadata_arn,
        metadata_to_update: &input.metadata_to_update,
        keys_to_delete: &input.keys_to_delete,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_patch_baseline_input_body(
    input: &crate::input::UpdatePatchBaselineInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdatePatchBaselineInputBody {
        baseline_id: &input.baseline_id,
        name: &input.name,
        global_filters: &input.global_filters,
        approval_rules: &input.approval_rules,
        approved_patches: &input.approved_patches,
        approved_patches_compliance_level: &input.approved_patches_compliance_level,
        approved_patches_enable_non_security: &input.approved_patches_enable_non_security,
        rejected_patches: &input.rejected_patches,
        rejected_patches_action: &input.rejected_patches_action,
        description: &input.description,
        sources: &input.sources,
        replace: &input.replace,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_resource_data_sync_input_body(
    input: &crate::input::UpdateResourceDataSyncInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateResourceDataSyncInputBody {
        sync_name: &input.sync_name,
        sync_type: &input.sync_type,
        sync_source: &input.sync_source,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_service_setting_input_body(
    input: &crate::input::UpdateServiceSettingInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateServiceSettingInputBody {
        setting_id: &input.setting_id,
        setting_value: &input.setting_value,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}
