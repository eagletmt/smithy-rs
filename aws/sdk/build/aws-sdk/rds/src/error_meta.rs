// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    AuthorizationAlreadyExistsFault(crate::error::AuthorizationAlreadyExistsFault),
    AuthorizationNotFoundFault(crate::error::AuthorizationNotFoundFault),
    AuthorizationQuotaExceededFault(crate::error::AuthorizationQuotaExceededFault),
    BackupPolicyNotFoundFault(crate::error::BackupPolicyNotFoundFault),
    CertificateNotFoundFault(crate::error::CertificateNotFoundFault),
    CustomAvailabilityZoneAlreadyExistsFault(
        crate::error::CustomAvailabilityZoneAlreadyExistsFault,
    ),
    CustomAvailabilityZoneNotFoundFault(crate::error::CustomAvailabilityZoneNotFoundFault),
    CustomAvailabilityZoneQuotaExceededFault(
        crate::error::CustomAvailabilityZoneQuotaExceededFault,
    ),
    DBClusterAlreadyExistsFault(crate::error::DBClusterAlreadyExistsFault),
    DBClusterBacktrackNotFoundFault(crate::error::DBClusterBacktrackNotFoundFault),
    DBClusterEndpointAlreadyExistsFault(crate::error::DBClusterEndpointAlreadyExistsFault),
    DBClusterEndpointNotFoundFault(crate::error::DBClusterEndpointNotFoundFault),
    DBClusterEndpointQuotaExceededFault(crate::error::DBClusterEndpointQuotaExceededFault),
    DBClusterNotFoundFault(crate::error::DBClusterNotFoundFault),
    DBClusterParameterGroupNotFoundFault(crate::error::DBClusterParameterGroupNotFoundFault),
    DBClusterQuotaExceededFault(crate::error::DBClusterQuotaExceededFault),
    DBClusterRoleAlreadyExistsFault(crate::error::DBClusterRoleAlreadyExistsFault),
    DBClusterRoleNotFoundFault(crate::error::DBClusterRoleNotFoundFault),
    DBClusterRoleQuotaExceededFault(crate::error::DBClusterRoleQuotaExceededFault),
    DBClusterSnapshotAlreadyExistsFault(crate::error::DBClusterSnapshotAlreadyExistsFault),
    DBClusterSnapshotNotFoundFault(crate::error::DBClusterSnapshotNotFoundFault),
    DBInstanceAlreadyExistsFault(crate::error::DBInstanceAlreadyExistsFault),
    DBInstanceAutomatedBackupNotFoundFault(crate::error::DBInstanceAutomatedBackupNotFoundFault),
    DBInstanceAutomatedBackupQuotaExceededFault(
        crate::error::DBInstanceAutomatedBackupQuotaExceededFault,
    ),
    DBInstanceNotFoundFault(crate::error::DBInstanceNotFoundFault),
    DBInstanceRoleAlreadyExistsFault(crate::error::DBInstanceRoleAlreadyExistsFault),
    DBInstanceRoleNotFoundFault(crate::error::DBInstanceRoleNotFoundFault),
    DBInstanceRoleQuotaExceededFault(crate::error::DBInstanceRoleQuotaExceededFault),
    DBLogFileNotFoundFault(crate::error::DBLogFileNotFoundFault),
    DBParameterGroupAlreadyExistsFault(crate::error::DBParameterGroupAlreadyExistsFault),
    DBParameterGroupNotFoundFault(crate::error::DBParameterGroupNotFoundFault),
    DBParameterGroupQuotaExceededFault(crate::error::DBParameterGroupQuotaExceededFault),
    DBProxyAlreadyExistsFault(crate::error::DBProxyAlreadyExistsFault),
    DBProxyEndpointAlreadyExistsFault(crate::error::DBProxyEndpointAlreadyExistsFault),
    DBProxyEndpointNotFoundFault(crate::error::DBProxyEndpointNotFoundFault),
    DBProxyEndpointQuotaExceededFault(crate::error::DBProxyEndpointQuotaExceededFault),
    DBProxyNotFoundFault(crate::error::DBProxyNotFoundFault),
    DBProxyQuotaExceededFault(crate::error::DBProxyQuotaExceededFault),
    DBProxyTargetAlreadyRegisteredFault(crate::error::DBProxyTargetAlreadyRegisteredFault),
    DBProxyTargetGroupNotFoundFault(crate::error::DBProxyTargetGroupNotFoundFault),
    DBProxyTargetNotFoundFault(crate::error::DBProxyTargetNotFoundFault),
    DBSecurityGroupAlreadyExistsFault(crate::error::DBSecurityGroupAlreadyExistsFault),
    DBSecurityGroupNotFoundFault(crate::error::DBSecurityGroupNotFoundFault),
    DBSecurityGroupNotSupportedFault(crate::error::DBSecurityGroupNotSupportedFault),
    DBSecurityGroupQuotaExceededFault(crate::error::DBSecurityGroupQuotaExceededFault),
    DBSnapshotAlreadyExistsFault(crate::error::DBSnapshotAlreadyExistsFault),
    DBSnapshotNotFoundFault(crate::error::DBSnapshotNotFoundFault),
    DBSubnetGroupAlreadyExistsFault(crate::error::DBSubnetGroupAlreadyExistsFault),
    DBSubnetGroupDoesNotCoverEnoughAZs(crate::error::DBSubnetGroupDoesNotCoverEnoughAZs),
    DBSubnetGroupNotAllowedFault(crate::error::DBSubnetGroupNotAllowedFault),
    DBSubnetGroupNotFoundFault(crate::error::DBSubnetGroupNotFoundFault),
    DBSubnetGroupQuotaExceededFault(crate::error::DBSubnetGroupQuotaExceededFault),
    DBSubnetQuotaExceededFault(crate::error::DBSubnetQuotaExceededFault),
    DBUpgradeDependencyFailureFault(crate::error::DBUpgradeDependencyFailureFault),
    DomainNotFoundFault(crate::error::DomainNotFoundFault),
    EventSubscriptionQuotaExceededFault(crate::error::EventSubscriptionQuotaExceededFault),
    ExportTaskAlreadyExistsFault(crate::error::ExportTaskAlreadyExistsFault),
    ExportTaskNotFoundFault(crate::error::ExportTaskNotFoundFault),
    GlobalClusterAlreadyExistsFault(crate::error::GlobalClusterAlreadyExistsFault),
    GlobalClusterNotFoundFault(crate::error::GlobalClusterNotFoundFault),
    GlobalClusterQuotaExceededFault(crate::error::GlobalClusterQuotaExceededFault),
    IamRoleMissingPermissionsFault(crate::error::IamRoleMissingPermissionsFault),
    IamRoleNotFoundFault(crate::error::IamRoleNotFoundFault),
    InstallationMediaAlreadyExistsFault(crate::error::InstallationMediaAlreadyExistsFault),
    InstallationMediaNotFoundFault(crate::error::InstallationMediaNotFoundFault),
    InstanceQuotaExceededFault(crate::error::InstanceQuotaExceededFault),
    InsufficientAvailableIPsInSubnetFault(crate::error::InsufficientAvailableIPsInSubnetFault),
    InsufficientDBClusterCapacityFault(crate::error::InsufficientDBClusterCapacityFault),
    InsufficientDBInstanceCapacityFault(crate::error::InsufficientDBInstanceCapacityFault),
    InsufficientStorageClusterCapacityFault(crate::error::InsufficientStorageClusterCapacityFault),
    InvalidDBClusterCapacityFault(crate::error::InvalidDBClusterCapacityFault),
    InvalidDBClusterEndpointStateFault(crate::error::InvalidDBClusterEndpointStateFault),
    InvalidDBClusterSnapshotStateFault(crate::error::InvalidDBClusterSnapshotStateFault),
    InvalidDBClusterStateFault(crate::error::InvalidDBClusterStateFault),
    InvalidDBInstanceAutomatedBackupStateFault(
        crate::error::InvalidDBInstanceAutomatedBackupStateFault,
    ),
    InvalidDBInstanceStateFault(crate::error::InvalidDBInstanceStateFault),
    InvalidDBParameterGroupStateFault(crate::error::InvalidDBParameterGroupStateFault),
    InvalidDBProxyEndpointStateFault(crate::error::InvalidDBProxyEndpointStateFault),
    InvalidDBProxyStateFault(crate::error::InvalidDBProxyStateFault),
    InvalidDBSecurityGroupStateFault(crate::error::InvalidDBSecurityGroupStateFault),
    InvalidDBSnapshotStateFault(crate::error::InvalidDBSnapshotStateFault),
    InvalidDBSubnetGroupFault(crate::error::InvalidDBSubnetGroupFault),
    InvalidDBSubnetGroupStateFault(crate::error::InvalidDBSubnetGroupStateFault),
    InvalidDBSubnetStateFault(crate::error::InvalidDBSubnetStateFault),
    InvalidEventSubscriptionStateFault(crate::error::InvalidEventSubscriptionStateFault),
    InvalidExportOnlyFault(crate::error::InvalidExportOnlyFault),
    InvalidExportSourceStateFault(crate::error::InvalidExportSourceStateFault),
    InvalidExportTaskStateFault(crate::error::InvalidExportTaskStateFault),
    InvalidGlobalClusterStateFault(crate::error::InvalidGlobalClusterStateFault),
    InvalidOptionGroupStateFault(crate::error::InvalidOptionGroupStateFault),
    InvalidRestoreFault(crate::error::InvalidRestoreFault),
    InvalidS3BucketFault(crate::error::InvalidS3BucketFault),
    InvalidSubnet(crate::error::InvalidSubnet),
    InvalidVPCNetworkStateFault(crate::error::InvalidVPCNetworkStateFault),
    KMSKeyNotAccessibleFault(crate::error::KMSKeyNotAccessibleFault),
    OptionGroupAlreadyExistsFault(crate::error::OptionGroupAlreadyExistsFault),
    OptionGroupNotFoundFault(crate::error::OptionGroupNotFoundFault),
    OptionGroupQuotaExceededFault(crate::error::OptionGroupQuotaExceededFault),
    PointInTimeRestoreNotEnabledFault(crate::error::PointInTimeRestoreNotEnabledFault),
    ProvisionedIopsNotAvailableInAZFault(crate::error::ProvisionedIopsNotAvailableInAZFault),
    ReservedDBInstanceAlreadyExistsFault(crate::error::ReservedDBInstanceAlreadyExistsFault),
    ReservedDBInstanceNotFoundFault(crate::error::ReservedDBInstanceNotFoundFault),
    ReservedDBInstanceQuotaExceededFault(crate::error::ReservedDBInstanceQuotaExceededFault),
    ReservedDBInstancesOfferingNotFoundFault(
        crate::error::ReservedDBInstancesOfferingNotFoundFault,
    ),
    ResourceNotFoundFault(crate::error::ResourceNotFoundFault),
    SNSInvalidTopicFault(crate::error::SNSInvalidTopicFault),
    SNSNoAuthorizationFault(crate::error::SNSNoAuthorizationFault),
    SNSTopicArnNotFoundFault(crate::error::SNSTopicArnNotFoundFault),
    SharedSnapshotQuotaExceededFault(crate::error::SharedSnapshotQuotaExceededFault),
    SnapshotQuotaExceededFault(crate::error::SnapshotQuotaExceededFault),
    SourceNotFoundFault(crate::error::SourceNotFoundFault),
    StorageQuotaExceededFault(crate::error::StorageQuotaExceededFault),
    StorageTypeNotSupportedFault(crate::error::StorageTypeNotSupportedFault),
    SubnetAlreadyInUse(crate::error::SubnetAlreadyInUse),
    SubscriptionAlreadyExistFault(crate::error::SubscriptionAlreadyExistFault),
    SubscriptionCategoryNotFoundFault(crate::error::SubscriptionCategoryNotFoundFault),
    SubscriptionNotFoundFault(crate::error::SubscriptionNotFoundFault),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AuthorizationAlreadyExistsFault(inner) => inner.fmt(f),
            Error::AuthorizationNotFoundFault(inner) => inner.fmt(f),
            Error::AuthorizationQuotaExceededFault(inner) => inner.fmt(f),
            Error::BackupPolicyNotFoundFault(inner) => inner.fmt(f),
            Error::CertificateNotFoundFault(inner) => inner.fmt(f),
            Error::CustomAvailabilityZoneAlreadyExistsFault(inner) => inner.fmt(f),
            Error::CustomAvailabilityZoneNotFoundFault(inner) => inner.fmt(f),
            Error::CustomAvailabilityZoneQuotaExceededFault(inner) => inner.fmt(f),
            Error::DBClusterAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DBClusterBacktrackNotFoundFault(inner) => inner.fmt(f),
            Error::DBClusterEndpointAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DBClusterEndpointNotFoundFault(inner) => inner.fmt(f),
            Error::DBClusterEndpointQuotaExceededFault(inner) => inner.fmt(f),
            Error::DBClusterNotFoundFault(inner) => inner.fmt(f),
            Error::DBClusterParameterGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DBClusterQuotaExceededFault(inner) => inner.fmt(f),
            Error::DBClusterRoleAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DBClusterRoleNotFoundFault(inner) => inner.fmt(f),
            Error::DBClusterRoleQuotaExceededFault(inner) => inner.fmt(f),
            Error::DBClusterSnapshotAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DBClusterSnapshotNotFoundFault(inner) => inner.fmt(f),
            Error::DBInstanceAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DBInstanceAutomatedBackupNotFoundFault(inner) => inner.fmt(f),
            Error::DBInstanceAutomatedBackupQuotaExceededFault(inner) => inner.fmt(f),
            Error::DBInstanceNotFoundFault(inner) => inner.fmt(f),
            Error::DBInstanceRoleAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DBInstanceRoleNotFoundFault(inner) => inner.fmt(f),
            Error::DBInstanceRoleQuotaExceededFault(inner) => inner.fmt(f),
            Error::DBLogFileNotFoundFault(inner) => inner.fmt(f),
            Error::DBParameterGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DBParameterGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DBParameterGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::DBProxyAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DBProxyEndpointAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DBProxyEndpointNotFoundFault(inner) => inner.fmt(f),
            Error::DBProxyEndpointQuotaExceededFault(inner) => inner.fmt(f),
            Error::DBProxyNotFoundFault(inner) => inner.fmt(f),
            Error::DBProxyQuotaExceededFault(inner) => inner.fmt(f),
            Error::DBProxyTargetAlreadyRegisteredFault(inner) => inner.fmt(f),
            Error::DBProxyTargetGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DBProxyTargetNotFoundFault(inner) => inner.fmt(f),
            Error::DBSecurityGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DBSecurityGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DBSecurityGroupNotSupportedFault(inner) => inner.fmt(f),
            Error::DBSecurityGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::DBSnapshotAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DBSnapshotNotFoundFault(inner) => inner.fmt(f),
            Error::DBSubnetGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DBSubnetGroupDoesNotCoverEnoughAZs(inner) => inner.fmt(f),
            Error::DBSubnetGroupNotAllowedFault(inner) => inner.fmt(f),
            Error::DBSubnetGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DBSubnetGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::DBSubnetQuotaExceededFault(inner) => inner.fmt(f),
            Error::DBUpgradeDependencyFailureFault(inner) => inner.fmt(f),
            Error::DomainNotFoundFault(inner) => inner.fmt(f),
            Error::EventSubscriptionQuotaExceededFault(inner) => inner.fmt(f),
            Error::ExportTaskAlreadyExistsFault(inner) => inner.fmt(f),
            Error::ExportTaskNotFoundFault(inner) => inner.fmt(f),
            Error::GlobalClusterAlreadyExistsFault(inner) => inner.fmt(f),
            Error::GlobalClusterNotFoundFault(inner) => inner.fmt(f),
            Error::GlobalClusterQuotaExceededFault(inner) => inner.fmt(f),
            Error::IamRoleMissingPermissionsFault(inner) => inner.fmt(f),
            Error::IamRoleNotFoundFault(inner) => inner.fmt(f),
            Error::InstallationMediaAlreadyExistsFault(inner) => inner.fmt(f),
            Error::InstallationMediaNotFoundFault(inner) => inner.fmt(f),
            Error::InstanceQuotaExceededFault(inner) => inner.fmt(f),
            Error::InsufficientAvailableIPsInSubnetFault(inner) => inner.fmt(f),
            Error::InsufficientDBClusterCapacityFault(inner) => inner.fmt(f),
            Error::InsufficientDBInstanceCapacityFault(inner) => inner.fmt(f),
            Error::InsufficientStorageClusterCapacityFault(inner) => inner.fmt(f),
            Error::InvalidDBClusterCapacityFault(inner) => inner.fmt(f),
            Error::InvalidDBClusterEndpointStateFault(inner) => inner.fmt(f),
            Error::InvalidDBClusterSnapshotStateFault(inner) => inner.fmt(f),
            Error::InvalidDBClusterStateFault(inner) => inner.fmt(f),
            Error::InvalidDBInstanceAutomatedBackupStateFault(inner) => inner.fmt(f),
            Error::InvalidDBInstanceStateFault(inner) => inner.fmt(f),
            Error::InvalidDBParameterGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidDBProxyEndpointStateFault(inner) => inner.fmt(f),
            Error::InvalidDBProxyStateFault(inner) => inner.fmt(f),
            Error::InvalidDBSecurityGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidDBSnapshotStateFault(inner) => inner.fmt(f),
            Error::InvalidDBSubnetGroupFault(inner) => inner.fmt(f),
            Error::InvalidDBSubnetGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidDBSubnetStateFault(inner) => inner.fmt(f),
            Error::InvalidEventSubscriptionStateFault(inner) => inner.fmt(f),
            Error::InvalidExportOnlyFault(inner) => inner.fmt(f),
            Error::InvalidExportSourceStateFault(inner) => inner.fmt(f),
            Error::InvalidExportTaskStateFault(inner) => inner.fmt(f),
            Error::InvalidGlobalClusterStateFault(inner) => inner.fmt(f),
            Error::InvalidOptionGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidRestoreFault(inner) => inner.fmt(f),
            Error::InvalidS3BucketFault(inner) => inner.fmt(f),
            Error::InvalidSubnet(inner) => inner.fmt(f),
            Error::InvalidVPCNetworkStateFault(inner) => inner.fmt(f),
            Error::KMSKeyNotAccessibleFault(inner) => inner.fmt(f),
            Error::OptionGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::OptionGroupNotFoundFault(inner) => inner.fmt(f),
            Error::OptionGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::PointInTimeRestoreNotEnabledFault(inner) => inner.fmt(f),
            Error::ProvisionedIopsNotAvailableInAZFault(inner) => inner.fmt(f),
            Error::ReservedDBInstanceAlreadyExistsFault(inner) => inner.fmt(f),
            Error::ReservedDBInstanceNotFoundFault(inner) => inner.fmt(f),
            Error::ReservedDBInstanceQuotaExceededFault(inner) => inner.fmt(f),
            Error::ReservedDBInstancesOfferingNotFoundFault(inner) => inner.fmt(f),
            Error::ResourceNotFoundFault(inner) => inner.fmt(f),
            Error::SNSInvalidTopicFault(inner) => inner.fmt(f),
            Error::SNSNoAuthorizationFault(inner) => inner.fmt(f),
            Error::SNSTopicArnNotFoundFault(inner) => inner.fmt(f),
            Error::SharedSnapshotQuotaExceededFault(inner) => inner.fmt(f),
            Error::SnapshotQuotaExceededFault(inner) => inner.fmt(f),
            Error::SourceNotFoundFault(inner) => inner.fmt(f),
            Error::StorageQuotaExceededFault(inner) => inner.fmt(f),
            Error::StorageTypeNotSupportedFault(inner) => inner.fmt(f),
            Error::SubnetAlreadyInUse(inner) => inner.fmt(f),
            Error::SubscriptionAlreadyExistFault(inner) => inner.fmt(f),
            Error::SubscriptionCategoryNotFoundFault(inner) => inner.fmt(f),
            Error::SubscriptionNotFoundFault(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AddRoleToDBClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AddRoleToDBClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AddRoleToDBClusterErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::AddRoleToDBClusterErrorKind::DBClusterRoleAlreadyExistsFault(
                    inner,
                ) => Error::DBClusterRoleAlreadyExistsFault(inner),
                crate::error::AddRoleToDBClusterErrorKind::DBClusterRoleQuotaExceededFault(
                    inner,
                ) => Error::DBClusterRoleQuotaExceededFault(inner),
                crate::error::AddRoleToDBClusterErrorKind::InvalidDBClusterStateFault(inner) => {
                    Error::InvalidDBClusterStateFault(inner)
                }
                crate::error::AddRoleToDBClusterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AddRoleToDBInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AddRoleToDBInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AddRoleToDBInstanceErrorKind::DBInstanceNotFoundFault(inner) => {
                    Error::DBInstanceNotFoundFault(inner)
                }
                crate::error::AddRoleToDBInstanceErrorKind::DBInstanceRoleAlreadyExistsFault(
                    inner,
                ) => Error::DBInstanceRoleAlreadyExistsFault(inner),
                crate::error::AddRoleToDBInstanceErrorKind::DBInstanceRoleQuotaExceededFault(
                    inner,
                ) => Error::DBInstanceRoleQuotaExceededFault(inner),
                crate::error::AddRoleToDBInstanceErrorKind::InvalidDBInstanceStateFault(inner) => {
                    Error::InvalidDBInstanceStateFault(inner)
                }
                crate::error::AddRoleToDBInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AddSourceIdentifierToSubscriptionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::AddSourceIdentifierToSubscriptionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::AddSourceIdentifierToSubscriptionErrorKind::SourceNotFoundFault(inner) => Error::SourceNotFoundFault(inner),
                crate::error::AddSourceIdentifierToSubscriptionErrorKind::SubscriptionNotFoundFault(inner) => Error::SubscriptionNotFoundFault(inner),
                crate::error::AddSourceIdentifierToSubscriptionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AddTagsToResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AddTagsToResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AddTagsToResourceErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::AddTagsToResourceErrorKind::DBInstanceNotFoundFault(inner) => {
                    Error::DBInstanceNotFoundFault(inner)
                }
                crate::error::AddTagsToResourceErrorKind::DBProxyNotFoundFault(inner) => {
                    Error::DBProxyNotFoundFault(inner)
                }
                crate::error::AddTagsToResourceErrorKind::DBProxyTargetGroupNotFoundFault(
                    inner,
                ) => Error::DBProxyTargetGroupNotFoundFault(inner),
                crate::error::AddTagsToResourceErrorKind::DBSnapshotNotFoundFault(inner) => {
                    Error::DBSnapshotNotFoundFault(inner)
                }
                crate::error::AddTagsToResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ApplyPendingMaintenanceActionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ApplyPendingMaintenanceActionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ApplyPendingMaintenanceActionErrorKind::InvalidDBClusterStateFault(inner) => Error::InvalidDBClusterStateFault(inner),
                crate::error::ApplyPendingMaintenanceActionErrorKind::InvalidDBInstanceStateFault(inner) => Error::InvalidDBInstanceStateFault(inner),
                crate::error::ApplyPendingMaintenanceActionErrorKind::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
                crate::error::ApplyPendingMaintenanceActionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AuthorizeDBSecurityGroupIngressError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::AuthorizeDBSecurityGroupIngressError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::AuthorizeDBSecurityGroupIngressErrorKind::AuthorizationAlreadyExistsFault(inner) => Error::AuthorizationAlreadyExistsFault(inner),
                crate::error::AuthorizeDBSecurityGroupIngressErrorKind::AuthorizationQuotaExceededFault(inner) => Error::AuthorizationQuotaExceededFault(inner),
                crate::error::AuthorizeDBSecurityGroupIngressErrorKind::DBSecurityGroupNotFoundFault(inner) => Error::DBSecurityGroupNotFoundFault(inner),
                crate::error::AuthorizeDBSecurityGroupIngressErrorKind::InvalidDBSecurityGroupStateFault(inner) => Error::InvalidDBSecurityGroupStateFault(inner),
                crate::error::AuthorizeDBSecurityGroupIngressErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::BacktrackDBClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::BacktrackDBClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::BacktrackDBClusterErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::BacktrackDBClusterErrorKind::InvalidDBClusterStateFault(inner) => {
                    Error::InvalidDBClusterStateFault(inner)
                }
                crate::error::BacktrackDBClusterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelExportTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CancelExportTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelExportTaskErrorKind::ExportTaskNotFoundFault(inner) => {
                    Error::ExportTaskNotFoundFault(inner)
                }
                crate::error::CancelExportTaskErrorKind::InvalidExportTaskStateFault(inner) => {
                    Error::InvalidExportTaskStateFault(inner)
                }
                crate::error::CancelExportTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CopyDBClusterParameterGroupError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CopyDBClusterParameterGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CopyDBClusterParameterGroupErrorKind::DBParameterGroupAlreadyExistsFault(inner) => Error::DBParameterGroupAlreadyExistsFault(inner),
                crate::error::CopyDBClusterParameterGroupErrorKind::DBParameterGroupNotFoundFault(inner) => Error::DBParameterGroupNotFoundFault(inner),
                crate::error::CopyDBClusterParameterGroupErrorKind::DBParameterGroupQuotaExceededFault(inner) => Error::DBParameterGroupQuotaExceededFault(inner),
                crate::error::CopyDBClusterParameterGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CopyDBClusterSnapshotError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CopyDBClusterSnapshotError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CopyDBClusterSnapshotErrorKind::DBClusterSnapshotAlreadyExistsFault(inner) => Error::DBClusterSnapshotAlreadyExistsFault(inner),
                crate::error::CopyDBClusterSnapshotErrorKind::DBClusterSnapshotNotFoundFault(inner) => Error::DBClusterSnapshotNotFoundFault(inner),
                crate::error::CopyDBClusterSnapshotErrorKind::InvalidDBClusterSnapshotStateFault(inner) => Error::InvalidDBClusterSnapshotStateFault(inner),
                crate::error::CopyDBClusterSnapshotErrorKind::InvalidDBClusterStateFault(inner) => Error::InvalidDBClusterStateFault(inner),
                crate::error::CopyDBClusterSnapshotErrorKind::KMSKeyNotAccessibleFault(inner) => Error::KMSKeyNotAccessibleFault(inner),
                crate::error::CopyDBClusterSnapshotErrorKind::SnapshotQuotaExceededFault(inner) => Error::SnapshotQuotaExceededFault(inner),
                crate::error::CopyDBClusterSnapshotErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CopyDBParameterGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CopyDBParameterGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CopyDBParameterGroupErrorKind::DBParameterGroupAlreadyExistsFault(
                    inner,
                ) => Error::DBParameterGroupAlreadyExistsFault(inner),
                crate::error::CopyDBParameterGroupErrorKind::DBParameterGroupNotFoundFault(
                    inner,
                ) => Error::DBParameterGroupNotFoundFault(inner),
                crate::error::CopyDBParameterGroupErrorKind::DBParameterGroupQuotaExceededFault(
                    inner,
                ) => Error::DBParameterGroupQuotaExceededFault(inner),
                crate::error::CopyDBParameterGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CopyDBSnapshotError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CopyDBSnapshotError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CopyDBSnapshotErrorKind::CustomAvailabilityZoneNotFoundFault(
                    inner,
                ) => Error::CustomAvailabilityZoneNotFoundFault(inner),
                crate::error::CopyDBSnapshotErrorKind::DBSnapshotAlreadyExistsFault(inner) => {
                    Error::DBSnapshotAlreadyExistsFault(inner)
                }
                crate::error::CopyDBSnapshotErrorKind::DBSnapshotNotFoundFault(inner) => {
                    Error::DBSnapshotNotFoundFault(inner)
                }
                crate::error::CopyDBSnapshotErrorKind::InvalidDBSnapshotStateFault(inner) => {
                    Error::InvalidDBSnapshotStateFault(inner)
                }
                crate::error::CopyDBSnapshotErrorKind::KMSKeyNotAccessibleFault(inner) => {
                    Error::KMSKeyNotAccessibleFault(inner)
                }
                crate::error::CopyDBSnapshotErrorKind::SnapshotQuotaExceededFault(inner) => {
                    Error::SnapshotQuotaExceededFault(inner)
                }
                crate::error::CopyDBSnapshotErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CopyOptionGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CopyOptionGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CopyOptionGroupErrorKind::OptionGroupAlreadyExistsFault(inner) => {
                    Error::OptionGroupAlreadyExistsFault(inner)
                }
                crate::error::CopyOptionGroupErrorKind::OptionGroupNotFoundFault(inner) => {
                    Error::OptionGroupNotFoundFault(inner)
                }
                crate::error::CopyOptionGroupErrorKind::OptionGroupQuotaExceededFault(inner) => {
                    Error::OptionGroupQuotaExceededFault(inner)
                }
                crate::error::CopyOptionGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateCustomAvailabilityZoneError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateCustomAvailabilityZoneError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateCustomAvailabilityZoneErrorKind::CustomAvailabilityZoneAlreadyExistsFault(inner) => Error::CustomAvailabilityZoneAlreadyExistsFault(inner),
                crate::error::CreateCustomAvailabilityZoneErrorKind::CustomAvailabilityZoneQuotaExceededFault(inner) => Error::CustomAvailabilityZoneQuotaExceededFault(inner),
                crate::error::CreateCustomAvailabilityZoneErrorKind::KMSKeyNotAccessibleFault(inner) => Error::KMSKeyNotAccessibleFault(inner),
                crate::error::CreateCustomAvailabilityZoneErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDBClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateDBClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDBClusterErrorKind::DBClusterAlreadyExistsFault(inner) => {
                    Error::DBClusterAlreadyExistsFault(inner)
                }
                crate::error::CreateDBClusterErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::CreateDBClusterErrorKind::DBClusterParameterGroupNotFoundFault(
                    inner,
                ) => Error::DBClusterParameterGroupNotFoundFault(inner),
                crate::error::CreateDBClusterErrorKind::DBClusterQuotaExceededFault(inner) => {
                    Error::DBClusterQuotaExceededFault(inner)
                }
                crate::error::CreateDBClusterErrorKind::DBInstanceNotFoundFault(inner) => {
                    Error::DBInstanceNotFoundFault(inner)
                }
                crate::error::CreateDBClusterErrorKind::DBSubnetGroupDoesNotCoverEnoughAZs(
                    inner,
                ) => Error::DBSubnetGroupDoesNotCoverEnoughAZs(inner),
                crate::error::CreateDBClusterErrorKind::DBSubnetGroupNotFoundFault(inner) => {
                    Error::DBSubnetGroupNotFoundFault(inner)
                }
                crate::error::CreateDBClusterErrorKind::DomainNotFoundFault(inner) => {
                    Error::DomainNotFoundFault(inner)
                }
                crate::error::CreateDBClusterErrorKind::GlobalClusterNotFoundFault(inner) => {
                    Error::GlobalClusterNotFoundFault(inner)
                }
                crate::error::CreateDBClusterErrorKind::InsufficientStorageClusterCapacityFault(
                    inner,
                ) => Error::InsufficientStorageClusterCapacityFault(inner),
                crate::error::CreateDBClusterErrorKind::InvalidDBClusterStateFault(inner) => {
                    Error::InvalidDBClusterStateFault(inner)
                }
                crate::error::CreateDBClusterErrorKind::InvalidDBInstanceStateFault(inner) => {
                    Error::InvalidDBInstanceStateFault(inner)
                }
                crate::error::CreateDBClusterErrorKind::InvalidDBSubnetGroupStateFault(inner) => {
                    Error::InvalidDBSubnetGroupStateFault(inner)
                }
                crate::error::CreateDBClusterErrorKind::InvalidGlobalClusterStateFault(inner) => {
                    Error::InvalidGlobalClusterStateFault(inner)
                }
                crate::error::CreateDBClusterErrorKind::InvalidSubnet(inner) => {
                    Error::InvalidSubnet(inner)
                }
                crate::error::CreateDBClusterErrorKind::InvalidVPCNetworkStateFault(inner) => {
                    Error::InvalidVPCNetworkStateFault(inner)
                }
                crate::error::CreateDBClusterErrorKind::KMSKeyNotAccessibleFault(inner) => {
                    Error::KMSKeyNotAccessibleFault(inner)
                }
                crate::error::CreateDBClusterErrorKind::StorageQuotaExceededFault(inner) => {
                    Error::StorageQuotaExceededFault(inner)
                }
                crate::error::CreateDBClusterErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDBClusterEndpointError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateDBClusterEndpointError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateDBClusterEndpointErrorKind::DBClusterEndpointAlreadyExistsFault(inner) => Error::DBClusterEndpointAlreadyExistsFault(inner),
                crate::error::CreateDBClusterEndpointErrorKind::DBClusterEndpointQuotaExceededFault(inner) => Error::DBClusterEndpointQuotaExceededFault(inner),
                crate::error::CreateDBClusterEndpointErrorKind::DBClusterNotFoundFault(inner) => Error::DBClusterNotFoundFault(inner),
                crate::error::CreateDBClusterEndpointErrorKind::DBInstanceNotFoundFault(inner) => Error::DBInstanceNotFoundFault(inner),
                crate::error::CreateDBClusterEndpointErrorKind::InvalidDBClusterStateFault(inner) => Error::InvalidDBClusterStateFault(inner),
                crate::error::CreateDBClusterEndpointErrorKind::InvalidDBInstanceStateFault(inner) => Error::InvalidDBInstanceStateFault(inner),
                crate::error::CreateDBClusterEndpointErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDBClusterParameterGroupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateDBClusterParameterGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateDBClusterParameterGroupErrorKind::DBParameterGroupAlreadyExistsFault(inner) => Error::DBParameterGroupAlreadyExistsFault(inner),
                crate::error::CreateDBClusterParameterGroupErrorKind::DBParameterGroupQuotaExceededFault(inner) => Error::DBParameterGroupQuotaExceededFault(inner),
                crate::error::CreateDBClusterParameterGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDBClusterSnapshotError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateDBClusterSnapshotError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateDBClusterSnapshotErrorKind::DBClusterNotFoundFault(inner) => Error::DBClusterNotFoundFault(inner),
                crate::error::CreateDBClusterSnapshotErrorKind::DBClusterSnapshotAlreadyExistsFault(inner) => Error::DBClusterSnapshotAlreadyExistsFault(inner),
                crate::error::CreateDBClusterSnapshotErrorKind::InvalidDBClusterSnapshotStateFault(inner) => Error::InvalidDBClusterSnapshotStateFault(inner),
                crate::error::CreateDBClusterSnapshotErrorKind::InvalidDBClusterStateFault(inner) => Error::InvalidDBClusterStateFault(inner),
                crate::error::CreateDBClusterSnapshotErrorKind::SnapshotQuotaExceededFault(inner) => Error::SnapshotQuotaExceededFault(inner),
                crate::error::CreateDBClusterSnapshotErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDBInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateDBInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDBInstanceErrorKind::AuthorizationNotFoundFault(inner) => {
                    Error::AuthorizationNotFoundFault(inner)
                }
                crate::error::CreateDBInstanceErrorKind::BackupPolicyNotFoundFault(inner) => {
                    Error::BackupPolicyNotFoundFault(inner)
                }
                crate::error::CreateDBInstanceErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::CreateDBInstanceErrorKind::DBInstanceAlreadyExistsFault(inner) => {
                    Error::DBInstanceAlreadyExistsFault(inner)
                }
                crate::error::CreateDBInstanceErrorKind::DBParameterGroupNotFoundFault(inner) => {
                    Error::DBParameterGroupNotFoundFault(inner)
                }
                crate::error::CreateDBInstanceErrorKind::DBSecurityGroupNotFoundFault(inner) => {
                    Error::DBSecurityGroupNotFoundFault(inner)
                }
                crate::error::CreateDBInstanceErrorKind::DBSubnetGroupDoesNotCoverEnoughAZs(
                    inner,
                ) => Error::DBSubnetGroupDoesNotCoverEnoughAZs(inner),
                crate::error::CreateDBInstanceErrorKind::DBSubnetGroupNotFoundFault(inner) => {
                    Error::DBSubnetGroupNotFoundFault(inner)
                }
                crate::error::CreateDBInstanceErrorKind::DomainNotFoundFault(inner) => {
                    Error::DomainNotFoundFault(inner)
                }
                crate::error::CreateDBInstanceErrorKind::InstanceQuotaExceededFault(inner) => {
                    Error::InstanceQuotaExceededFault(inner)
                }
                crate::error::CreateDBInstanceErrorKind::InsufficientDBInstanceCapacityFault(
                    inner,
                ) => Error::InsufficientDBInstanceCapacityFault(inner),
                crate::error::CreateDBInstanceErrorKind::InvalidDBClusterStateFault(inner) => {
                    Error::InvalidDBClusterStateFault(inner)
                }
                crate::error::CreateDBInstanceErrorKind::InvalidSubnet(inner) => {
                    Error::InvalidSubnet(inner)
                }
                crate::error::CreateDBInstanceErrorKind::InvalidVPCNetworkStateFault(inner) => {
                    Error::InvalidVPCNetworkStateFault(inner)
                }
                crate::error::CreateDBInstanceErrorKind::KMSKeyNotAccessibleFault(inner) => {
                    Error::KMSKeyNotAccessibleFault(inner)
                }
                crate::error::CreateDBInstanceErrorKind::OptionGroupNotFoundFault(inner) => {
                    Error::OptionGroupNotFoundFault(inner)
                }
                crate::error::CreateDBInstanceErrorKind::ProvisionedIopsNotAvailableInAZFault(
                    inner,
                ) => Error::ProvisionedIopsNotAvailableInAZFault(inner),
                crate::error::CreateDBInstanceErrorKind::StorageQuotaExceededFault(inner) => {
                    Error::StorageQuotaExceededFault(inner)
                }
                crate::error::CreateDBInstanceErrorKind::StorageTypeNotSupportedFault(inner) => {
                    Error::StorageTypeNotSupportedFault(inner)
                }
                crate::error::CreateDBInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDBInstanceReadReplicaError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateDBInstanceReadReplicaError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateDBInstanceReadReplicaErrorKind::DBInstanceAlreadyExistsFault(inner) => Error::DBInstanceAlreadyExistsFault(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::DBInstanceNotFoundFault(inner) => Error::DBInstanceNotFoundFault(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::DBParameterGroupNotFoundFault(inner) => Error::DBParameterGroupNotFoundFault(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::DBSecurityGroupNotFoundFault(inner) => Error::DBSecurityGroupNotFoundFault(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::DBSubnetGroupDoesNotCoverEnoughAZs(inner) => Error::DBSubnetGroupDoesNotCoverEnoughAZs(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::DBSubnetGroupNotAllowedFault(inner) => Error::DBSubnetGroupNotAllowedFault(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::DBSubnetGroupNotFoundFault(inner) => Error::DBSubnetGroupNotFoundFault(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::DomainNotFoundFault(inner) => Error::DomainNotFoundFault(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::InstanceQuotaExceededFault(inner) => Error::InstanceQuotaExceededFault(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::InsufficientDBInstanceCapacityFault(inner) => Error::InsufficientDBInstanceCapacityFault(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::InvalidDBInstanceStateFault(inner) => Error::InvalidDBInstanceStateFault(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::InvalidDBSubnetGroupFault(inner) => Error::InvalidDBSubnetGroupFault(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::InvalidVPCNetworkStateFault(inner) => Error::InvalidVPCNetworkStateFault(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::KMSKeyNotAccessibleFault(inner) => Error::KMSKeyNotAccessibleFault(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::ProvisionedIopsNotAvailableInAZFault(inner) => Error::ProvisionedIopsNotAvailableInAZFault(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::StorageTypeNotSupportedFault(inner) => Error::StorageTypeNotSupportedFault(inner),
                crate::error::CreateDBInstanceReadReplicaErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDBParameterGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateDBParameterGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateDBParameterGroupErrorKind::DBParameterGroupAlreadyExistsFault(inner) => Error::DBParameterGroupAlreadyExistsFault(inner),
                crate::error::CreateDBParameterGroupErrorKind::DBParameterGroupQuotaExceededFault(inner) => Error::DBParameterGroupQuotaExceededFault(inner),
                crate::error::CreateDBParameterGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDBProxyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateDBProxyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDBProxyErrorKind::DBProxyAlreadyExistsFault(inner) => {
                    Error::DBProxyAlreadyExistsFault(inner)
                }
                crate::error::CreateDBProxyErrorKind::DBProxyQuotaExceededFault(inner) => {
                    Error::DBProxyQuotaExceededFault(inner)
                }
                crate::error::CreateDBProxyErrorKind::InvalidSubnet(inner) => {
                    Error::InvalidSubnet(inner)
                }
                crate::error::CreateDBProxyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDBProxyEndpointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateDBProxyEndpointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDBProxyEndpointErrorKind::DBProxyEndpointAlreadyExistsFault(
                    inner,
                ) => Error::DBProxyEndpointAlreadyExistsFault(inner),
                crate::error::CreateDBProxyEndpointErrorKind::DBProxyEndpointQuotaExceededFault(
                    inner,
                ) => Error::DBProxyEndpointQuotaExceededFault(inner),
                crate::error::CreateDBProxyEndpointErrorKind::DBProxyNotFoundFault(inner) => {
                    Error::DBProxyNotFoundFault(inner)
                }
                crate::error::CreateDBProxyEndpointErrorKind::InvalidDBProxyStateFault(inner) => {
                    Error::InvalidDBProxyStateFault(inner)
                }
                crate::error::CreateDBProxyEndpointErrorKind::InvalidSubnet(inner) => {
                    Error::InvalidSubnet(inner)
                }
                crate::error::CreateDBProxyEndpointErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDBSecurityGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateDBSecurityGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDBSecurityGroupErrorKind::DBSecurityGroupAlreadyExistsFault(
                    inner,
                ) => Error::DBSecurityGroupAlreadyExistsFault(inner),
                crate::error::CreateDBSecurityGroupErrorKind::DBSecurityGroupNotSupportedFault(
                    inner,
                ) => Error::DBSecurityGroupNotSupportedFault(inner),
                crate::error::CreateDBSecurityGroupErrorKind::DBSecurityGroupQuotaExceededFault(
                    inner,
                ) => Error::DBSecurityGroupQuotaExceededFault(inner),
                crate::error::CreateDBSecurityGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDBSnapshotError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateDBSnapshotError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDBSnapshotErrorKind::DBInstanceNotFoundFault(inner) => {
                    Error::DBInstanceNotFoundFault(inner)
                }
                crate::error::CreateDBSnapshotErrorKind::DBSnapshotAlreadyExistsFault(inner) => {
                    Error::DBSnapshotAlreadyExistsFault(inner)
                }
                crate::error::CreateDBSnapshotErrorKind::InvalidDBInstanceStateFault(inner) => {
                    Error::InvalidDBInstanceStateFault(inner)
                }
                crate::error::CreateDBSnapshotErrorKind::SnapshotQuotaExceededFault(inner) => {
                    Error::SnapshotQuotaExceededFault(inner)
                }
                crate::error::CreateDBSnapshotErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDBSubnetGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateDBSubnetGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDBSubnetGroupErrorKind::DBSubnetGroupAlreadyExistsFault(
                    inner,
                ) => Error::DBSubnetGroupAlreadyExistsFault(inner),
                crate::error::CreateDBSubnetGroupErrorKind::DBSubnetGroupDoesNotCoverEnoughAZs(
                    inner,
                ) => Error::DBSubnetGroupDoesNotCoverEnoughAZs(inner),
                crate::error::CreateDBSubnetGroupErrorKind::DBSubnetGroupQuotaExceededFault(
                    inner,
                ) => Error::DBSubnetGroupQuotaExceededFault(inner),
                crate::error::CreateDBSubnetGroupErrorKind::DBSubnetQuotaExceededFault(inner) => {
                    Error::DBSubnetQuotaExceededFault(inner)
                }
                crate::error::CreateDBSubnetGroupErrorKind::InvalidSubnet(inner) => {
                    Error::InvalidSubnet(inner)
                }
                crate::error::CreateDBSubnetGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateEventSubscriptionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateEventSubscriptionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateEventSubscriptionErrorKind::EventSubscriptionQuotaExceededFault(inner) => Error::EventSubscriptionQuotaExceededFault(inner),
                crate::error::CreateEventSubscriptionErrorKind::SNSInvalidTopicFault(inner) => Error::SNSInvalidTopicFault(inner),
                crate::error::CreateEventSubscriptionErrorKind::SNSNoAuthorizationFault(inner) => Error::SNSNoAuthorizationFault(inner),
                crate::error::CreateEventSubscriptionErrorKind::SNSTopicArnNotFoundFault(inner) => Error::SNSTopicArnNotFoundFault(inner),
                crate::error::CreateEventSubscriptionErrorKind::SourceNotFoundFault(inner) => Error::SourceNotFoundFault(inner),
                crate::error::CreateEventSubscriptionErrorKind::SubscriptionAlreadyExistFault(inner) => Error::SubscriptionAlreadyExistFault(inner),
                crate::error::CreateEventSubscriptionErrorKind::SubscriptionCategoryNotFoundFault(inner) => Error::SubscriptionCategoryNotFoundFault(inner),
                crate::error::CreateEventSubscriptionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateGlobalClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateGlobalClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateGlobalClusterErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::CreateGlobalClusterErrorKind::GlobalClusterAlreadyExistsFault(
                    inner,
                ) => Error::GlobalClusterAlreadyExistsFault(inner),
                crate::error::CreateGlobalClusterErrorKind::GlobalClusterQuotaExceededFault(
                    inner,
                ) => Error::GlobalClusterQuotaExceededFault(inner),
                crate::error::CreateGlobalClusterErrorKind::InvalidDBClusterStateFault(inner) => {
                    Error::InvalidDBClusterStateFault(inner)
                }
                crate::error::CreateGlobalClusterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateOptionGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateOptionGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateOptionGroupErrorKind::OptionGroupAlreadyExistsFault(inner) => {
                    Error::OptionGroupAlreadyExistsFault(inner)
                }
                crate::error::CreateOptionGroupErrorKind::OptionGroupQuotaExceededFault(inner) => {
                    Error::OptionGroupQuotaExceededFault(inner)
                }
                crate::error::CreateOptionGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteCustomAvailabilityZoneError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteCustomAvailabilityZoneError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteCustomAvailabilityZoneErrorKind::CustomAvailabilityZoneNotFoundFault(inner) => Error::CustomAvailabilityZoneNotFoundFault(inner),
                crate::error::DeleteCustomAvailabilityZoneErrorKind::KMSKeyNotAccessibleFault(inner) => Error::KMSKeyNotAccessibleFault(inner),
                crate::error::DeleteCustomAvailabilityZoneErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDBClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteDBClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteDBClusterErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::DeleteDBClusterErrorKind::DBClusterSnapshotAlreadyExistsFault(
                    inner,
                ) => Error::DBClusterSnapshotAlreadyExistsFault(inner),
                crate::error::DeleteDBClusterErrorKind::InvalidDBClusterSnapshotStateFault(
                    inner,
                ) => Error::InvalidDBClusterSnapshotStateFault(inner),
                crate::error::DeleteDBClusterErrorKind::InvalidDBClusterStateFault(inner) => {
                    Error::InvalidDBClusterStateFault(inner)
                }
                crate::error::DeleteDBClusterErrorKind::SnapshotQuotaExceededFault(inner) => {
                    Error::SnapshotQuotaExceededFault(inner)
                }
                crate::error::DeleteDBClusterErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDBClusterEndpointError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteDBClusterEndpointError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteDBClusterEndpointErrorKind::DBClusterEndpointNotFoundFault(inner) => Error::DBClusterEndpointNotFoundFault(inner),
                crate::error::DeleteDBClusterEndpointErrorKind::InvalidDBClusterEndpointStateFault(inner) => Error::InvalidDBClusterEndpointStateFault(inner),
                crate::error::DeleteDBClusterEndpointErrorKind::InvalidDBClusterStateFault(inner) => Error::InvalidDBClusterStateFault(inner),
                crate::error::DeleteDBClusterEndpointErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDBClusterParameterGroupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteDBClusterParameterGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteDBClusterParameterGroupErrorKind::DBParameterGroupNotFoundFault(inner) => Error::DBParameterGroupNotFoundFault(inner),
                crate::error::DeleteDBClusterParameterGroupErrorKind::InvalidDBParameterGroupStateFault(inner) => Error::InvalidDBParameterGroupStateFault(inner),
                crate::error::DeleteDBClusterParameterGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDBClusterSnapshotError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteDBClusterSnapshotError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteDBClusterSnapshotErrorKind::DBClusterSnapshotNotFoundFault(inner) => Error::DBClusterSnapshotNotFoundFault(inner),
                crate::error::DeleteDBClusterSnapshotErrorKind::InvalidDBClusterSnapshotStateFault(inner) => Error::InvalidDBClusterSnapshotStateFault(inner),
                crate::error::DeleteDBClusterSnapshotErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDBInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteDBInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteDBInstanceErrorKind::DBInstanceAutomatedBackupQuotaExceededFault(inner) => Error::DBInstanceAutomatedBackupQuotaExceededFault(inner),
                crate::error::DeleteDBInstanceErrorKind::DBInstanceNotFoundFault(inner) => Error::DBInstanceNotFoundFault(inner),
                crate::error::DeleteDBInstanceErrorKind::DBSnapshotAlreadyExistsFault(inner) => Error::DBSnapshotAlreadyExistsFault(inner),
                crate::error::DeleteDBInstanceErrorKind::InvalidDBClusterStateFault(inner) => Error::InvalidDBClusterStateFault(inner),
                crate::error::DeleteDBInstanceErrorKind::InvalidDBInstanceStateFault(inner) => Error::InvalidDBInstanceStateFault(inner),
                crate::error::DeleteDBInstanceErrorKind::SnapshotQuotaExceededFault(inner) => Error::SnapshotQuotaExceededFault(inner),
                crate::error::DeleteDBInstanceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDBInstanceAutomatedBackupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteDBInstanceAutomatedBackupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteDBInstanceAutomatedBackupErrorKind::DBInstanceAutomatedBackupNotFoundFault(inner) => Error::DBInstanceAutomatedBackupNotFoundFault(inner),
                crate::error::DeleteDBInstanceAutomatedBackupErrorKind::InvalidDBInstanceAutomatedBackupStateFault(inner) => Error::InvalidDBInstanceAutomatedBackupStateFault(inner),
                crate::error::DeleteDBInstanceAutomatedBackupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDBParameterGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteDBParameterGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteDBParameterGroupErrorKind::DBParameterGroupNotFoundFault(inner) => Error::DBParameterGroupNotFoundFault(inner),
                crate::error::DeleteDBParameterGroupErrorKind::InvalidDBParameterGroupStateFault(inner) => Error::InvalidDBParameterGroupStateFault(inner),
                crate::error::DeleteDBParameterGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDBProxyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteDBProxyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteDBProxyErrorKind::DBProxyNotFoundFault(inner) => {
                    Error::DBProxyNotFoundFault(inner)
                }
                crate::error::DeleteDBProxyErrorKind::InvalidDBProxyStateFault(inner) => {
                    Error::InvalidDBProxyStateFault(inner)
                }
                crate::error::DeleteDBProxyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDBProxyEndpointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteDBProxyEndpointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteDBProxyEndpointErrorKind::DBProxyEndpointNotFoundFault(
                    inner,
                ) => Error::DBProxyEndpointNotFoundFault(inner),
                crate::error::DeleteDBProxyEndpointErrorKind::InvalidDBProxyEndpointStateFault(
                    inner,
                ) => Error::InvalidDBProxyEndpointStateFault(inner),
                crate::error::DeleteDBProxyEndpointErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDBSecurityGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteDBSecurityGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteDBSecurityGroupErrorKind::DBSecurityGroupNotFoundFault(
                    inner,
                ) => Error::DBSecurityGroupNotFoundFault(inner),
                crate::error::DeleteDBSecurityGroupErrorKind::InvalidDBSecurityGroupStateFault(
                    inner,
                ) => Error::InvalidDBSecurityGroupStateFault(inner),
                crate::error::DeleteDBSecurityGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDBSnapshotError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteDBSnapshotError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteDBSnapshotErrorKind::DBSnapshotNotFoundFault(inner) => {
                    Error::DBSnapshotNotFoundFault(inner)
                }
                crate::error::DeleteDBSnapshotErrorKind::InvalidDBSnapshotStateFault(inner) => {
                    Error::InvalidDBSnapshotStateFault(inner)
                }
                crate::error::DeleteDBSnapshotErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDBSubnetGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteDBSubnetGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteDBSubnetGroupErrorKind::DBSubnetGroupNotFoundFault(inner) => {
                    Error::DBSubnetGroupNotFoundFault(inner)
                }
                crate::error::DeleteDBSubnetGroupErrorKind::InvalidDBSubnetGroupStateFault(
                    inner,
                ) => Error::InvalidDBSubnetGroupStateFault(inner),
                crate::error::DeleteDBSubnetGroupErrorKind::InvalidDBSubnetStateFault(inner) => {
                    Error::InvalidDBSubnetStateFault(inner)
                }
                crate::error::DeleteDBSubnetGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteEventSubscriptionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteEventSubscriptionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteEventSubscriptionErrorKind::InvalidEventSubscriptionStateFault(inner) => Error::InvalidEventSubscriptionStateFault(inner),
                crate::error::DeleteEventSubscriptionErrorKind::SubscriptionNotFoundFault(inner) => Error::SubscriptionNotFoundFault(inner),
                crate::error::DeleteEventSubscriptionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteGlobalClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteGlobalClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteGlobalClusterErrorKind::GlobalClusterNotFoundFault(inner) => {
                    Error::GlobalClusterNotFoundFault(inner)
                }
                crate::error::DeleteGlobalClusterErrorKind::InvalidGlobalClusterStateFault(
                    inner,
                ) => Error::InvalidGlobalClusterStateFault(inner),
                crate::error::DeleteGlobalClusterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteInstallationMediaError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteInstallationMediaError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteInstallationMediaErrorKind::InstallationMediaNotFoundFault(
                    inner,
                ) => Error::InstallationMediaNotFoundFault(inner),
                crate::error::DeleteInstallationMediaErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteOptionGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteOptionGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteOptionGroupErrorKind::InvalidOptionGroupStateFault(inner) => {
                    Error::InvalidOptionGroupStateFault(inner)
                }
                crate::error::DeleteOptionGroupErrorKind::OptionGroupNotFoundFault(inner) => {
                    Error::OptionGroupNotFoundFault(inner)
                }
                crate::error::DeleteOptionGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeregisterDBProxyTargetsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeregisterDBProxyTargetsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeregisterDBProxyTargetsErrorKind::DBProxyNotFoundFault(inner) => Error::DBProxyNotFoundFault(inner),
                crate::error::DeregisterDBProxyTargetsErrorKind::DBProxyTargetGroupNotFoundFault(inner) => Error::DBProxyTargetGroupNotFoundFault(inner),
                crate::error::DeregisterDBProxyTargetsErrorKind::DBProxyTargetNotFoundFault(inner) => Error::DBProxyTargetNotFoundFault(inner),
                crate::error::DeregisterDBProxyTargetsErrorKind::InvalidDBProxyStateFault(inner) => Error::InvalidDBProxyStateFault(inner),
                crate::error::DeregisterDBProxyTargetsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAccountAttributesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeAccountAttributesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAccountAttributesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCertificatesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeCertificatesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeCertificatesErrorKind::CertificateNotFoundFault(inner) => {
                    Error::CertificateNotFoundFault(inner)
                }
                crate::error::DescribeCertificatesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCustomAvailabilityZonesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeCustomAvailabilityZonesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeCustomAvailabilityZonesErrorKind::CustomAvailabilityZoneNotFoundFault(inner) => Error::CustomAvailabilityZoneNotFoundFault(inner),
                crate::error::DescribeCustomAvailabilityZonesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBClusterBacktracksError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeDBClusterBacktracksError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeDBClusterBacktracksErrorKind::DBClusterBacktrackNotFoundFault(inner) => Error::DBClusterBacktrackNotFoundFault(inner),
                crate::error::DescribeDBClusterBacktracksErrorKind::DBClusterNotFoundFault(inner) => Error::DBClusterNotFoundFault(inner),
                crate::error::DescribeDBClusterBacktracksErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBClusterEndpointsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeDBClusterEndpointsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDBClusterEndpointsErrorKind::DBClusterNotFoundFault(
                    inner,
                ) => Error::DBClusterNotFoundFault(inner),
                crate::error::DescribeDBClusterEndpointsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBClusterParameterGroupsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeDBClusterParameterGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeDBClusterParameterGroupsErrorKind::DBParameterGroupNotFoundFault(inner) => Error::DBParameterGroupNotFoundFault(inner),
                crate::error::DescribeDBClusterParameterGroupsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBClusterParametersError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeDBClusterParametersError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeDBClusterParametersErrorKind::DBParameterGroupNotFoundFault(inner) => Error::DBParameterGroupNotFoundFault(inner),
                crate::error::DescribeDBClusterParametersErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBClustersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeDBClustersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDBClustersErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::DescribeDBClustersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBClusterSnapshotAttributesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeDBClusterSnapshotAttributesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeDBClusterSnapshotAttributesErrorKind::DBClusterSnapshotNotFoundFault(inner) => Error::DBClusterSnapshotNotFoundFault(inner),
                crate::error::DescribeDBClusterSnapshotAttributesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBClusterSnapshotsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeDBClusterSnapshotsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeDBClusterSnapshotsErrorKind::DBClusterSnapshotNotFoundFault(inner) => Error::DBClusterSnapshotNotFoundFault(inner),
                crate::error::DescribeDBClusterSnapshotsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBEngineVersionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeDBEngineVersionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDBEngineVersionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBInstanceAutomatedBackupsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeDBInstanceAutomatedBackupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeDBInstanceAutomatedBackupsErrorKind::DBInstanceAutomatedBackupNotFoundFault(inner) => Error::DBInstanceAutomatedBackupNotFoundFault(inner),
                crate::error::DescribeDBInstanceAutomatedBackupsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeDBInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDBInstancesErrorKind::DBInstanceNotFoundFault(inner) => {
                    Error::DBInstanceNotFoundFault(inner)
                }
                crate::error::DescribeDBInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBLogFilesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeDBLogFilesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDBLogFilesErrorKind::DBInstanceNotFoundFault(inner) => {
                    Error::DBInstanceNotFoundFault(inner)
                }
                crate::error::DescribeDBLogFilesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBParameterGroupsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeDBParameterGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDBParameterGroupsErrorKind::DBParameterGroupNotFoundFault(
                    inner,
                ) => Error::DBParameterGroupNotFoundFault(inner),
                crate::error::DescribeDBParameterGroupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBParametersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeDBParametersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDBParametersErrorKind::DBParameterGroupNotFoundFault(
                    inner,
                ) => Error::DBParameterGroupNotFoundFault(inner),
                crate::error::DescribeDBParametersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBProxiesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeDBProxiesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDBProxiesErrorKind::DBProxyNotFoundFault(inner) => {
                    Error::DBProxyNotFoundFault(inner)
                }
                crate::error::DescribeDBProxiesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBProxyEndpointsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeDBProxyEndpointsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDBProxyEndpointsErrorKind::DBProxyEndpointNotFoundFault(
                    inner,
                ) => Error::DBProxyEndpointNotFoundFault(inner),
                crate::error::DescribeDBProxyEndpointsErrorKind::DBProxyNotFoundFault(inner) => {
                    Error::DBProxyNotFoundFault(inner)
                }
                crate::error::DescribeDBProxyEndpointsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBProxyTargetGroupsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeDBProxyTargetGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeDBProxyTargetGroupsErrorKind::DBProxyNotFoundFault(inner) => Error::DBProxyNotFoundFault(inner),
                crate::error::DescribeDBProxyTargetGroupsErrorKind::DBProxyTargetGroupNotFoundFault(inner) => Error::DBProxyTargetGroupNotFoundFault(inner),
                crate::error::DescribeDBProxyTargetGroupsErrorKind::InvalidDBProxyStateFault(inner) => Error::InvalidDBProxyStateFault(inner),
                crate::error::DescribeDBProxyTargetGroupsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBProxyTargetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeDBProxyTargetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDBProxyTargetsErrorKind::DBProxyNotFoundFault(inner) => {
                    Error::DBProxyNotFoundFault(inner)
                }
                crate::error::DescribeDBProxyTargetsErrorKind::DBProxyTargetGroupNotFoundFault(
                    inner,
                ) => Error::DBProxyTargetGroupNotFoundFault(inner),
                crate::error::DescribeDBProxyTargetsErrorKind::DBProxyTargetNotFoundFault(
                    inner,
                ) => Error::DBProxyTargetNotFoundFault(inner),
                crate::error::DescribeDBProxyTargetsErrorKind::InvalidDBProxyStateFault(inner) => {
                    Error::InvalidDBProxyStateFault(inner)
                }
                crate::error::DescribeDBProxyTargetsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBSecurityGroupsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeDBSecurityGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDBSecurityGroupsErrorKind::DBSecurityGroupNotFoundFault(
                    inner,
                ) => Error::DBSecurityGroupNotFoundFault(inner),
                crate::error::DescribeDBSecurityGroupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBSnapshotAttributesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeDBSnapshotAttributesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDBSnapshotAttributesErrorKind::DBSnapshotNotFoundFault(
                    inner,
                ) => Error::DBSnapshotNotFoundFault(inner),
                crate::error::DescribeDBSnapshotAttributesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBSnapshotsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeDBSnapshotsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDBSnapshotsErrorKind::DBSnapshotNotFoundFault(inner) => {
                    Error::DBSnapshotNotFoundFault(inner)
                }
                crate::error::DescribeDBSnapshotsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDBSubnetGroupsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeDBSubnetGroupsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDBSubnetGroupsErrorKind::DBSubnetGroupNotFoundFault(
                    inner,
                ) => Error::DBSubnetGroupNotFoundFault(inner),
                crate::error::DescribeDBSubnetGroupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEngineDefaultClusterParametersError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeEngineDefaultClusterParametersError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEngineDefaultClusterParametersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEngineDefaultParametersError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeEngineDefaultParametersError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEngineDefaultParametersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEventCategoriesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeEventCategoriesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEventCategoriesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEventsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeEventsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEventsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEventSubscriptionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeEventSubscriptionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEventSubscriptionsErrorKind::SubscriptionNotFoundFault(
                    inner,
                ) => Error::SubscriptionNotFoundFault(inner),
                crate::error::DescribeEventSubscriptionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeExportTasksError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeExportTasksError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeExportTasksErrorKind::ExportTaskNotFoundFault(inner) => {
                    Error::ExportTaskNotFoundFault(inner)
                }
                crate::error::DescribeExportTasksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeGlobalClustersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeGlobalClustersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeGlobalClustersErrorKind::GlobalClusterNotFoundFault(
                    inner,
                ) => Error::GlobalClusterNotFoundFault(inner),
                crate::error::DescribeGlobalClustersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeInstallationMediaError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeInstallationMediaError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeInstallationMediaErrorKind::InstallationMediaNotFoundFault(inner) => Error::InstallationMediaNotFoundFault(inner),
                crate::error::DescribeInstallationMediaErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeOptionGroupOptionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeOptionGroupOptionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeOptionGroupOptionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeOptionGroupsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeOptionGroupsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeOptionGroupsErrorKind::OptionGroupNotFoundFault(inner) => {
                    Error::OptionGroupNotFoundFault(inner)
                }
                crate::error::DescribeOptionGroupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeOrderableDBInstanceOptionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeOrderableDBInstanceOptionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeOrderableDBInstanceOptionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribePendingMaintenanceActionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribePendingMaintenanceActionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribePendingMaintenanceActionsErrorKind::ResourceNotFoundFault(
                    inner,
                ) => Error::ResourceNotFoundFault(inner),
                crate::error::DescribePendingMaintenanceActionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReservedDBInstancesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeReservedDBInstancesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeReservedDBInstancesErrorKind::ReservedDBInstanceNotFoundFault(inner) => Error::ReservedDBInstanceNotFoundFault(inner),
                crate::error::DescribeReservedDBInstancesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReservedDBInstancesOfferingsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeReservedDBInstancesOfferingsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeReservedDBInstancesOfferingsErrorKind::ReservedDBInstancesOfferingNotFoundFault(inner) => Error::ReservedDBInstancesOfferingNotFoundFault(inner),
                crate::error::DescribeReservedDBInstancesOfferingsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeSourceRegionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeSourceRegionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeSourceRegionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeValidDBInstanceModificationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeValidDBInstanceModificationsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeValidDBInstanceModificationsErrorKind::DBInstanceNotFoundFault(inner) => Error::DBInstanceNotFoundFault(inner),
                crate::error::DescribeValidDBInstanceModificationsErrorKind::InvalidDBInstanceStateFault(inner) => Error::InvalidDBInstanceStateFault(inner),
                crate::error::DescribeValidDBInstanceModificationsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DownloadDBLogFilePortionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DownloadDBLogFilePortionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DownloadDBLogFilePortionErrorKind::DBInstanceNotFoundFault(inner) => {
                    Error::DBInstanceNotFoundFault(inner)
                }
                crate::error::DownloadDBLogFilePortionErrorKind::DBLogFileNotFoundFault(inner) => {
                    Error::DBLogFileNotFoundFault(inner)
                }
                crate::error::DownloadDBLogFilePortionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::FailoverDBClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::FailoverDBClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::FailoverDBClusterErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::FailoverDBClusterErrorKind::InvalidDBClusterStateFault(inner) => {
                    Error::InvalidDBClusterStateFault(inner)
                }
                crate::error::FailoverDBClusterErrorKind::InvalidDBInstanceStateFault(inner) => {
                    Error::InvalidDBInstanceStateFault(inner)
                }
                crate::error::FailoverDBClusterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::FailoverGlobalClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::FailoverGlobalClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::FailoverGlobalClusterErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::FailoverGlobalClusterErrorKind::GlobalClusterNotFoundFault(inner) => {
                    Error::GlobalClusterNotFoundFault(inner)
                }
                crate::error::FailoverGlobalClusterErrorKind::InvalidDBClusterStateFault(inner) => {
                    Error::InvalidDBClusterStateFault(inner)
                }
                crate::error::FailoverGlobalClusterErrorKind::InvalidGlobalClusterStateFault(
                    inner,
                ) => Error::InvalidGlobalClusterStateFault(inner),
                crate::error::FailoverGlobalClusterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ImportInstallationMediaError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ImportInstallationMediaError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ImportInstallationMediaErrorKind::CustomAvailabilityZoneNotFoundFault(inner) => Error::CustomAvailabilityZoneNotFoundFault(inner),
                crate::error::ImportInstallationMediaErrorKind::InstallationMediaAlreadyExistsFault(inner) => Error::InstallationMediaAlreadyExistsFault(inner),
                crate::error::ImportInstallationMediaErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::ListTagsForResourceErrorKind::DBInstanceNotFoundFault(inner) => {
                    Error::DBInstanceNotFoundFault(inner)
                }
                crate::error::ListTagsForResourceErrorKind::DBProxyNotFoundFault(inner) => {
                    Error::DBProxyNotFoundFault(inner)
                }
                crate::error::ListTagsForResourceErrorKind::DBProxyTargetGroupNotFoundFault(
                    inner,
                ) => Error::DBProxyTargetGroupNotFoundFault(inner),
                crate::error::ListTagsForResourceErrorKind::DBSnapshotNotFoundFault(inner) => {
                    Error::DBSnapshotNotFoundFault(inner)
                }
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyCertificatesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyCertificatesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyCertificatesErrorKind::CertificateNotFoundFault(inner) => {
                    Error::CertificateNotFoundFault(inner)
                }
                crate::error::ModifyCertificatesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyCurrentDBClusterCapacityError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyCurrentDBClusterCapacityError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ModifyCurrentDBClusterCapacityErrorKind::DBClusterNotFoundFault(inner) => Error::DBClusterNotFoundFault(inner),
                crate::error::ModifyCurrentDBClusterCapacityErrorKind::InvalidDBClusterCapacityFault(inner) => Error::InvalidDBClusterCapacityFault(inner),
                crate::error::ModifyCurrentDBClusterCapacityErrorKind::InvalidDBClusterStateFault(inner) => Error::InvalidDBClusterStateFault(inner),
                crate::error::ModifyCurrentDBClusterCapacityErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyDBClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyDBClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyDBClusterErrorKind::DBClusterAlreadyExistsFault(inner) => {
                    Error::DBClusterAlreadyExistsFault(inner)
                }
                crate::error::ModifyDBClusterErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::ModifyDBClusterErrorKind::DBClusterParameterGroupNotFoundFault(
                    inner,
                ) => Error::DBClusterParameterGroupNotFoundFault(inner),
                crate::error::ModifyDBClusterErrorKind::DBSubnetGroupNotFoundFault(inner) => {
                    Error::DBSubnetGroupNotFoundFault(inner)
                }
                crate::error::ModifyDBClusterErrorKind::DomainNotFoundFault(inner) => {
                    Error::DomainNotFoundFault(inner)
                }
                crate::error::ModifyDBClusterErrorKind::InvalidDBClusterStateFault(inner) => {
                    Error::InvalidDBClusterStateFault(inner)
                }
                crate::error::ModifyDBClusterErrorKind::InvalidDBInstanceStateFault(inner) => {
                    Error::InvalidDBInstanceStateFault(inner)
                }
                crate::error::ModifyDBClusterErrorKind::InvalidDBSecurityGroupStateFault(inner) => {
                    Error::InvalidDBSecurityGroupStateFault(inner)
                }
                crate::error::ModifyDBClusterErrorKind::InvalidDBSubnetGroupStateFault(inner) => {
                    Error::InvalidDBSubnetGroupStateFault(inner)
                }
                crate::error::ModifyDBClusterErrorKind::InvalidSubnet(inner) => {
                    Error::InvalidSubnet(inner)
                }
                crate::error::ModifyDBClusterErrorKind::InvalidVPCNetworkStateFault(inner) => {
                    Error::InvalidVPCNetworkStateFault(inner)
                }
                crate::error::ModifyDBClusterErrorKind::StorageQuotaExceededFault(inner) => {
                    Error::StorageQuotaExceededFault(inner)
                }
                crate::error::ModifyDBClusterErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyDBClusterEndpointError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyDBClusterEndpointError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ModifyDBClusterEndpointErrorKind::DBClusterEndpointNotFoundFault(inner) => Error::DBClusterEndpointNotFoundFault(inner),
                crate::error::ModifyDBClusterEndpointErrorKind::DBInstanceNotFoundFault(inner) => Error::DBInstanceNotFoundFault(inner),
                crate::error::ModifyDBClusterEndpointErrorKind::InvalidDBClusterEndpointStateFault(inner) => Error::InvalidDBClusterEndpointStateFault(inner),
                crate::error::ModifyDBClusterEndpointErrorKind::InvalidDBClusterStateFault(inner) => Error::InvalidDBClusterStateFault(inner),
                crate::error::ModifyDBClusterEndpointErrorKind::InvalidDBInstanceStateFault(inner) => Error::InvalidDBInstanceStateFault(inner),
                crate::error::ModifyDBClusterEndpointErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyDBClusterParameterGroupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyDBClusterParameterGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ModifyDBClusterParameterGroupErrorKind::DBParameterGroupNotFoundFault(inner) => Error::DBParameterGroupNotFoundFault(inner),
                crate::error::ModifyDBClusterParameterGroupErrorKind::InvalidDBParameterGroupStateFault(inner) => Error::InvalidDBParameterGroupStateFault(inner),
                crate::error::ModifyDBClusterParameterGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyDBClusterSnapshotAttributeError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyDBClusterSnapshotAttributeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ModifyDBClusterSnapshotAttributeErrorKind::DBClusterSnapshotNotFoundFault(inner) => Error::DBClusterSnapshotNotFoundFault(inner),
                crate::error::ModifyDBClusterSnapshotAttributeErrorKind::InvalidDBClusterSnapshotStateFault(inner) => Error::InvalidDBClusterSnapshotStateFault(inner),
                crate::error::ModifyDBClusterSnapshotAttributeErrorKind::SharedSnapshotQuotaExceededFault(inner) => Error::SharedSnapshotQuotaExceededFault(inner),
                crate::error::ModifyDBClusterSnapshotAttributeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyDBInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyDBInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyDBInstanceErrorKind::AuthorizationNotFoundFault(inner) => {
                    Error::AuthorizationNotFoundFault(inner)
                }
                crate::error::ModifyDBInstanceErrorKind::BackupPolicyNotFoundFault(inner) => {
                    Error::BackupPolicyNotFoundFault(inner)
                }
                crate::error::ModifyDBInstanceErrorKind::CertificateNotFoundFault(inner) => {
                    Error::CertificateNotFoundFault(inner)
                }
                crate::error::ModifyDBInstanceErrorKind::DBInstanceAlreadyExistsFault(inner) => {
                    Error::DBInstanceAlreadyExistsFault(inner)
                }
                crate::error::ModifyDBInstanceErrorKind::DBInstanceNotFoundFault(inner) => {
                    Error::DBInstanceNotFoundFault(inner)
                }
                crate::error::ModifyDBInstanceErrorKind::DBParameterGroupNotFoundFault(inner) => {
                    Error::DBParameterGroupNotFoundFault(inner)
                }
                crate::error::ModifyDBInstanceErrorKind::DBSecurityGroupNotFoundFault(inner) => {
                    Error::DBSecurityGroupNotFoundFault(inner)
                }
                crate::error::ModifyDBInstanceErrorKind::DBUpgradeDependencyFailureFault(inner) => {
                    Error::DBUpgradeDependencyFailureFault(inner)
                }
                crate::error::ModifyDBInstanceErrorKind::DomainNotFoundFault(inner) => {
                    Error::DomainNotFoundFault(inner)
                }
                crate::error::ModifyDBInstanceErrorKind::InsufficientDBInstanceCapacityFault(
                    inner,
                ) => Error::InsufficientDBInstanceCapacityFault(inner),
                crate::error::ModifyDBInstanceErrorKind::InvalidDBClusterStateFault(inner) => {
                    Error::InvalidDBClusterStateFault(inner)
                }
                crate::error::ModifyDBInstanceErrorKind::InvalidDBInstanceStateFault(inner) => {
                    Error::InvalidDBInstanceStateFault(inner)
                }
                crate::error::ModifyDBInstanceErrorKind::InvalidDBSecurityGroupStateFault(
                    inner,
                ) => Error::InvalidDBSecurityGroupStateFault(inner),
                crate::error::ModifyDBInstanceErrorKind::InvalidVPCNetworkStateFault(inner) => {
                    Error::InvalidVPCNetworkStateFault(inner)
                }
                crate::error::ModifyDBInstanceErrorKind::KMSKeyNotAccessibleFault(inner) => {
                    Error::KMSKeyNotAccessibleFault(inner)
                }
                crate::error::ModifyDBInstanceErrorKind::OptionGroupNotFoundFault(inner) => {
                    Error::OptionGroupNotFoundFault(inner)
                }
                crate::error::ModifyDBInstanceErrorKind::ProvisionedIopsNotAvailableInAZFault(
                    inner,
                ) => Error::ProvisionedIopsNotAvailableInAZFault(inner),
                crate::error::ModifyDBInstanceErrorKind::StorageQuotaExceededFault(inner) => {
                    Error::StorageQuotaExceededFault(inner)
                }
                crate::error::ModifyDBInstanceErrorKind::StorageTypeNotSupportedFault(inner) => {
                    Error::StorageTypeNotSupportedFault(inner)
                }
                crate::error::ModifyDBInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyDBParameterGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyDBParameterGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ModifyDBParameterGroupErrorKind::DBParameterGroupNotFoundFault(inner) => Error::DBParameterGroupNotFoundFault(inner),
                crate::error::ModifyDBParameterGroupErrorKind::InvalidDBParameterGroupStateFault(inner) => Error::InvalidDBParameterGroupStateFault(inner),
                crate::error::ModifyDBParameterGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyDBProxyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyDBProxyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyDBProxyErrorKind::DBProxyAlreadyExistsFault(inner) => {
                    Error::DBProxyAlreadyExistsFault(inner)
                }
                crate::error::ModifyDBProxyErrorKind::DBProxyNotFoundFault(inner) => {
                    Error::DBProxyNotFoundFault(inner)
                }
                crate::error::ModifyDBProxyErrorKind::InvalidDBProxyStateFault(inner) => {
                    Error::InvalidDBProxyStateFault(inner)
                }
                crate::error::ModifyDBProxyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyDBProxyEndpointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyDBProxyEndpointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyDBProxyEndpointErrorKind::DBProxyEndpointAlreadyExistsFault(
                    inner,
                ) => Error::DBProxyEndpointAlreadyExistsFault(inner),
                crate::error::ModifyDBProxyEndpointErrorKind::DBProxyEndpointNotFoundFault(
                    inner,
                ) => Error::DBProxyEndpointNotFoundFault(inner),
                crate::error::ModifyDBProxyEndpointErrorKind::InvalidDBProxyEndpointStateFault(
                    inner,
                ) => Error::InvalidDBProxyEndpointStateFault(inner),
                crate::error::ModifyDBProxyEndpointErrorKind::InvalidDBProxyStateFault(inner) => {
                    Error::InvalidDBProxyStateFault(inner)
                }
                crate::error::ModifyDBProxyEndpointErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyDBProxyTargetGroupError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyDBProxyTargetGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ModifyDBProxyTargetGroupErrorKind::DBProxyNotFoundFault(inner) => Error::DBProxyNotFoundFault(inner),
                crate::error::ModifyDBProxyTargetGroupErrorKind::DBProxyTargetGroupNotFoundFault(inner) => Error::DBProxyTargetGroupNotFoundFault(inner),
                crate::error::ModifyDBProxyTargetGroupErrorKind::InvalidDBProxyStateFault(inner) => Error::InvalidDBProxyStateFault(inner),
                crate::error::ModifyDBProxyTargetGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyDBSnapshotError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyDBSnapshotError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyDBSnapshotErrorKind::DBSnapshotNotFoundFault(inner) => {
                    Error::DBSnapshotNotFoundFault(inner)
                }
                crate::error::ModifyDBSnapshotErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyDBSnapshotAttributeError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyDBSnapshotAttributeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ModifyDBSnapshotAttributeErrorKind::DBSnapshotNotFoundFault(inner) => Error::DBSnapshotNotFoundFault(inner),
                crate::error::ModifyDBSnapshotAttributeErrorKind::InvalidDBSnapshotStateFault(inner) => Error::InvalidDBSnapshotStateFault(inner),
                crate::error::ModifyDBSnapshotAttributeErrorKind::SharedSnapshotQuotaExceededFault(inner) => Error::SharedSnapshotQuotaExceededFault(inner),
                crate::error::ModifyDBSnapshotAttributeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyDBSubnetGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyDBSubnetGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyDBSubnetGroupErrorKind::DBSubnetGroupDoesNotCoverEnoughAZs(
                    inner,
                ) => Error::DBSubnetGroupDoesNotCoverEnoughAZs(inner),
                crate::error::ModifyDBSubnetGroupErrorKind::DBSubnetGroupNotFoundFault(inner) => {
                    Error::DBSubnetGroupNotFoundFault(inner)
                }
                crate::error::ModifyDBSubnetGroupErrorKind::DBSubnetQuotaExceededFault(inner) => {
                    Error::DBSubnetQuotaExceededFault(inner)
                }
                crate::error::ModifyDBSubnetGroupErrorKind::InvalidSubnet(inner) => {
                    Error::InvalidSubnet(inner)
                }
                crate::error::ModifyDBSubnetGroupErrorKind::SubnetAlreadyInUse(inner) => {
                    Error::SubnetAlreadyInUse(inner)
                }
                crate::error::ModifyDBSubnetGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyEventSubscriptionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyEventSubscriptionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ModifyEventSubscriptionErrorKind::EventSubscriptionQuotaExceededFault(inner) => Error::EventSubscriptionQuotaExceededFault(inner),
                crate::error::ModifyEventSubscriptionErrorKind::SNSInvalidTopicFault(inner) => Error::SNSInvalidTopicFault(inner),
                crate::error::ModifyEventSubscriptionErrorKind::SNSNoAuthorizationFault(inner) => Error::SNSNoAuthorizationFault(inner),
                crate::error::ModifyEventSubscriptionErrorKind::SNSTopicArnNotFoundFault(inner) => Error::SNSTopicArnNotFoundFault(inner),
                crate::error::ModifyEventSubscriptionErrorKind::SubscriptionCategoryNotFoundFault(inner) => Error::SubscriptionCategoryNotFoundFault(inner),
                crate::error::ModifyEventSubscriptionErrorKind::SubscriptionNotFoundFault(inner) => Error::SubscriptionNotFoundFault(inner),
                crate::error::ModifyEventSubscriptionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyGlobalClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyGlobalClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyGlobalClusterErrorKind::GlobalClusterNotFoundFault(inner) => {
                    Error::GlobalClusterNotFoundFault(inner)
                }
                crate::error::ModifyGlobalClusterErrorKind::InvalidDBClusterStateFault(inner) => {
                    Error::InvalidDBClusterStateFault(inner)
                }
                crate::error::ModifyGlobalClusterErrorKind::InvalidDBInstanceStateFault(inner) => {
                    Error::InvalidDBInstanceStateFault(inner)
                }
                crate::error::ModifyGlobalClusterErrorKind::InvalidGlobalClusterStateFault(
                    inner,
                ) => Error::InvalidGlobalClusterStateFault(inner),
                crate::error::ModifyGlobalClusterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyOptionGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyOptionGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyOptionGroupErrorKind::InvalidOptionGroupStateFault(inner) => {
                    Error::InvalidOptionGroupStateFault(inner)
                }
                crate::error::ModifyOptionGroupErrorKind::OptionGroupNotFoundFault(inner) => {
                    Error::OptionGroupNotFoundFault(inner)
                }
                crate::error::ModifyOptionGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PromoteReadReplicaError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PromoteReadReplicaError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PromoteReadReplicaErrorKind::DBInstanceNotFoundFault(inner) => {
                    Error::DBInstanceNotFoundFault(inner)
                }
                crate::error::PromoteReadReplicaErrorKind::InvalidDBInstanceStateFault(inner) => {
                    Error::InvalidDBInstanceStateFault(inner)
                }
                crate::error::PromoteReadReplicaErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PromoteReadReplicaDBClusterError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::PromoteReadReplicaDBClusterError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PromoteReadReplicaDBClusterErrorKind::DBClusterNotFoundFault(
                    inner,
                ) => Error::DBClusterNotFoundFault(inner),
                crate::error::PromoteReadReplicaDBClusterErrorKind::InvalidDBClusterStateFault(
                    inner,
                ) => Error::InvalidDBClusterStateFault(inner),
                crate::error::PromoteReadReplicaDBClusterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PurchaseReservedDBInstancesOfferingError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PurchaseReservedDBInstancesOfferingError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::PurchaseReservedDBInstancesOfferingErrorKind::ReservedDBInstanceAlreadyExistsFault(inner) => Error::ReservedDBInstanceAlreadyExistsFault(inner),
                crate::error::PurchaseReservedDBInstancesOfferingErrorKind::ReservedDBInstanceQuotaExceededFault(inner) => Error::ReservedDBInstanceQuotaExceededFault(inner),
                crate::error::PurchaseReservedDBInstancesOfferingErrorKind::ReservedDBInstancesOfferingNotFoundFault(inner) => Error::ReservedDBInstancesOfferingNotFoundFault(inner),
                crate::error::PurchaseReservedDBInstancesOfferingErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RebootDBInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RebootDBInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RebootDBInstanceErrorKind::DBInstanceNotFoundFault(inner) => {
                    Error::DBInstanceNotFoundFault(inner)
                }
                crate::error::RebootDBInstanceErrorKind::InvalidDBInstanceStateFault(inner) => {
                    Error::InvalidDBInstanceStateFault(inner)
                }
                crate::error::RebootDBInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterDBProxyTargetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RegisterDBProxyTargetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RegisterDBProxyTargetsErrorKind::DBClusterNotFoundFault(inner) => Error::DBClusterNotFoundFault(inner),
                crate::error::RegisterDBProxyTargetsErrorKind::DBInstanceNotFoundFault(inner) => Error::DBInstanceNotFoundFault(inner),
                crate::error::RegisterDBProxyTargetsErrorKind::DBProxyNotFoundFault(inner) => Error::DBProxyNotFoundFault(inner),
                crate::error::RegisterDBProxyTargetsErrorKind::DBProxyTargetAlreadyRegisteredFault(inner) => Error::DBProxyTargetAlreadyRegisteredFault(inner),
                crate::error::RegisterDBProxyTargetsErrorKind::DBProxyTargetGroupNotFoundFault(inner) => Error::DBProxyTargetGroupNotFoundFault(inner),
                crate::error::RegisterDBProxyTargetsErrorKind::InsufficientAvailableIPsInSubnetFault(inner) => Error::InsufficientAvailableIPsInSubnetFault(inner),
                crate::error::RegisterDBProxyTargetsErrorKind::InvalidDBClusterStateFault(inner) => Error::InvalidDBClusterStateFault(inner),
                crate::error::RegisterDBProxyTargetsErrorKind::InvalidDBInstanceStateFault(inner) => Error::InvalidDBInstanceStateFault(inner),
                crate::error::RegisterDBProxyTargetsErrorKind::InvalidDBProxyStateFault(inner) => Error::InvalidDBProxyStateFault(inner),
                crate::error::RegisterDBProxyTargetsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RemoveFromGlobalClusterError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::RemoveFromGlobalClusterError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RemoveFromGlobalClusterErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::RemoveFromGlobalClusterErrorKind::GlobalClusterNotFoundFault(
                    inner,
                ) => Error::GlobalClusterNotFoundFault(inner),
                crate::error::RemoveFromGlobalClusterErrorKind::InvalidGlobalClusterStateFault(
                    inner,
                ) => Error::InvalidGlobalClusterStateFault(inner),
                crate::error::RemoveFromGlobalClusterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RemoveRoleFromDBClusterError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::RemoveRoleFromDBClusterError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RemoveRoleFromDBClusterErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::RemoveRoleFromDBClusterErrorKind::DBClusterRoleNotFoundFault(
                    inner,
                ) => Error::DBClusterRoleNotFoundFault(inner),
                crate::error::RemoveRoleFromDBClusterErrorKind::InvalidDBClusterStateFault(
                    inner,
                ) => Error::InvalidDBClusterStateFault(inner),
                crate::error::RemoveRoleFromDBClusterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RemoveRoleFromDBInstanceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::RemoveRoleFromDBInstanceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RemoveRoleFromDBInstanceErrorKind::DBInstanceNotFoundFault(inner) => {
                    Error::DBInstanceNotFoundFault(inner)
                }
                crate::error::RemoveRoleFromDBInstanceErrorKind::DBInstanceRoleNotFoundFault(
                    inner,
                ) => Error::DBInstanceRoleNotFoundFault(inner),
                crate::error::RemoveRoleFromDBInstanceErrorKind::InvalidDBInstanceStateFault(
                    inner,
                ) => Error::InvalidDBInstanceStateFault(inner),
                crate::error::RemoveRoleFromDBInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RemoveSourceIdentifierFromSubscriptionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::RemoveSourceIdentifierFromSubscriptionError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RemoveSourceIdentifierFromSubscriptionErrorKind::SourceNotFoundFault(inner) => Error::SourceNotFoundFault(inner),
                crate::error::RemoveSourceIdentifierFromSubscriptionErrorKind::SubscriptionNotFoundFault(inner) => Error::SubscriptionNotFoundFault(inner),
                crate::error::RemoveSourceIdentifierFromSubscriptionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RemoveTagsFromResourceErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::RemoveTagsFromResourceErrorKind::DBInstanceNotFoundFault(inner) => {
                    Error::DBInstanceNotFoundFault(inner)
                }
                crate::error::RemoveTagsFromResourceErrorKind::DBProxyNotFoundFault(inner) => {
                    Error::DBProxyNotFoundFault(inner)
                }
                crate::error::RemoveTagsFromResourceErrorKind::DBProxyTargetGroupNotFoundFault(
                    inner,
                ) => Error::DBProxyTargetGroupNotFoundFault(inner),
                crate::error::RemoveTagsFromResourceErrorKind::DBSnapshotNotFoundFault(inner) => {
                    Error::DBSnapshotNotFoundFault(inner)
                }
                crate::error::RemoveTagsFromResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ResetDBClusterParameterGroupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ResetDBClusterParameterGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ResetDBClusterParameterGroupErrorKind::DBParameterGroupNotFoundFault(inner) => Error::DBParameterGroupNotFoundFault(inner),
                crate::error::ResetDBClusterParameterGroupErrorKind::InvalidDBParameterGroupStateFault(inner) => Error::InvalidDBParameterGroupStateFault(inner),
                crate::error::ResetDBClusterParameterGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ResetDBParameterGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ResetDBParameterGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ResetDBParameterGroupErrorKind::DBParameterGroupNotFoundFault(
                    inner,
                ) => Error::DBParameterGroupNotFoundFault(inner),
                crate::error::ResetDBParameterGroupErrorKind::InvalidDBParameterGroupStateFault(
                    inner,
                ) => Error::InvalidDBParameterGroupStateFault(inner),
                crate::error::ResetDBParameterGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RestoreDBClusterFromS3Error>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RestoreDBClusterFromS3Error>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RestoreDBClusterFromS3ErrorKind::DBClusterAlreadyExistsFault(inner) => Error::DBClusterAlreadyExistsFault(inner),
                crate::error::RestoreDBClusterFromS3ErrorKind::DBClusterNotFoundFault(inner) => Error::DBClusterNotFoundFault(inner),
                crate::error::RestoreDBClusterFromS3ErrorKind::DBClusterParameterGroupNotFoundFault(inner) => Error::DBClusterParameterGroupNotFoundFault(inner),
                crate::error::RestoreDBClusterFromS3ErrorKind::DBClusterQuotaExceededFault(inner) => Error::DBClusterQuotaExceededFault(inner),
                crate::error::RestoreDBClusterFromS3ErrorKind::DBSubnetGroupNotFoundFault(inner) => Error::DBSubnetGroupNotFoundFault(inner),
                crate::error::RestoreDBClusterFromS3ErrorKind::DomainNotFoundFault(inner) => Error::DomainNotFoundFault(inner),
                crate::error::RestoreDBClusterFromS3ErrorKind::InsufficientStorageClusterCapacityFault(inner) => Error::InsufficientStorageClusterCapacityFault(inner),
                crate::error::RestoreDBClusterFromS3ErrorKind::InvalidDBClusterStateFault(inner) => Error::InvalidDBClusterStateFault(inner),
                crate::error::RestoreDBClusterFromS3ErrorKind::InvalidDBSubnetGroupStateFault(inner) => Error::InvalidDBSubnetGroupStateFault(inner),
                crate::error::RestoreDBClusterFromS3ErrorKind::InvalidS3BucketFault(inner) => Error::InvalidS3BucketFault(inner),
                crate::error::RestoreDBClusterFromS3ErrorKind::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
                crate::error::RestoreDBClusterFromS3ErrorKind::InvalidVPCNetworkStateFault(inner) => Error::InvalidVPCNetworkStateFault(inner),
                crate::error::RestoreDBClusterFromS3ErrorKind::KMSKeyNotAccessibleFault(inner) => Error::KMSKeyNotAccessibleFault(inner),
                crate::error::RestoreDBClusterFromS3ErrorKind::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
                crate::error::RestoreDBClusterFromS3ErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RestoreDBClusterFromSnapshotError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RestoreDBClusterFromSnapshotError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RestoreDBClusterFromSnapshotErrorKind::DBClusterAlreadyExistsFault(inner) => Error::DBClusterAlreadyExistsFault(inner),
                crate::error::RestoreDBClusterFromSnapshotErrorKind::DBClusterParameterGroupNotFoundFault(inner) => Error::DBClusterParameterGroupNotFoundFault(inner),
                crate::error::RestoreDBClusterFromSnapshotErrorKind::DBClusterQuotaExceededFault(inner) => Error::DBClusterQuotaExceededFault(inner),
                crate::error::RestoreDBClusterFromSnapshotErrorKind::DBClusterSnapshotNotFoundFault(inner) => Error::DBClusterSnapshotNotFoundFault(inner),
                crate::error::RestoreDBClusterFromSnapshotErrorKind::DBSnapshotNotFoundFault(inner) => Error::DBSnapshotNotFoundFault(inner),
                crate::error::RestoreDBClusterFromSnapshotErrorKind::DBSubnetGroupNotFoundFault(inner) => Error::DBSubnetGroupNotFoundFault(inner),
                crate::error::RestoreDBClusterFromSnapshotErrorKind::DomainNotFoundFault(inner) => Error::DomainNotFoundFault(inner),
                crate::error::RestoreDBClusterFromSnapshotErrorKind::InsufficientDBClusterCapacityFault(inner) => Error::InsufficientDBClusterCapacityFault(inner),
                crate::error::RestoreDBClusterFromSnapshotErrorKind::InsufficientStorageClusterCapacityFault(inner) => Error::InsufficientStorageClusterCapacityFault(inner),
                crate::error::RestoreDBClusterFromSnapshotErrorKind::InvalidDBClusterSnapshotStateFault(inner) => Error::InvalidDBClusterSnapshotStateFault(inner),
                crate::error::RestoreDBClusterFromSnapshotErrorKind::InvalidDBSnapshotStateFault(inner) => Error::InvalidDBSnapshotStateFault(inner),
                crate::error::RestoreDBClusterFromSnapshotErrorKind::InvalidRestoreFault(inner) => Error::InvalidRestoreFault(inner),
                crate::error::RestoreDBClusterFromSnapshotErrorKind::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
                crate::error::RestoreDBClusterFromSnapshotErrorKind::InvalidVPCNetworkStateFault(inner) => Error::InvalidVPCNetworkStateFault(inner),
                crate::error::RestoreDBClusterFromSnapshotErrorKind::KMSKeyNotAccessibleFault(inner) => Error::KMSKeyNotAccessibleFault(inner),
                crate::error::RestoreDBClusterFromSnapshotErrorKind::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
                crate::error::RestoreDBClusterFromSnapshotErrorKind::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
                crate::error::RestoreDBClusterFromSnapshotErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RestoreDBClusterToPointInTimeError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RestoreDBClusterToPointInTimeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RestoreDBClusterToPointInTimeErrorKind::DBClusterAlreadyExistsFault(inner) => Error::DBClusterAlreadyExistsFault(inner),
                crate::error::RestoreDBClusterToPointInTimeErrorKind::DBClusterNotFoundFault(inner) => Error::DBClusterNotFoundFault(inner),
                crate::error::RestoreDBClusterToPointInTimeErrorKind::DBClusterParameterGroupNotFoundFault(inner) => Error::DBClusterParameterGroupNotFoundFault(inner),
                crate::error::RestoreDBClusterToPointInTimeErrorKind::DBClusterQuotaExceededFault(inner) => Error::DBClusterQuotaExceededFault(inner),
                crate::error::RestoreDBClusterToPointInTimeErrorKind::DBClusterSnapshotNotFoundFault(inner) => Error::DBClusterSnapshotNotFoundFault(inner),
                crate::error::RestoreDBClusterToPointInTimeErrorKind::DBSubnetGroupNotFoundFault(inner) => Error::DBSubnetGroupNotFoundFault(inner),
                crate::error::RestoreDBClusterToPointInTimeErrorKind::DomainNotFoundFault(inner) => Error::DomainNotFoundFault(inner),
                crate::error::RestoreDBClusterToPointInTimeErrorKind::InsufficientDBClusterCapacityFault(inner) => Error::InsufficientDBClusterCapacityFault(inner),
                crate::error::RestoreDBClusterToPointInTimeErrorKind::InsufficientStorageClusterCapacityFault(inner) => Error::InsufficientStorageClusterCapacityFault(inner),
                crate::error::RestoreDBClusterToPointInTimeErrorKind::InvalidDBClusterSnapshotStateFault(inner) => Error::InvalidDBClusterSnapshotStateFault(inner),
                crate::error::RestoreDBClusterToPointInTimeErrorKind::InvalidDBClusterStateFault(inner) => Error::InvalidDBClusterStateFault(inner),
                crate::error::RestoreDBClusterToPointInTimeErrorKind::InvalidDBSnapshotStateFault(inner) => Error::InvalidDBSnapshotStateFault(inner),
                crate::error::RestoreDBClusterToPointInTimeErrorKind::InvalidRestoreFault(inner) => Error::InvalidRestoreFault(inner),
                crate::error::RestoreDBClusterToPointInTimeErrorKind::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
                crate::error::RestoreDBClusterToPointInTimeErrorKind::InvalidVPCNetworkStateFault(inner) => Error::InvalidVPCNetworkStateFault(inner),
                crate::error::RestoreDBClusterToPointInTimeErrorKind::KMSKeyNotAccessibleFault(inner) => Error::KMSKeyNotAccessibleFault(inner),
                crate::error::RestoreDBClusterToPointInTimeErrorKind::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
                crate::error::RestoreDBClusterToPointInTimeErrorKind::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
                crate::error::RestoreDBClusterToPointInTimeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RestoreDBInstanceFromDBSnapshotError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RestoreDBInstanceFromDBSnapshotError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::AuthorizationNotFoundFault(inner) => Error::AuthorizationNotFoundFault(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::BackupPolicyNotFoundFault(inner) => Error::BackupPolicyNotFoundFault(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::DBInstanceAlreadyExistsFault(inner) => Error::DBInstanceAlreadyExistsFault(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::DBParameterGroupNotFoundFault(inner) => Error::DBParameterGroupNotFoundFault(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::DBSecurityGroupNotFoundFault(inner) => Error::DBSecurityGroupNotFoundFault(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::DBSnapshotNotFoundFault(inner) => Error::DBSnapshotNotFoundFault(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::DBSubnetGroupDoesNotCoverEnoughAZs(inner) => Error::DBSubnetGroupDoesNotCoverEnoughAZs(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::DBSubnetGroupNotFoundFault(inner) => Error::DBSubnetGroupNotFoundFault(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::DomainNotFoundFault(inner) => Error::DomainNotFoundFault(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::InstanceQuotaExceededFault(inner) => Error::InstanceQuotaExceededFault(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::InsufficientDBInstanceCapacityFault(inner) => Error::InsufficientDBInstanceCapacityFault(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::InvalidDBSnapshotStateFault(inner) => Error::InvalidDBSnapshotStateFault(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::InvalidRestoreFault(inner) => Error::InvalidRestoreFault(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::InvalidVPCNetworkStateFault(inner) => Error::InvalidVPCNetworkStateFault(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::KMSKeyNotAccessibleFault(inner) => Error::KMSKeyNotAccessibleFault(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::ProvisionedIopsNotAvailableInAZFault(inner) => Error::ProvisionedIopsNotAvailableInAZFault(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::StorageTypeNotSupportedFault(inner) => Error::StorageTypeNotSupportedFault(inner),
                crate::error::RestoreDBInstanceFromDBSnapshotErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RestoreDBInstanceFromS3Error>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::RestoreDBInstanceFromS3Error>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RestoreDBInstanceFromS3ErrorKind::AuthorizationNotFoundFault(inner) => Error::AuthorizationNotFoundFault(inner),
                crate::error::RestoreDBInstanceFromS3ErrorKind::BackupPolicyNotFoundFault(inner) => Error::BackupPolicyNotFoundFault(inner),
                crate::error::RestoreDBInstanceFromS3ErrorKind::DBInstanceAlreadyExistsFault(inner) => Error::DBInstanceAlreadyExistsFault(inner),
                crate::error::RestoreDBInstanceFromS3ErrorKind::DBParameterGroupNotFoundFault(inner) => Error::DBParameterGroupNotFoundFault(inner),
                crate::error::RestoreDBInstanceFromS3ErrorKind::DBSecurityGroupNotFoundFault(inner) => Error::DBSecurityGroupNotFoundFault(inner),
                crate::error::RestoreDBInstanceFromS3ErrorKind::DBSubnetGroupDoesNotCoverEnoughAZs(inner) => Error::DBSubnetGroupDoesNotCoverEnoughAZs(inner),
                crate::error::RestoreDBInstanceFromS3ErrorKind::DBSubnetGroupNotFoundFault(inner) => Error::DBSubnetGroupNotFoundFault(inner),
                crate::error::RestoreDBInstanceFromS3ErrorKind::InstanceQuotaExceededFault(inner) => Error::InstanceQuotaExceededFault(inner),
                crate::error::RestoreDBInstanceFromS3ErrorKind::InsufficientDBInstanceCapacityFault(inner) => Error::InsufficientDBInstanceCapacityFault(inner),
                crate::error::RestoreDBInstanceFromS3ErrorKind::InvalidS3BucketFault(inner) => Error::InvalidS3BucketFault(inner),
                crate::error::RestoreDBInstanceFromS3ErrorKind::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
                crate::error::RestoreDBInstanceFromS3ErrorKind::InvalidVPCNetworkStateFault(inner) => Error::InvalidVPCNetworkStateFault(inner),
                crate::error::RestoreDBInstanceFromS3ErrorKind::KMSKeyNotAccessibleFault(inner) => Error::KMSKeyNotAccessibleFault(inner),
                crate::error::RestoreDBInstanceFromS3ErrorKind::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
                crate::error::RestoreDBInstanceFromS3ErrorKind::ProvisionedIopsNotAvailableInAZFault(inner) => Error::ProvisionedIopsNotAvailableInAZFault(inner),
                crate::error::RestoreDBInstanceFromS3ErrorKind::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
                crate::error::RestoreDBInstanceFromS3ErrorKind::StorageTypeNotSupportedFault(inner) => Error::StorageTypeNotSupportedFault(inner),
                crate::error::RestoreDBInstanceFromS3ErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RestoreDBInstanceToPointInTimeError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RestoreDBInstanceToPointInTimeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::AuthorizationNotFoundFault(inner) => Error::AuthorizationNotFoundFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::BackupPolicyNotFoundFault(inner) => Error::BackupPolicyNotFoundFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::DBInstanceAlreadyExistsFault(inner) => Error::DBInstanceAlreadyExistsFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::DBInstanceAutomatedBackupNotFoundFault(inner) => Error::DBInstanceAutomatedBackupNotFoundFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::DBInstanceNotFoundFault(inner) => Error::DBInstanceNotFoundFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::DBParameterGroupNotFoundFault(inner) => Error::DBParameterGroupNotFoundFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::DBSecurityGroupNotFoundFault(inner) => Error::DBSecurityGroupNotFoundFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::DBSubnetGroupDoesNotCoverEnoughAZs(inner) => Error::DBSubnetGroupDoesNotCoverEnoughAZs(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::DBSubnetGroupNotFoundFault(inner) => Error::DBSubnetGroupNotFoundFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::DomainNotFoundFault(inner) => Error::DomainNotFoundFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::InstanceQuotaExceededFault(inner) => Error::InstanceQuotaExceededFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::InsufficientDBInstanceCapacityFault(inner) => Error::InsufficientDBInstanceCapacityFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::InvalidDBInstanceStateFault(inner) => Error::InvalidDBInstanceStateFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::InvalidRestoreFault(inner) => Error::InvalidRestoreFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::InvalidVPCNetworkStateFault(inner) => Error::InvalidVPCNetworkStateFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::KMSKeyNotAccessibleFault(inner) => Error::KMSKeyNotAccessibleFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::PointInTimeRestoreNotEnabledFault(inner) => Error::PointInTimeRestoreNotEnabledFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::ProvisionedIopsNotAvailableInAZFault(inner) => Error::ProvisionedIopsNotAvailableInAZFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::StorageTypeNotSupportedFault(inner) => Error::StorageTypeNotSupportedFault(inner),
                crate::error::RestoreDBInstanceToPointInTimeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RevokeDBSecurityGroupIngressError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RevokeDBSecurityGroupIngressError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RevokeDBSecurityGroupIngressErrorKind::AuthorizationNotFoundFault(inner) => Error::AuthorizationNotFoundFault(inner),
                crate::error::RevokeDBSecurityGroupIngressErrorKind::DBSecurityGroupNotFoundFault(inner) => Error::DBSecurityGroupNotFoundFault(inner),
                crate::error::RevokeDBSecurityGroupIngressErrorKind::InvalidDBSecurityGroupStateFault(inner) => Error::InvalidDBSecurityGroupStateFault(inner),
                crate::error::RevokeDBSecurityGroupIngressErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartActivityStreamError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartActivityStreamError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartActivityStreamErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::StartActivityStreamErrorKind::DBInstanceNotFoundFault(inner) => {
                    Error::DBInstanceNotFoundFault(inner)
                }
                crate::error::StartActivityStreamErrorKind::InvalidDBClusterStateFault(inner) => {
                    Error::InvalidDBClusterStateFault(inner)
                }
                crate::error::StartActivityStreamErrorKind::InvalidDBInstanceStateFault(inner) => {
                    Error::InvalidDBInstanceStateFault(inner)
                }
                crate::error::StartActivityStreamErrorKind::KMSKeyNotAccessibleFault(inner) => {
                    Error::KMSKeyNotAccessibleFault(inner)
                }
                crate::error::StartActivityStreamErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::StartActivityStreamErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartDBClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartDBClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartDBClusterErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::StartDBClusterErrorKind::InvalidDBClusterStateFault(inner) => {
                    Error::InvalidDBClusterStateFault(inner)
                }
                crate::error::StartDBClusterErrorKind::InvalidDBInstanceStateFault(inner) => {
                    Error::InvalidDBInstanceStateFault(inner)
                }
                crate::error::StartDBClusterErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartDBInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartDBInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartDBInstanceErrorKind::AuthorizationNotFoundFault(inner) => {
                    Error::AuthorizationNotFoundFault(inner)
                }
                crate::error::StartDBInstanceErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::StartDBInstanceErrorKind::DBInstanceNotFoundFault(inner) => {
                    Error::DBInstanceNotFoundFault(inner)
                }
                crate::error::StartDBInstanceErrorKind::DBSubnetGroupDoesNotCoverEnoughAZs(
                    inner,
                ) => Error::DBSubnetGroupDoesNotCoverEnoughAZs(inner),
                crate::error::StartDBInstanceErrorKind::DBSubnetGroupNotFoundFault(inner) => {
                    Error::DBSubnetGroupNotFoundFault(inner)
                }
                crate::error::StartDBInstanceErrorKind::InsufficientDBInstanceCapacityFault(
                    inner,
                ) => Error::InsufficientDBInstanceCapacityFault(inner),
                crate::error::StartDBInstanceErrorKind::InvalidDBClusterStateFault(inner) => {
                    Error::InvalidDBClusterStateFault(inner)
                }
                crate::error::StartDBInstanceErrorKind::InvalidDBInstanceStateFault(inner) => {
                    Error::InvalidDBInstanceStateFault(inner)
                }
                crate::error::StartDBInstanceErrorKind::InvalidSubnet(inner) => {
                    Error::InvalidSubnet(inner)
                }
                crate::error::StartDBInstanceErrorKind::InvalidVPCNetworkStateFault(inner) => {
                    Error::InvalidVPCNetworkStateFault(inner)
                }
                crate::error::StartDBInstanceErrorKind::KMSKeyNotAccessibleFault(inner) => {
                    Error::KMSKeyNotAccessibleFault(inner)
                }
                crate::error::StartDBInstanceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::StartDBInstanceAutomatedBackupsReplicationError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::StartDBInstanceAutomatedBackupsReplicationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::StartDBInstanceAutomatedBackupsReplicationErrorKind::DBInstanceAutomatedBackupQuotaExceededFault(inner) => Error::DBInstanceAutomatedBackupQuotaExceededFault(inner),
                crate::error::StartDBInstanceAutomatedBackupsReplicationErrorKind::DBInstanceNotFoundFault(inner) => Error::DBInstanceNotFoundFault(inner),
                crate::error::StartDBInstanceAutomatedBackupsReplicationErrorKind::InvalidDBInstanceStateFault(inner) => Error::InvalidDBInstanceStateFault(inner),
                crate::error::StartDBInstanceAutomatedBackupsReplicationErrorKind::KMSKeyNotAccessibleFault(inner) => Error::KMSKeyNotAccessibleFault(inner),
                crate::error::StartDBInstanceAutomatedBackupsReplicationErrorKind::StorageTypeNotSupportedFault(inner) => Error::StorageTypeNotSupportedFault(inner),
                crate::error::StartDBInstanceAutomatedBackupsReplicationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartExportTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartExportTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartExportTaskErrorKind::DBClusterSnapshotNotFoundFault(inner) => {
                    Error::DBClusterSnapshotNotFoundFault(inner)
                }
                crate::error::StartExportTaskErrorKind::DBSnapshotNotFoundFault(inner) => {
                    Error::DBSnapshotNotFoundFault(inner)
                }
                crate::error::StartExportTaskErrorKind::ExportTaskAlreadyExistsFault(inner) => {
                    Error::ExportTaskAlreadyExistsFault(inner)
                }
                crate::error::StartExportTaskErrorKind::IamRoleMissingPermissionsFault(inner) => {
                    Error::IamRoleMissingPermissionsFault(inner)
                }
                crate::error::StartExportTaskErrorKind::IamRoleNotFoundFault(inner) => {
                    Error::IamRoleNotFoundFault(inner)
                }
                crate::error::StartExportTaskErrorKind::InvalidExportOnlyFault(inner) => {
                    Error::InvalidExportOnlyFault(inner)
                }
                crate::error::StartExportTaskErrorKind::InvalidExportSourceStateFault(inner) => {
                    Error::InvalidExportSourceStateFault(inner)
                }
                crate::error::StartExportTaskErrorKind::InvalidS3BucketFault(inner) => {
                    Error::InvalidS3BucketFault(inner)
                }
                crate::error::StartExportTaskErrorKind::KMSKeyNotAccessibleFault(inner) => {
                    Error::KMSKeyNotAccessibleFault(inner)
                }
                crate::error::StartExportTaskErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopActivityStreamError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopActivityStreamError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopActivityStreamErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::StopActivityStreamErrorKind::DBInstanceNotFoundFault(inner) => {
                    Error::DBInstanceNotFoundFault(inner)
                }
                crate::error::StopActivityStreamErrorKind::InvalidDBClusterStateFault(inner) => {
                    Error::InvalidDBClusterStateFault(inner)
                }
                crate::error::StopActivityStreamErrorKind::InvalidDBInstanceStateFault(inner) => {
                    Error::InvalidDBInstanceStateFault(inner)
                }
                crate::error::StopActivityStreamErrorKind::ResourceNotFoundFault(inner) => {
                    Error::ResourceNotFoundFault(inner)
                }
                crate::error::StopActivityStreamErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopDBClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopDBClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopDBClusterErrorKind::DBClusterNotFoundFault(inner) => {
                    Error::DBClusterNotFoundFault(inner)
                }
                crate::error::StopDBClusterErrorKind::InvalidDBClusterStateFault(inner) => {
                    Error::InvalidDBClusterStateFault(inner)
                }
                crate::error::StopDBClusterErrorKind::InvalidDBInstanceStateFault(inner) => {
                    Error::InvalidDBInstanceStateFault(inner)
                }
                crate::error::StopDBClusterErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopDBInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopDBInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopDBInstanceErrorKind::DBInstanceNotFoundFault(inner) => {
                    Error::DBInstanceNotFoundFault(inner)
                }
                crate::error::StopDBInstanceErrorKind::DBSnapshotAlreadyExistsFault(inner) => {
                    Error::DBSnapshotAlreadyExistsFault(inner)
                }
                crate::error::StopDBInstanceErrorKind::InvalidDBClusterStateFault(inner) => {
                    Error::InvalidDBClusterStateFault(inner)
                }
                crate::error::StopDBInstanceErrorKind::InvalidDBInstanceStateFault(inner) => {
                    Error::InvalidDBInstanceStateFault(inner)
                }
                crate::error::StopDBInstanceErrorKind::SnapshotQuotaExceededFault(inner) => {
                    Error::SnapshotQuotaExceededFault(inner)
                }
                crate::error::StopDBInstanceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<crate::error::StopDBInstanceAutomatedBackupsReplicationError>,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::StopDBInstanceAutomatedBackupsReplicationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::StopDBInstanceAutomatedBackupsReplicationErrorKind::DBInstanceNotFoundFault(inner) => Error::DBInstanceNotFoundFault(inner),
                crate::error::StopDBInstanceAutomatedBackupsReplicationErrorKind::InvalidDBInstanceStateFault(inner) => Error::InvalidDBInstanceStateFault(inner),
                crate::error::StopDBInstanceAutomatedBackupsReplicationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
