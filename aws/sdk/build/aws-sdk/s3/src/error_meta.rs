// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    BucketAlreadyExists(crate::error::BucketAlreadyExists),
    BucketAlreadyOwnedByYou(crate::error::BucketAlreadyOwnedByYou),
    InvalidObjectState(crate::error::InvalidObjectState),
    NoSuchBucket(crate::error::NoSuchBucket),
    NoSuchKey(crate::error::NoSuchKey),
    NoSuchUpload(crate::error::NoSuchUpload),
    NotFound(crate::error::NotFound),
    ObjectAlreadyInActiveTierError(crate::error::ObjectAlreadyInActiveTierError),
    ObjectNotInActiveTierError(crate::error::ObjectNotInActiveTierError),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BucketAlreadyExists(inner) => inner.fmt(f),
            Error::BucketAlreadyOwnedByYou(inner) => inner.fmt(f),
            Error::InvalidObjectState(inner) => inner.fmt(f),
            Error::NoSuchBucket(inner) => inner.fmt(f),
            Error::NoSuchKey(inner) => inner.fmt(f),
            Error::NoSuchUpload(inner) => inner.fmt(f),
            Error::NotFound(inner) => inner.fmt(f),
            Error::ObjectAlreadyInActiveTierError(inner) => inner.fmt(f),
            Error::ObjectNotInActiveTierError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AbortMultipartUploadError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AbortMultipartUploadError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AbortMultipartUploadErrorKind::NoSuchUpload(inner) => {
                    Error::NoSuchUpload(inner)
                }
                crate::error::AbortMultipartUploadErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CompleteMultipartUploadError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CompleteMultipartUploadError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CompleteMultipartUploadErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CopyObjectError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CopyObjectError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CopyObjectErrorKind::ObjectNotInActiveTierError(inner) => {
                    Error::ObjectNotInActiveTierError(inner)
                }
                crate::error::CopyObjectErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateBucketError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateBucketError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateBucketErrorKind::BucketAlreadyOwnedByYou(inner) => {
                    Error::BucketAlreadyOwnedByYou(inner)
                }
                crate::error::CreateBucketErrorKind::BucketAlreadyExists(inner) => {
                    Error::BucketAlreadyExists(inner)
                }
                crate::error::CreateBucketErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateMultipartUploadError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateMultipartUploadError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateMultipartUploadErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteBucketError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteBucketError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteBucketErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteBucketAnalyticsConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteBucketAnalyticsConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteBucketAnalyticsConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteBucketCorsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteBucketCorsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteBucketCorsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteBucketEncryptionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteBucketEncryptionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteBucketEncryptionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::DeleteBucketIntelligentTieringConfigurationError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DeleteBucketIntelligentTieringConfigurationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteBucketIntelligentTieringConfigurationErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteBucketInventoryConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteBucketInventoryConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteBucketInventoryConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteBucketLifecycleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteBucketLifecycleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteBucketLifecycleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteBucketMetricsConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteBucketMetricsConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteBucketMetricsConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteBucketOwnershipControlsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteBucketOwnershipControlsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteBucketOwnershipControlsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteBucketPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteBucketPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteBucketPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteBucketReplicationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteBucketReplicationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteBucketReplicationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteBucketTaggingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteBucketTaggingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteBucketTaggingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteBucketWebsiteError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteBucketWebsiteError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteBucketWebsiteErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteObjectError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteObjectError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteObjectErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteObjectsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteObjectsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteObjectsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteObjectTaggingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteObjectTaggingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteObjectTaggingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeletePublicAccessBlockError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeletePublicAccessBlockError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeletePublicAccessBlockErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketAccelerateConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetBucketAccelerateConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketAccelerateConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketAclError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetBucketAclError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketAclErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketAnalyticsConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetBucketAnalyticsConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketAnalyticsConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketCorsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetBucketCorsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketCorsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketEncryptionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetBucketEncryptionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketEncryptionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<smithy_http::result::SdkError<crate::error::GetBucketIntelligentTieringConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::GetBucketIntelligentTieringConfigurationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketIntelligentTieringConfigurationErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketInventoryConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetBucketInventoryConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketInventoryConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketLifecycleConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetBucketLifecycleConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketLifecycleConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketLocationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetBucketLocationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketLocationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketLoggingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetBucketLoggingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketLoggingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketMetricsConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetBucketMetricsConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketMetricsConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketNotificationConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetBucketNotificationConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketNotificationConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketOwnershipControlsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetBucketOwnershipControlsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketOwnershipControlsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetBucketPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketPolicyStatusError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetBucketPolicyStatusError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketPolicyStatusErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketReplicationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetBucketReplicationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketReplicationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketRequestPaymentError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetBucketRequestPaymentError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketRequestPaymentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketTaggingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetBucketTaggingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketTaggingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketVersioningError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetBucketVersioningError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketVersioningErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBucketWebsiteError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetBucketWebsiteError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBucketWebsiteErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetObjectError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetObjectError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetObjectErrorKind::NoSuchKey(inner) => Error::NoSuchKey(inner),
                crate::error::GetObjectErrorKind::InvalidObjectState(inner) => {
                    Error::InvalidObjectState(inner)
                }
                crate::error::GetObjectErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetObjectAclError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetObjectAclError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetObjectAclErrorKind::NoSuchKey(inner) => Error::NoSuchKey(inner),
                crate::error::GetObjectAclErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetObjectLegalHoldError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetObjectLegalHoldError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetObjectLegalHoldErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetObjectLockConfigurationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetObjectLockConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetObjectLockConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetObjectRetentionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetObjectRetentionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetObjectRetentionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetObjectTaggingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetObjectTaggingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetObjectTaggingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetObjectTorrentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetObjectTorrentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetObjectTorrentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetPublicAccessBlockError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetPublicAccessBlockError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetPublicAccessBlockErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::HeadBucketError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::HeadBucketError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::HeadBucketErrorKind::NotFound(inner) => Error::NotFound(inner),
                crate::error::HeadBucketErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::HeadObjectError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::HeadObjectError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::HeadObjectErrorKind::NotFound(inner) => Error::NotFound(inner),
                crate::error::HeadObjectErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListBucketAnalyticsConfigurationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListBucketAnalyticsConfigurationsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListBucketAnalyticsConfigurationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::ListBucketIntelligentTieringConfigurationsError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::ListBucketIntelligentTieringConfigurationsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListBucketIntelligentTieringConfigurationsErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListBucketInventoryConfigurationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListBucketInventoryConfigurationsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListBucketInventoryConfigurationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListBucketMetricsConfigurationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListBucketMetricsConfigurationsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListBucketMetricsConfigurationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListBucketsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListBucketsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListBucketsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListMultipartUploadsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListMultipartUploadsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListMultipartUploadsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListObjectsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListObjectsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListObjectsErrorKind::NoSuchBucket(inner) => {
                    Error::NoSuchBucket(inner)
                }
                crate::error::ListObjectsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListObjectsV2Error>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListObjectsV2Error>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListObjectsV2ErrorKind::NoSuchBucket(inner) => {
                    Error::NoSuchBucket(inner)
                }
                crate::error::ListObjectsV2ErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListObjectVersionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListObjectVersionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListObjectVersionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListPartsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListPartsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListPartsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutBucketAccelerateConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutBucketAccelerateConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBucketAccelerateConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutBucketAclError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutBucketAclError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBucketAclErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutBucketAnalyticsConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutBucketAnalyticsConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBucketAnalyticsConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutBucketCorsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutBucketCorsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBucketCorsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutBucketEncryptionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutBucketEncryptionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBucketEncryptionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<smithy_http::result::SdkError<crate::error::PutBucketIntelligentTieringConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::PutBucketIntelligentTieringConfigurationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBucketIntelligentTieringConfigurationErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutBucketInventoryConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutBucketInventoryConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBucketInventoryConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutBucketLifecycleConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutBucketLifecycleConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBucketLifecycleConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutBucketLoggingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutBucketLoggingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBucketLoggingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutBucketMetricsConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutBucketMetricsConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBucketMetricsConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutBucketNotificationConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutBucketNotificationConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBucketNotificationConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutBucketOwnershipControlsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutBucketOwnershipControlsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBucketOwnershipControlsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutBucketPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutBucketPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBucketPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutBucketReplicationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutBucketReplicationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBucketReplicationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutBucketRequestPaymentError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutBucketRequestPaymentError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBucketRequestPaymentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutBucketTaggingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutBucketTaggingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBucketTaggingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutBucketVersioningError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutBucketVersioningError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBucketVersioningErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutBucketWebsiteError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutBucketWebsiteError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutBucketWebsiteErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutObjectError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutObjectError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutObjectErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutObjectAclError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutObjectAclError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutObjectAclErrorKind::NoSuchKey(inner) => Error::NoSuchKey(inner),
                crate::error::PutObjectAclErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutObjectLegalHoldError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutObjectLegalHoldError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutObjectLegalHoldErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutObjectLockConfigurationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutObjectLockConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutObjectLockConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutObjectRetentionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutObjectRetentionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutObjectRetentionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutObjectTaggingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutObjectTaggingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutObjectTaggingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutPublicAccessBlockError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutPublicAccessBlockError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutPublicAccessBlockErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RestoreObjectError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RestoreObjectError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RestoreObjectErrorKind::ObjectAlreadyInActiveTierError(inner) => {
                    Error::ObjectAlreadyInActiveTierError(inner)
                }
                crate::error::RestoreObjectErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UploadPartError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UploadPartError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UploadPartErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UploadPartCopyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UploadPartCopyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UploadPartCopyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::WriteGetObjectResponseError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::WriteGetObjectResponseError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::WriteGetObjectResponseErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
