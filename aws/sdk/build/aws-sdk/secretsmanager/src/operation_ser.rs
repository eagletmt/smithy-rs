// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_cancel_rotate_secret_input_body(
    input: &crate::input::CancelRotateSecretInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CancelRotateSecretInputBody {
        secret_id: &input.secret_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_secret_input_body(
    input: &crate::input::CreateSecretInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateSecretInputBody {
        name: &input.name,
        tags: &input.tags,
        kms_key_id: &input.kms_key_id,
        description: &input.description,
        secret_string: &input.secret_string,
        secret_binary: &input.secret_binary,
        client_request_token: &input.client_request_token,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_delete_resource_policy_input_body(
    input: &crate::input::DeleteResourcePolicyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeleteResourcePolicyInputBody {
        secret_id: &input.secret_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_delete_secret_input_body(
    input: &crate::input::DeleteSecretInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DeleteSecretInputBody {
        force_delete_without_recovery: &input.force_delete_without_recovery,
        recovery_window_in_days: &input.recovery_window_in_days,
        secret_id: &input.secret_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_describe_secret_input_body(
    input: &crate::input::DescribeSecretInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::DescribeSecretInputBody {
        secret_id: &input.secret_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_random_password_input_body(
    input: &crate::input::GetRandomPasswordInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetRandomPasswordInputBody {
        exclude_numbers: &input.exclude_numbers,
        exclude_characters: &input.exclude_characters,
        password_length: &input.password_length,
        require_each_included_type: &input.require_each_included_type,
        include_space: &input.include_space,
        exclude_punctuation: &input.exclude_punctuation,
        exclude_lowercase: &input.exclude_lowercase,
        exclude_uppercase: &input.exclude_uppercase,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_resource_policy_input_body(
    input: &crate::input::GetResourcePolicyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetResourcePolicyInputBody {
        secret_id: &input.secret_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_secret_value_input_body(
    input: &crate::input::GetSecretValueInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetSecretValueInputBody {
        secret_id: &input.secret_id,
        version_stage: &input.version_stage,
        version_id: &input.version_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_secrets_input_body(
    input: &crate::input::ListSecretsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListSecretsInputBody {
        max_results: &input.max_results,
        sort_order: &input.sort_order,
        next_token: &input.next_token,
        filters: &input.filters,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_list_secret_version_ids_input_body(
    input: &crate::input::ListSecretVersionIdsInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ListSecretVersionIdsInputBody {
        max_results: &input.max_results,
        secret_id: &input.secret_id,
        next_token: &input.next_token,
        include_deprecated: &input.include_deprecated,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_put_resource_policy_input_body(
    input: &crate::input::PutResourcePolicyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::PutResourcePolicyInputBody {
        resource_policy: &input.resource_policy,
        block_public_policy: &input.block_public_policy,
        secret_id: &input.secret_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_put_secret_value_input_body(
    input: &crate::input::PutSecretValueInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::PutSecretValueInputBody {
        client_request_token: &input.client_request_token,
        secret_id: &input.secret_id,
        secret_string: &input.secret_string,
        secret_binary: &input.secret_binary,
        version_stages: &input.version_stages,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_restore_secret_input_body(
    input: &crate::input::RestoreSecretInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::RestoreSecretInputBody {
        secret_id: &input.secret_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_rotate_secret_input_body(
    input: &crate::input::RotateSecretInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::RotateSecretInputBody {
        secret_id: &input.secret_id,
        client_request_token: &input.client_request_token,
        rotation_rules: &input.rotation_rules,
        rotation_lambda_arn: &input.rotation_lambda_arn,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_tag_resource_input_body(
    input: &crate::input::TagResourceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::TagResourceInputBody {
        secret_id: &input.secret_id,
        tags: &input.tags,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_untag_resource_input_body(
    input: &crate::input::UntagResourceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UntagResourceInputBody {
        tag_keys: &input.tag_keys,
        secret_id: &input.secret_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_secret_input_body(
    input: &crate::input::UpdateSecretInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateSecretInputBody {
        secret_string: &input.secret_string,
        kms_key_id: &input.kms_key_id,
        secret_id: &input.secret_id,
        description: &input.description,
        client_request_token: &input.client_request_token,
        secret_binary: &input.secret_binary,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_secret_version_stage_input_body(
    input: &crate::input::UpdateSecretVersionStageInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateSecretVersionStageInputBody {
        move_to_version_id: &input.move_to_version_id,
        secret_id: &input.secret_id,
        remove_from_version_id: &input.remove_from_version_id,
        version_stage: &input.version_stage,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_validate_resource_policy_input_body(
    input: &crate::input::ValidateResourcePolicyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ValidateResourcePolicyInputBody {
        resource_policy: &input.resource_policy,
        secret_id: &input.secret_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}
