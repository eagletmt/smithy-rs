// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    BackupInUseError(crate::error::BackupInUseError),
    BackupNotFoundError(crate::error::BackupNotFoundError),
    ConditionalCheckFailedError(crate::error::ConditionalCheckFailedError),
    ContinuousBackupsUnavailableError(crate::error::ContinuousBackupsUnavailableError),
    DuplicateItemError(crate::error::DuplicateItemError),
    ExportConflictError(crate::error::ExportConflictError),
    ExportNotFoundError(crate::error::ExportNotFoundError),
    GlobalTableAlreadyExistsError(crate::error::GlobalTableAlreadyExistsError),
    GlobalTableNotFoundError(crate::error::GlobalTableNotFoundError),
    IdempotentParameterMismatchError(crate::error::IdempotentParameterMismatchError),
    IndexNotFoundError(crate::error::IndexNotFoundError),
    InternalServerError(crate::error::InternalServerError),
    InvalidEndpointError(crate::error::InvalidEndpointError),
    InvalidExportTimeError(crate::error::InvalidExportTimeError),
    InvalidRestoreTimeError(crate::error::InvalidRestoreTimeError),
    ItemCollectionSizeLimitExceededError(crate::error::ItemCollectionSizeLimitExceededError),
    LimitExceededError(crate::error::LimitExceededError),
    PointInTimeRecoveryUnavailableError(crate::error::PointInTimeRecoveryUnavailableError),
    ProvisionedThroughputExceededError(crate::error::ProvisionedThroughputExceededError),
    ReplicaAlreadyExistsError(crate::error::ReplicaAlreadyExistsError),
    ReplicaNotFoundError(crate::error::ReplicaNotFoundError),
    RequestLimitExceeded(crate::error::RequestLimitExceeded),
    ResourceInUseError(crate::error::ResourceInUseError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    TableAlreadyExistsError(crate::error::TableAlreadyExistsError),
    TableInUseError(crate::error::TableInUseError),
    TableNotFoundError(crate::error::TableNotFoundError),
    TransactionCanceledError(crate::error::TransactionCanceledError),
    TransactionConflictError(crate::error::TransactionConflictError),
    TransactionInProgressError(crate::error::TransactionInProgressError),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BackupInUseError(inner) => inner.fmt(f),
            Error::BackupNotFoundError(inner) => inner.fmt(f),
            Error::ConditionalCheckFailedError(inner) => inner.fmt(f),
            Error::ContinuousBackupsUnavailableError(inner) => inner.fmt(f),
            Error::DuplicateItemError(inner) => inner.fmt(f),
            Error::ExportConflictError(inner) => inner.fmt(f),
            Error::ExportNotFoundError(inner) => inner.fmt(f),
            Error::GlobalTableAlreadyExistsError(inner) => inner.fmt(f),
            Error::GlobalTableNotFoundError(inner) => inner.fmt(f),
            Error::IdempotentParameterMismatchError(inner) => inner.fmt(f),
            Error::IndexNotFoundError(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::InvalidEndpointError(inner) => inner.fmt(f),
            Error::InvalidExportTimeError(inner) => inner.fmt(f),
            Error::InvalidRestoreTimeError(inner) => inner.fmt(f),
            Error::ItemCollectionSizeLimitExceededError(inner) => inner.fmt(f),
            Error::LimitExceededError(inner) => inner.fmt(f),
            Error::PointInTimeRecoveryUnavailableError(inner) => inner.fmt(f),
            Error::ProvisionedThroughputExceededError(inner) => inner.fmt(f),
            Error::ReplicaAlreadyExistsError(inner) => inner.fmt(f),
            Error::ReplicaNotFoundError(inner) => inner.fmt(f),
            Error::RequestLimitExceeded(inner) => inner.fmt(f),
            Error::ResourceInUseError(inner) => inner.fmt(f),
            Error::ResourceNotFoundError(inner) => inner.fmt(f),
            Error::TableAlreadyExistsError(inner) => inner.fmt(f),
            Error::TableInUseError(inner) => inner.fmt(f),
            Error::TableNotFoundError(inner) => inner.fmt(f),
            Error::TransactionCanceledError(inner) => inner.fmt(f),
            Error::TransactionConflictError(inner) => inner.fmt(f),
            Error::TransactionInProgressError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::BatchExecuteStatementError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::BatchExecuteStatementError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::BatchExecuteStatementErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::BatchExecuteStatementErrorKind::RequestLimitExceeded(inner) => {
                    Error::RequestLimitExceeded(inner)
                }
                crate::error::BatchExecuteStatementErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::BatchGetItemError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::BatchGetItemError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::BatchGetItemErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::BatchGetItemErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::BatchGetItemErrorKind::ProvisionedThroughputExceededError(inner) => {
                    Error::ProvisionedThroughputExceededError(inner)
                }
                crate::error::BatchGetItemErrorKind::RequestLimitExceeded(inner) => {
                    Error::RequestLimitExceeded(inner)
                }
                crate::error::BatchGetItemErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::BatchGetItemErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::BatchWriteItemError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::BatchWriteItemError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::BatchWriteItemErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::BatchWriteItemErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::BatchWriteItemErrorKind::ItemCollectionSizeLimitExceededError(
                    inner,
                ) => Error::ItemCollectionSizeLimitExceededError(inner),
                crate::error::BatchWriteItemErrorKind::ProvisionedThroughputExceededError(
                    inner,
                ) => Error::ProvisionedThroughputExceededError(inner),
                crate::error::BatchWriteItemErrorKind::RequestLimitExceeded(inner) => {
                    Error::RequestLimitExceeded(inner)
                }
                crate::error::BatchWriteItemErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::BatchWriteItemErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateBackupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateBackupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateBackupErrorKind::BackupInUseError(inner) => {
                    Error::BackupInUseError(inner)
                }
                crate::error::CreateBackupErrorKind::ContinuousBackupsUnavailableError(inner) => {
                    Error::ContinuousBackupsUnavailableError(inner)
                }
                crate::error::CreateBackupErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreateBackupErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::CreateBackupErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateBackupErrorKind::TableInUseError(inner) => {
                    Error::TableInUseError(inner)
                }
                crate::error::CreateBackupErrorKind::TableNotFoundError(inner) => {
                    Error::TableNotFoundError(inner)
                }
                crate::error::CreateBackupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateGlobalTableError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateGlobalTableError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateGlobalTableErrorKind::GlobalTableAlreadyExistsError(inner) => {
                    Error::GlobalTableAlreadyExistsError(inner)
                }
                crate::error::CreateGlobalTableErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreateGlobalTableErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::CreateGlobalTableErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateGlobalTableErrorKind::TableNotFoundError(inner) => {
                    Error::TableNotFoundError(inner)
                }
                crate::error::CreateGlobalTableErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTableError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateTableError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTableErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::CreateTableErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::CreateTableErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateTableErrorKind::ResourceInUseError(inner) => {
                    Error::ResourceInUseError(inner)
                }
                crate::error::CreateTableErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteBackupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteBackupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteBackupErrorKind::BackupInUseError(inner) => {
                    Error::BackupInUseError(inner)
                }
                crate::error::DeleteBackupErrorKind::BackupNotFoundError(inner) => {
                    Error::BackupNotFoundError(inner)
                }
                crate::error::DeleteBackupErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteBackupErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::DeleteBackupErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeleteBackupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteItemError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteItemError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteItemErrorKind::ConditionalCheckFailedError(inner) => {
                    Error::ConditionalCheckFailedError(inner)
                }
                crate::error::DeleteItemErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteItemErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::DeleteItemErrorKind::ItemCollectionSizeLimitExceededError(inner) => {
                    Error::ItemCollectionSizeLimitExceededError(inner)
                }
                crate::error::DeleteItemErrorKind::ProvisionedThroughputExceededError(inner) => {
                    Error::ProvisionedThroughputExceededError(inner)
                }
                crate::error::DeleteItemErrorKind::RequestLimitExceeded(inner) => {
                    Error::RequestLimitExceeded(inner)
                }
                crate::error::DeleteItemErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DeleteItemErrorKind::TransactionConflictError(inner) => {
                    Error::TransactionConflictError(inner)
                }
                crate::error::DeleteItemErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTableError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteTableError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTableErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DeleteTableErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::DeleteTableErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DeleteTableErrorKind::ResourceInUseError(inner) => {
                    Error::ResourceInUseError(inner)
                }
                crate::error::DeleteTableErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DeleteTableErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeBackupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeBackupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeBackupErrorKind::BackupNotFoundError(inner) => {
                    Error::BackupNotFoundError(inner)
                }
                crate::error::DescribeBackupErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeBackupErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::DescribeBackupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeContinuousBackupsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeContinuousBackupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeContinuousBackupsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeContinuousBackupsErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::DescribeContinuousBackupsErrorKind::TableNotFoundError(inner) => {
                    Error::TableNotFoundError(inner)
                }
                crate::error::DescribeContinuousBackupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeContributorInsightsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeContributorInsightsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeContributorInsightsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeContributorInsightsErrorKind::ResourceNotFoundError(
                    inner,
                ) => Error::ResourceNotFoundError(inner),
                crate::error::DescribeContributorInsightsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEndpointsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeEndpointsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEndpointsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeExportError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeExportError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeExportErrorKind::ExportNotFoundError(inner) => {
                    Error::ExportNotFoundError(inner)
                }
                crate::error::DescribeExportErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeExportErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::DescribeExportErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeGlobalTableError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeGlobalTableError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeGlobalTableErrorKind::GlobalTableNotFoundError(inner) => {
                    Error::GlobalTableNotFoundError(inner)
                }
                crate::error::DescribeGlobalTableErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeGlobalTableErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::DescribeGlobalTableErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeGlobalTableSettingsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeGlobalTableSettingsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeGlobalTableSettingsErrorKind::GlobalTableNotFoundError(
                    inner,
                ) => Error::GlobalTableNotFoundError(inner),
                crate::error::DescribeGlobalTableSettingsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeGlobalTableSettingsErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::DescribeGlobalTableSettingsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeKinesisStreamingDestinationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeKinesisStreamingDestinationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeKinesisStreamingDestinationErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::DescribeKinesisStreamingDestinationErrorKind::InvalidEndpointError(inner) => Error::InvalidEndpointError(inner),
                crate::error::DescribeKinesisStreamingDestinationErrorKind::ResourceNotFoundError(inner) => Error::ResourceNotFoundError(inner),
                crate::error::DescribeKinesisStreamingDestinationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeLimitsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeLimitsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeLimitsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeLimitsErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::DescribeLimitsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTableError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeTableError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTableErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeTableErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::DescribeTableErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DescribeTableErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTableReplicaAutoScalingError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeTableReplicaAutoScalingError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTableReplicaAutoScalingErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::DescribeTableReplicaAutoScalingErrorKind::ResourceNotFoundError(
                    inner,
                ) => Error::ResourceNotFoundError(inner),
                crate::error::DescribeTableReplicaAutoScalingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTimeToLiveError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeTimeToLiveError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTimeToLiveErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::DescribeTimeToLiveErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::DescribeTimeToLiveErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DescribeTimeToLiveErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisableKinesisStreamingDestinationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisableKinesisStreamingDestinationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DisableKinesisStreamingDestinationErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::DisableKinesisStreamingDestinationErrorKind::InvalidEndpointError(inner) => Error::InvalidEndpointError(inner),
                crate::error::DisableKinesisStreamingDestinationErrorKind::LimitExceededError(inner) => Error::LimitExceededError(inner),
                crate::error::DisableKinesisStreamingDestinationErrorKind::ResourceInUseError(inner) => Error::ResourceInUseError(inner),
                crate::error::DisableKinesisStreamingDestinationErrorKind::ResourceNotFoundError(inner) => Error::ResourceNotFoundError(inner),
                crate::error::DisableKinesisStreamingDestinationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableKinesisStreamingDestinationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::EnableKinesisStreamingDestinationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableKinesisStreamingDestinationErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::EnableKinesisStreamingDestinationErrorKind::InvalidEndpointError(
                    inner,
                ) => Error::InvalidEndpointError(inner),
                crate::error::EnableKinesisStreamingDestinationErrorKind::LimitExceededError(
                    inner,
                ) => Error::LimitExceededError(inner),
                crate::error::EnableKinesisStreamingDestinationErrorKind::ResourceInUseError(
                    inner,
                ) => Error::ResourceInUseError(inner),
                crate::error::EnableKinesisStreamingDestinationErrorKind::ResourceNotFoundError(
                    inner,
                ) => Error::ResourceNotFoundError(inner),
                crate::error::EnableKinesisStreamingDestinationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ExecuteStatementError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ExecuteStatementError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ExecuteStatementErrorKind::ConditionalCheckFailedError(inner) => {
                    Error::ConditionalCheckFailedError(inner)
                }
                crate::error::ExecuteStatementErrorKind::DuplicateItemError(inner) => {
                    Error::DuplicateItemError(inner)
                }
                crate::error::ExecuteStatementErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ExecuteStatementErrorKind::ItemCollectionSizeLimitExceededError(
                    inner,
                ) => Error::ItemCollectionSizeLimitExceededError(inner),
                crate::error::ExecuteStatementErrorKind::ProvisionedThroughputExceededError(
                    inner,
                ) => Error::ProvisionedThroughputExceededError(inner),
                crate::error::ExecuteStatementErrorKind::RequestLimitExceeded(inner) => {
                    Error::RequestLimitExceeded(inner)
                }
                crate::error::ExecuteStatementErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::ExecuteStatementErrorKind::TransactionConflictError(inner) => {
                    Error::TransactionConflictError(inner)
                }
                crate::error::ExecuteStatementErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ExecuteTransactionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ExecuteTransactionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ExecuteTransactionErrorKind::IdempotentParameterMismatchError(
                    inner,
                ) => Error::IdempotentParameterMismatchError(inner),
                crate::error::ExecuteTransactionErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ExecuteTransactionErrorKind::ProvisionedThroughputExceededError(
                    inner,
                ) => Error::ProvisionedThroughputExceededError(inner),
                crate::error::ExecuteTransactionErrorKind::RequestLimitExceeded(inner) => {
                    Error::RequestLimitExceeded(inner)
                }
                crate::error::ExecuteTransactionErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::ExecuteTransactionErrorKind::TransactionCanceledError(inner) => {
                    Error::TransactionCanceledError(inner)
                }
                crate::error::ExecuteTransactionErrorKind::TransactionInProgressError(inner) => {
                    Error::TransactionInProgressError(inner)
                }
                crate::error::ExecuteTransactionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ExportTableToPointInTimeError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ExportTableToPointInTimeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ExportTableToPointInTimeErrorKind::ExportConflictError(inner) => Error::ExportConflictError(inner),
                crate::error::ExportTableToPointInTimeErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::ExportTableToPointInTimeErrorKind::InvalidExportTimeError(inner) => Error::InvalidExportTimeError(inner),
                crate::error::ExportTableToPointInTimeErrorKind::LimitExceededError(inner) => Error::LimitExceededError(inner),
                crate::error::ExportTableToPointInTimeErrorKind::PointInTimeRecoveryUnavailableError(inner) => Error::PointInTimeRecoveryUnavailableError(inner),
                crate::error::ExportTableToPointInTimeErrorKind::TableNotFoundError(inner) => Error::TableNotFoundError(inner),
                crate::error::ExportTableToPointInTimeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetItemError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetItemError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetItemErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::GetItemErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::GetItemErrorKind::ProvisionedThroughputExceededError(inner) => {
                    Error::ProvisionedThroughputExceededError(inner)
                }
                crate::error::GetItemErrorKind::RequestLimitExceeded(inner) => {
                    Error::RequestLimitExceeded(inner)
                }
                crate::error::GetItemErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetItemErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListBackupsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListBackupsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListBackupsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListBackupsErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::ListBackupsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListContributorInsightsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListContributorInsightsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListContributorInsightsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListContributorInsightsErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::ListContributorInsightsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListExportsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListExportsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListExportsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListExportsErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::ListExportsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListGlobalTablesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListGlobalTablesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListGlobalTablesErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListGlobalTablesErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::ListGlobalTablesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTablesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTablesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTablesErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListTablesErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::ListTablesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsOfResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsOfResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsOfResourceErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ListTagsOfResourceErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::ListTagsOfResourceErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::ListTagsOfResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutItemError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutItemError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutItemErrorKind::ConditionalCheckFailedError(inner) => {
                    Error::ConditionalCheckFailedError(inner)
                }
                crate::error::PutItemErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::PutItemErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::PutItemErrorKind::ItemCollectionSizeLimitExceededError(inner) => {
                    Error::ItemCollectionSizeLimitExceededError(inner)
                }
                crate::error::PutItemErrorKind::ProvisionedThroughputExceededError(inner) => {
                    Error::ProvisionedThroughputExceededError(inner)
                }
                crate::error::PutItemErrorKind::RequestLimitExceeded(inner) => {
                    Error::RequestLimitExceeded(inner)
                }
                crate::error::PutItemErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::PutItemErrorKind::TransactionConflictError(inner) => {
                    Error::TransactionConflictError(inner)
                }
                crate::error::PutItemErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::QueryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::QueryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::QueryErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::QueryErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::QueryErrorKind::ProvisionedThroughputExceededError(inner) => {
                    Error::ProvisionedThroughputExceededError(inner)
                }
                crate::error::QueryErrorKind::RequestLimitExceeded(inner) => {
                    Error::RequestLimitExceeded(inner)
                }
                crate::error::QueryErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::QueryErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RestoreTableFromBackupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RestoreTableFromBackupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RestoreTableFromBackupErrorKind::BackupInUseError(inner) => {
                    Error::BackupInUseError(inner)
                }
                crate::error::RestoreTableFromBackupErrorKind::BackupNotFoundError(inner) => {
                    Error::BackupNotFoundError(inner)
                }
                crate::error::RestoreTableFromBackupErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::RestoreTableFromBackupErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::RestoreTableFromBackupErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::RestoreTableFromBackupErrorKind::TableAlreadyExistsError(inner) => {
                    Error::TableAlreadyExistsError(inner)
                }
                crate::error::RestoreTableFromBackupErrorKind::TableInUseError(inner) => {
                    Error::TableInUseError(inner)
                }
                crate::error::RestoreTableFromBackupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RestoreTableToPointInTimeError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::RestoreTableToPointInTimeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RestoreTableToPointInTimeErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::RestoreTableToPointInTimeErrorKind::InvalidEndpointError(inner) => Error::InvalidEndpointError(inner),
                crate::error::RestoreTableToPointInTimeErrorKind::InvalidRestoreTimeError(inner) => Error::InvalidRestoreTimeError(inner),
                crate::error::RestoreTableToPointInTimeErrorKind::LimitExceededError(inner) => Error::LimitExceededError(inner),
                crate::error::RestoreTableToPointInTimeErrorKind::PointInTimeRecoveryUnavailableError(inner) => Error::PointInTimeRecoveryUnavailableError(inner),
                crate::error::RestoreTableToPointInTimeErrorKind::TableAlreadyExistsError(inner) => Error::TableAlreadyExistsError(inner),
                crate::error::RestoreTableToPointInTimeErrorKind::TableInUseError(inner) => Error::TableInUseError(inner),
                crate::error::RestoreTableToPointInTimeErrorKind::TableNotFoundError(inner) => Error::TableNotFoundError(inner),
                crate::error::RestoreTableToPointInTimeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ScanError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ScanError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ScanErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::ScanErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::ScanErrorKind::ProvisionedThroughputExceededError(inner) => {
                    Error::ProvisionedThroughputExceededError(inner)
                }
                crate::error::ScanErrorKind::RequestLimitExceeded(inner) => {
                    Error::RequestLimitExceeded(inner)
                }
                crate::error::ScanErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::ScanErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::TagResourceErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::TagResourceErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::TagResourceErrorKind::ResourceInUseError(inner) => {
                    Error::ResourceInUseError(inner)
                }
                crate::error::TagResourceErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TransactGetItemsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TransactGetItemsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TransactGetItemsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::TransactGetItemsErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::TransactGetItemsErrorKind::ProvisionedThroughputExceededError(
                    inner,
                ) => Error::ProvisionedThroughputExceededError(inner),
                crate::error::TransactGetItemsErrorKind::RequestLimitExceeded(inner) => {
                    Error::RequestLimitExceeded(inner)
                }
                crate::error::TransactGetItemsErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::TransactGetItemsErrorKind::TransactionCanceledError(inner) => {
                    Error::TransactionCanceledError(inner)
                }
                crate::error::TransactGetItemsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TransactWriteItemsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TransactWriteItemsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TransactWriteItemsErrorKind::IdempotentParameterMismatchError(
                    inner,
                ) => Error::IdempotentParameterMismatchError(inner),
                crate::error::TransactWriteItemsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::TransactWriteItemsErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::TransactWriteItemsErrorKind::ProvisionedThroughputExceededError(
                    inner,
                ) => Error::ProvisionedThroughputExceededError(inner),
                crate::error::TransactWriteItemsErrorKind::RequestLimitExceeded(inner) => {
                    Error::RequestLimitExceeded(inner)
                }
                crate::error::TransactWriteItemsErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::TransactWriteItemsErrorKind::TransactionCanceledError(inner) => {
                    Error::TransactionCanceledError(inner)
                }
                crate::error::TransactWriteItemsErrorKind::TransactionInProgressError(inner) => {
                    Error::TransactionInProgressError(inner)
                }
                crate::error::TransactWriteItemsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UntagResourceErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::UntagResourceErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UntagResourceErrorKind::ResourceInUseError(inner) => {
                    Error::ResourceInUseError(inner)
                }
                crate::error::UntagResourceErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateContinuousBackupsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateContinuousBackupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateContinuousBackupsErrorKind::ContinuousBackupsUnavailableError(inner) => Error::ContinuousBackupsUnavailableError(inner),
                crate::error::UpdateContinuousBackupsErrorKind::InternalServerError(inner) => Error::InternalServerError(inner),
                crate::error::UpdateContinuousBackupsErrorKind::InvalidEndpointError(inner) => Error::InvalidEndpointError(inner),
                crate::error::UpdateContinuousBackupsErrorKind::TableNotFoundError(inner) => Error::TableNotFoundError(inner),
                crate::error::UpdateContinuousBackupsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateContributorInsightsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateContributorInsightsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateContributorInsightsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdateContributorInsightsErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::UpdateContributorInsightsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateGlobalTableError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateGlobalTableError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateGlobalTableErrorKind::GlobalTableNotFoundError(inner) => {
                    Error::GlobalTableNotFoundError(inner)
                }
                crate::error::UpdateGlobalTableErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdateGlobalTableErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::UpdateGlobalTableErrorKind::ReplicaAlreadyExistsError(inner) => {
                    Error::ReplicaAlreadyExistsError(inner)
                }
                crate::error::UpdateGlobalTableErrorKind::ReplicaNotFoundError(inner) => {
                    Error::ReplicaNotFoundError(inner)
                }
                crate::error::UpdateGlobalTableErrorKind::TableNotFoundError(inner) => {
                    Error::TableNotFoundError(inner)
                }
                crate::error::UpdateGlobalTableErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateGlobalTableSettingsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateGlobalTableSettingsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateGlobalTableSettingsErrorKind::GlobalTableNotFoundError(
                    inner,
                ) => Error::GlobalTableNotFoundError(inner),
                crate::error::UpdateGlobalTableSettingsErrorKind::IndexNotFoundError(inner) => {
                    Error::IndexNotFoundError(inner)
                }
                crate::error::UpdateGlobalTableSettingsErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdateGlobalTableSettingsErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::UpdateGlobalTableSettingsErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UpdateGlobalTableSettingsErrorKind::ReplicaNotFoundError(inner) => {
                    Error::ReplicaNotFoundError(inner)
                }
                crate::error::UpdateGlobalTableSettingsErrorKind::ResourceInUseError(inner) => {
                    Error::ResourceInUseError(inner)
                }
                crate::error::UpdateGlobalTableSettingsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateItemError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateItemError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateItemErrorKind::ConditionalCheckFailedError(inner) => {
                    Error::ConditionalCheckFailedError(inner)
                }
                crate::error::UpdateItemErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdateItemErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::UpdateItemErrorKind::ItemCollectionSizeLimitExceededError(inner) => {
                    Error::ItemCollectionSizeLimitExceededError(inner)
                }
                crate::error::UpdateItemErrorKind::ProvisionedThroughputExceededError(inner) => {
                    Error::ProvisionedThroughputExceededError(inner)
                }
                crate::error::UpdateItemErrorKind::RequestLimitExceeded(inner) => {
                    Error::RequestLimitExceeded(inner)
                }
                crate::error::UpdateItemErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::UpdateItemErrorKind::TransactionConflictError(inner) => {
                    Error::TransactionConflictError(inner)
                }
                crate::error::UpdateItemErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateTableError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateTableError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateTableErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdateTableErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::UpdateTableErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UpdateTableErrorKind::ResourceInUseError(inner) => {
                    Error::ResourceInUseError(inner)
                }
                crate::error::UpdateTableErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::UpdateTableErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateTableReplicaAutoScalingError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateTableReplicaAutoScalingError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateTableReplicaAutoScalingErrorKind::InternalServerError(
                    inner,
                ) => Error::InternalServerError(inner),
                crate::error::UpdateTableReplicaAutoScalingErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UpdateTableReplicaAutoScalingErrorKind::ResourceInUseError(inner) => {
                    Error::ResourceInUseError(inner)
                }
                crate::error::UpdateTableReplicaAutoScalingErrorKind::ResourceNotFoundError(
                    inner,
                ) => Error::ResourceNotFoundError(inner),
                crate::error::UpdateTableReplicaAutoScalingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateTimeToLiveError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateTimeToLiveError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateTimeToLiveErrorKind::InternalServerError(inner) => {
                    Error::InternalServerError(inner)
                }
                crate::error::UpdateTimeToLiveErrorKind::InvalidEndpointError(inner) => {
                    Error::InvalidEndpointError(inner)
                }
                crate::error::UpdateTimeToLiveErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UpdateTimeToLiveErrorKind::ResourceInUseError(inner) => {
                    Error::ResourceInUseError(inner)
                }
                crate::error::UpdateTimeToLiveErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::UpdateTimeToLiveErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
