// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    ExpiredTokenError(crate::error::ExpiredTokenError),
    IDPCommunicationErrorError(crate::error::IDPCommunicationErrorError),
    IDPRejectedClaimError(crate::error::IDPRejectedClaimError),
    InvalidAuthorizationMessageError(crate::error::InvalidAuthorizationMessageError),
    InvalidIdentityTokenError(crate::error::InvalidIdentityTokenError),
    MalformedPolicyDocumentError(crate::error::MalformedPolicyDocumentError),
    PackedPolicyTooLargeError(crate::error::PackedPolicyTooLargeError),
    RegionDisabledError(crate::error::RegionDisabledError),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ExpiredTokenError(inner) => inner.fmt(f),
            Error::IDPCommunicationErrorError(inner) => inner.fmt(f),
            Error::IDPRejectedClaimError(inner) => inner.fmt(f),
            Error::InvalidAuthorizationMessageError(inner) => inner.fmt(f),
            Error::InvalidIdentityTokenError(inner) => inner.fmt(f),
            Error::MalformedPolicyDocumentError(inner) => inner.fmt(f),
            Error::PackedPolicyTooLargeError(inner) => inner.fmt(f),
            Error::RegionDisabledError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssumeRoleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AssumeRoleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssumeRoleErrorKind::ExpiredTokenError(inner) => {
                    Error::ExpiredTokenError(inner)
                }
                crate::error::AssumeRoleErrorKind::MalformedPolicyDocumentError(inner) => {
                    Error::MalformedPolicyDocumentError(inner)
                }
                crate::error::AssumeRoleErrorKind::PackedPolicyTooLargeError(inner) => {
                    Error::PackedPolicyTooLargeError(inner)
                }
                crate::error::AssumeRoleErrorKind::RegionDisabledError(inner) => {
                    Error::RegionDisabledError(inner)
                }
                crate::error::AssumeRoleErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssumeRoleWithSAMLError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AssumeRoleWithSAMLError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssumeRoleWithSAMLErrorKind::ExpiredTokenError(inner) => {
                    Error::ExpiredTokenError(inner)
                }
                crate::error::AssumeRoleWithSAMLErrorKind::IDPRejectedClaimError(inner) => {
                    Error::IDPRejectedClaimError(inner)
                }
                crate::error::AssumeRoleWithSAMLErrorKind::InvalidIdentityTokenError(inner) => {
                    Error::InvalidIdentityTokenError(inner)
                }
                crate::error::AssumeRoleWithSAMLErrorKind::MalformedPolicyDocumentError(inner) => {
                    Error::MalformedPolicyDocumentError(inner)
                }
                crate::error::AssumeRoleWithSAMLErrorKind::PackedPolicyTooLargeError(inner) => {
                    Error::PackedPolicyTooLargeError(inner)
                }
                crate::error::AssumeRoleWithSAMLErrorKind::RegionDisabledError(inner) => {
                    Error::RegionDisabledError(inner)
                }
                crate::error::AssumeRoleWithSAMLErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssumeRoleWithWebIdentityError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AssumeRoleWithWebIdentityError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssumeRoleWithWebIdentityErrorKind::ExpiredTokenError(inner) => {
                    Error::ExpiredTokenError(inner)
                }
                crate::error::AssumeRoleWithWebIdentityErrorKind::IDPCommunicationErrorError(
                    inner,
                ) => Error::IDPCommunicationErrorError(inner),
                crate::error::AssumeRoleWithWebIdentityErrorKind::IDPRejectedClaimError(inner) => {
                    Error::IDPRejectedClaimError(inner)
                }
                crate::error::AssumeRoleWithWebIdentityErrorKind::InvalidIdentityTokenError(
                    inner,
                ) => Error::InvalidIdentityTokenError(inner),
                crate::error::AssumeRoleWithWebIdentityErrorKind::MalformedPolicyDocumentError(
                    inner,
                ) => Error::MalformedPolicyDocumentError(inner),
                crate::error::AssumeRoleWithWebIdentityErrorKind::PackedPolicyTooLargeError(
                    inner,
                ) => Error::PackedPolicyTooLargeError(inner),
                crate::error::AssumeRoleWithWebIdentityErrorKind::RegionDisabledError(inner) => {
                    Error::RegionDisabledError(inner)
                }
                crate::error::AssumeRoleWithWebIdentityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DecodeAuthorizationMessageError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DecodeAuthorizationMessageError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DecodeAuthorizationMessageErrorKind::InvalidAuthorizationMessageError(inner) => Error::InvalidAuthorizationMessageError(inner),
                crate::error::DecodeAuthorizationMessageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetAccessKeyInfoError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetAccessKeyInfoError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetAccessKeyInfoErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetCallerIdentityError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetCallerIdentityError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetCallerIdentityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetFederationTokenError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetFederationTokenError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetFederationTokenErrorKind::MalformedPolicyDocumentError(inner) => {
                    Error::MalformedPolicyDocumentError(inner)
                }
                crate::error::GetFederationTokenErrorKind::PackedPolicyTooLargeError(inner) => {
                    Error::PackedPolicyTooLargeError(inner)
                }
                crate::error::GetFederationTokenErrorKind::RegionDisabledError(inner) => {
                    Error::RegionDisabledError(inner)
                }
                crate::error::GetFederationTokenErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetSessionTokenError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetSessionTokenError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetSessionTokenErrorKind::RegionDisabledError(inner) => {
                    Error::RegionDisabledError(inner)
                }
                crate::error::GetSessionTokenErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
