// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    CodeSigningConfigNotFoundError(crate::error::CodeSigningConfigNotFoundError),
    CodeStorageExceededError(crate::error::CodeStorageExceededError),
    CodeVerificationFailedError(crate::error::CodeVerificationFailedError),
    EC2AccessDeniedError(crate::error::EC2AccessDeniedError),
    EC2ThrottledError(crate::error::EC2ThrottledError),
    EC2UnexpectedError(crate::error::EC2UnexpectedError),
    EFSIOError(crate::error::EFSIOError),
    EFSMountConnectivityError(crate::error::EFSMountConnectivityError),
    EFSMountFailureError(crate::error::EFSMountFailureError),
    EFSMountTimeoutError(crate::error::EFSMountTimeoutError),
    ENILimitReachedError(crate::error::ENILimitReachedError),
    InvalidCodeSignatureError(crate::error::InvalidCodeSignatureError),
    InvalidParameterValueError(crate::error::InvalidParameterValueError),
    InvalidRequestContentError(crate::error::InvalidRequestContentError),
    InvalidRuntimeError(crate::error::InvalidRuntimeError),
    InvalidSecurityGroupIDError(crate::error::InvalidSecurityGroupIDError),
    InvalidSubnetIDError(crate::error::InvalidSubnetIDError),
    InvalidZipFileError(crate::error::InvalidZipFileError),
    KMSAccessDeniedError(crate::error::KMSAccessDeniedError),
    KMSDisabledError(crate::error::KMSDisabledError),
    KMSInvalidStateError(crate::error::KMSInvalidStateError),
    KMSNotFoundError(crate::error::KMSNotFoundError),
    PolicyLengthExceededError(crate::error::PolicyLengthExceededError),
    PreconditionFailedError(crate::error::PreconditionFailedError),
    ProvisionedConcurrencyConfigNotFoundError(
        crate::error::ProvisionedConcurrencyConfigNotFoundError,
    ),
    RequestTooLargeError(crate::error::RequestTooLargeError),
    ResourceConflictError(crate::error::ResourceConflictError),
    ResourceInUseError(crate::error::ResourceInUseError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    ResourceNotReadyError(crate::error::ResourceNotReadyError),
    ServiceError(crate::error::ServiceError),
    SubnetIPAddressLimitReachedError(crate::error::SubnetIPAddressLimitReachedError),
    TooManyRequestsError(crate::error::TooManyRequestsError),
    UnsupportedMediaTypeError(crate::error::UnsupportedMediaTypeError),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::CodeSigningConfigNotFoundError(inner) => inner.fmt(f),
            Error::CodeStorageExceededError(inner) => inner.fmt(f),
            Error::CodeVerificationFailedError(inner) => inner.fmt(f),
            Error::EC2AccessDeniedError(inner) => inner.fmt(f),
            Error::EC2ThrottledError(inner) => inner.fmt(f),
            Error::EC2UnexpectedError(inner) => inner.fmt(f),
            Error::EFSIOError(inner) => inner.fmt(f),
            Error::EFSMountConnectivityError(inner) => inner.fmt(f),
            Error::EFSMountFailureError(inner) => inner.fmt(f),
            Error::EFSMountTimeoutError(inner) => inner.fmt(f),
            Error::ENILimitReachedError(inner) => inner.fmt(f),
            Error::InvalidCodeSignatureError(inner) => inner.fmt(f),
            Error::InvalidParameterValueError(inner) => inner.fmt(f),
            Error::InvalidRequestContentError(inner) => inner.fmt(f),
            Error::InvalidRuntimeError(inner) => inner.fmt(f),
            Error::InvalidSecurityGroupIDError(inner) => inner.fmt(f),
            Error::InvalidSubnetIDError(inner) => inner.fmt(f),
            Error::InvalidZipFileError(inner) => inner.fmt(f),
            Error::KMSAccessDeniedError(inner) => inner.fmt(f),
            Error::KMSDisabledError(inner) => inner.fmt(f),
            Error::KMSInvalidStateError(inner) => inner.fmt(f),
            Error::KMSNotFoundError(inner) => inner.fmt(f),
            Error::PolicyLengthExceededError(inner) => inner.fmt(f),
            Error::PreconditionFailedError(inner) => inner.fmt(f),
            Error::ProvisionedConcurrencyConfigNotFoundError(inner) => inner.fmt(f),
            Error::RequestTooLargeError(inner) => inner.fmt(f),
            Error::ResourceConflictError(inner) => inner.fmt(f),
            Error::ResourceInUseError(inner) => inner.fmt(f),
            Error::ResourceNotFoundError(inner) => inner.fmt(f),
            Error::ResourceNotReadyError(inner) => inner.fmt(f),
            Error::ServiceError(inner) => inner.fmt(f),
            Error::SubnetIPAddressLimitReachedError(inner) => inner.fmt(f),
            Error::TooManyRequestsError(inner) => inner.fmt(f),
            Error::UnsupportedMediaTypeError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AddLayerVersionPermissionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AddLayerVersionPermissionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AddLayerVersionPermissionErrorKind::InvalidParameterValueError(
                    inner,
                ) => Error::InvalidParameterValueError(inner),
                crate::error::AddLayerVersionPermissionErrorKind::PolicyLengthExceededError(
                    inner,
                ) => Error::PolicyLengthExceededError(inner),
                crate::error::AddLayerVersionPermissionErrorKind::PreconditionFailedError(
                    inner,
                ) => Error::PreconditionFailedError(inner),
                crate::error::AddLayerVersionPermissionErrorKind::ResourceConflictError(inner) => {
                    Error::ResourceConflictError(inner)
                }
                crate::error::AddLayerVersionPermissionErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::AddLayerVersionPermissionErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::AddLayerVersionPermissionErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::AddLayerVersionPermissionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AddPermissionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AddPermissionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AddPermissionErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::AddPermissionErrorKind::PolicyLengthExceededError(inner) => {
                    Error::PolicyLengthExceededError(inner)
                }
                crate::error::AddPermissionErrorKind::PreconditionFailedError(inner) => {
                    Error::PreconditionFailedError(inner)
                }
                crate::error::AddPermissionErrorKind::ResourceConflictError(inner) => {
                    Error::ResourceConflictError(inner)
                }
                crate::error::AddPermissionErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::AddPermissionErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::AddPermissionErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::AddPermissionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateAliasError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateAliasError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateAliasErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::CreateAliasErrorKind::ResourceConflictError(inner) => {
                    Error::ResourceConflictError(inner)
                }
                crate::error::CreateAliasErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::CreateAliasErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::CreateAliasErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateAliasErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateCodeSigningConfigError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateCodeSigningConfigError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateCodeSigningConfigErrorKind::InvalidParameterValueError(
                    inner,
                ) => Error::InvalidParameterValueError(inner),
                crate::error::CreateCodeSigningConfigErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::CreateCodeSigningConfigErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateEventSourceMappingError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateEventSourceMappingError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateEventSourceMappingErrorKind::InvalidParameterValueError(
                    inner,
                ) => Error::InvalidParameterValueError(inner),
                crate::error::CreateEventSourceMappingErrorKind::ResourceConflictError(inner) => {
                    Error::ResourceConflictError(inner)
                }
                crate::error::CreateEventSourceMappingErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::CreateEventSourceMappingErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::CreateEventSourceMappingErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateEventSourceMappingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateFunctionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateFunctionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateFunctionErrorKind::CodeSigningConfigNotFoundError(inner) => {
                    Error::CodeSigningConfigNotFoundError(inner)
                }
                crate::error::CreateFunctionErrorKind::CodeStorageExceededError(inner) => {
                    Error::CodeStorageExceededError(inner)
                }
                crate::error::CreateFunctionErrorKind::CodeVerificationFailedError(inner) => {
                    Error::CodeVerificationFailedError(inner)
                }
                crate::error::CreateFunctionErrorKind::InvalidCodeSignatureError(inner) => {
                    Error::InvalidCodeSignatureError(inner)
                }
                crate::error::CreateFunctionErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::CreateFunctionErrorKind::ResourceConflictError(inner) => {
                    Error::ResourceConflictError(inner)
                }
                crate::error::CreateFunctionErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::CreateFunctionErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::CreateFunctionErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateFunctionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteAliasError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteAliasError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteAliasErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::DeleteAliasErrorKind::ResourceConflictError(inner) => {
                    Error::ResourceConflictError(inner)
                }
                crate::error::DeleteAliasErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::DeleteAliasErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteAliasErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteCodeSigningConfigError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteCodeSigningConfigError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteCodeSigningConfigErrorKind::InvalidParameterValueError(
                    inner,
                ) => Error::InvalidParameterValueError(inner),
                crate::error::DeleteCodeSigningConfigErrorKind::ResourceConflictError(inner) => {
                    Error::ResourceConflictError(inner)
                }
                crate::error::DeleteCodeSigningConfigErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DeleteCodeSigningConfigErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::DeleteCodeSigningConfigErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteEventSourceMappingError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteEventSourceMappingError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteEventSourceMappingErrorKind::InvalidParameterValueError(
                    inner,
                ) => Error::InvalidParameterValueError(inner),
                crate::error::DeleteEventSourceMappingErrorKind::ResourceInUseError(inner) => {
                    Error::ResourceInUseError(inner)
                }
                crate::error::DeleteEventSourceMappingErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DeleteEventSourceMappingErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::DeleteEventSourceMappingErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteEventSourceMappingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteFunctionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteFunctionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteFunctionErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::DeleteFunctionErrorKind::ResourceConflictError(inner) => {
                    Error::ResourceConflictError(inner)
                }
                crate::error::DeleteFunctionErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DeleteFunctionErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::DeleteFunctionErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteFunctionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteFunctionCodeSigningConfigError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteFunctionCodeSigningConfigError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteFunctionCodeSigningConfigErrorKind::CodeSigningConfigNotFoundError(inner) => Error::CodeSigningConfigNotFoundError(inner),
                crate::error::DeleteFunctionCodeSigningConfigErrorKind::InvalidParameterValueError(inner) => Error::InvalidParameterValueError(inner),
                crate::error::DeleteFunctionCodeSigningConfigErrorKind::ResourceConflictError(inner) => Error::ResourceConflictError(inner),
                crate::error::DeleteFunctionCodeSigningConfigErrorKind::ResourceNotFoundError(inner) => Error::ResourceNotFoundError(inner),
                crate::error::DeleteFunctionCodeSigningConfigErrorKind::ServiceError(inner) => Error::ServiceError(inner),
                crate::error::DeleteFunctionCodeSigningConfigErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::DeleteFunctionCodeSigningConfigErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteFunctionConcurrencyError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteFunctionConcurrencyError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteFunctionConcurrencyErrorKind::InvalidParameterValueError(
                    inner,
                ) => Error::InvalidParameterValueError(inner),
                crate::error::DeleteFunctionConcurrencyErrorKind::ResourceConflictError(inner) => {
                    Error::ResourceConflictError(inner)
                }
                crate::error::DeleteFunctionConcurrencyErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DeleteFunctionConcurrencyErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::DeleteFunctionConcurrencyErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteFunctionConcurrencyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteFunctionEventInvokeConfigError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteFunctionEventInvokeConfigError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteFunctionEventInvokeConfigErrorKind::InvalidParameterValueError(inner) => Error::InvalidParameterValueError(inner),
                crate::error::DeleteFunctionEventInvokeConfigErrorKind::ResourceNotFoundError(inner) => Error::ResourceNotFoundError(inner),
                crate::error::DeleteFunctionEventInvokeConfigErrorKind::ServiceError(inner) => Error::ServiceError(inner),
                crate::error::DeleteFunctionEventInvokeConfigErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::DeleteFunctionEventInvokeConfigErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteLayerVersionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteLayerVersionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteLayerVersionErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::DeleteLayerVersionErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteLayerVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteProvisionedConcurrencyConfigError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteProvisionedConcurrencyConfigError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteProvisionedConcurrencyConfigErrorKind::InvalidParameterValueError(inner) => Error::InvalidParameterValueError(inner),
                crate::error::DeleteProvisionedConcurrencyConfigErrorKind::ResourceConflictError(inner) => Error::ResourceConflictError(inner),
                crate::error::DeleteProvisionedConcurrencyConfigErrorKind::ResourceNotFoundError(inner) => Error::ResourceNotFoundError(inner),
                crate::error::DeleteProvisionedConcurrencyConfigErrorKind::ServiceError(inner) => Error::ServiceError(inner),
                crate::error::DeleteProvisionedConcurrencyConfigErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::DeleteProvisionedConcurrencyConfigErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetAccountSettingsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetAccountSettingsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetAccountSettingsErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::GetAccountSettingsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetAccountSettingsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetAliasError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetAliasError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetAliasErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::GetAliasErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetAliasErrorKind::ServiceError(inner) => Error::ServiceError(inner),
                crate::error::GetAliasErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetAliasErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetCodeSigningConfigError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetCodeSigningConfigError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetCodeSigningConfigErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::GetCodeSigningConfigErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetCodeSigningConfigErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::GetCodeSigningConfigErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetEventSourceMappingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetEventSourceMappingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetEventSourceMappingErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::GetEventSourceMappingErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetEventSourceMappingErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::GetEventSourceMappingErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetEventSourceMappingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetFunctionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetFunctionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetFunctionErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::GetFunctionErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetFunctionErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::GetFunctionErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetFunctionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetFunctionCodeSigningConfigError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetFunctionCodeSigningConfigError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetFunctionCodeSigningConfigErrorKind::InvalidParameterValueError(
                    inner,
                ) => Error::InvalidParameterValueError(inner),
                crate::error::GetFunctionCodeSigningConfigErrorKind::ResourceNotFoundError(
                    inner,
                ) => Error::ResourceNotFoundError(inner),
                crate::error::GetFunctionCodeSigningConfigErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::GetFunctionCodeSigningConfigErrorKind::TooManyRequestsError(
                    inner,
                ) => Error::TooManyRequestsError(inner),
                crate::error::GetFunctionCodeSigningConfigErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetFunctionConcurrencyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetFunctionConcurrencyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetFunctionConcurrencyErrorKind::InvalidParameterValueError(
                    inner,
                ) => Error::InvalidParameterValueError(inner),
                crate::error::GetFunctionConcurrencyErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetFunctionConcurrencyErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::GetFunctionConcurrencyErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetFunctionConcurrencyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetFunctionConfigurationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetFunctionConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetFunctionConfigurationErrorKind::InvalidParameterValueError(
                    inner,
                ) => Error::InvalidParameterValueError(inner),
                crate::error::GetFunctionConfigurationErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetFunctionConfigurationErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::GetFunctionConfigurationErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetFunctionConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetFunctionEventInvokeConfigError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetFunctionEventInvokeConfigError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetFunctionEventInvokeConfigErrorKind::InvalidParameterValueError(
                    inner,
                ) => Error::InvalidParameterValueError(inner),
                crate::error::GetFunctionEventInvokeConfigErrorKind::ResourceNotFoundError(
                    inner,
                ) => Error::ResourceNotFoundError(inner),
                crate::error::GetFunctionEventInvokeConfigErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::GetFunctionEventInvokeConfigErrorKind::TooManyRequestsError(
                    inner,
                ) => Error::TooManyRequestsError(inner),
                crate::error::GetFunctionEventInvokeConfigErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetLayerVersionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetLayerVersionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetLayerVersionErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::GetLayerVersionErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetLayerVersionErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::GetLayerVersionErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetLayerVersionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetLayerVersionByArnError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetLayerVersionByArnError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetLayerVersionByArnErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::GetLayerVersionByArnErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetLayerVersionByArnErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::GetLayerVersionByArnErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetLayerVersionByArnErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetLayerVersionPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetLayerVersionPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetLayerVersionPolicyErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::GetLayerVersionPolicyErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetLayerVersionPolicyErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::GetLayerVersionPolicyErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetLayerVersionPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetPolicyErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::GetPolicyErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetPolicyErrorKind::ServiceError(inner) => Error::ServiceError(inner),
                crate::error::GetPolicyErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetPolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetProvisionedConcurrencyConfigError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetProvisionedConcurrencyConfigError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::GetProvisionedConcurrencyConfigErrorKind::InvalidParameterValueError(inner) => Error::InvalidParameterValueError(inner),
                crate::error::GetProvisionedConcurrencyConfigErrorKind::ProvisionedConcurrencyConfigNotFoundError(inner) => Error::ProvisionedConcurrencyConfigNotFoundError(inner),
                crate::error::GetProvisionedConcurrencyConfigErrorKind::ResourceNotFoundError(inner) => Error::ResourceNotFoundError(inner),
                crate::error::GetProvisionedConcurrencyConfigErrorKind::ServiceError(inner) => Error::ServiceError(inner),
                crate::error::GetProvisionedConcurrencyConfigErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::GetProvisionedConcurrencyConfigErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::InvokeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::InvokeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::InvokeErrorKind::EC2AccessDeniedError(inner) => {
                    Error::EC2AccessDeniedError(inner)
                }
                crate::error::InvokeErrorKind::EC2ThrottledError(inner) => {
                    Error::EC2ThrottledError(inner)
                }
                crate::error::InvokeErrorKind::EC2UnexpectedError(inner) => {
                    Error::EC2UnexpectedError(inner)
                }
                crate::error::InvokeErrorKind::EFSIOError(inner) => Error::EFSIOError(inner),
                crate::error::InvokeErrorKind::EFSMountConnectivityError(inner) => {
                    Error::EFSMountConnectivityError(inner)
                }
                crate::error::InvokeErrorKind::EFSMountFailureError(inner) => {
                    Error::EFSMountFailureError(inner)
                }
                crate::error::InvokeErrorKind::EFSMountTimeoutError(inner) => {
                    Error::EFSMountTimeoutError(inner)
                }
                crate::error::InvokeErrorKind::ENILimitReachedError(inner) => {
                    Error::ENILimitReachedError(inner)
                }
                crate::error::InvokeErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::InvokeErrorKind::InvalidRequestContentError(inner) => {
                    Error::InvalidRequestContentError(inner)
                }
                crate::error::InvokeErrorKind::InvalidRuntimeError(inner) => {
                    Error::InvalidRuntimeError(inner)
                }
                crate::error::InvokeErrorKind::InvalidSecurityGroupIDError(inner) => {
                    Error::InvalidSecurityGroupIDError(inner)
                }
                crate::error::InvokeErrorKind::InvalidSubnetIDError(inner) => {
                    Error::InvalidSubnetIDError(inner)
                }
                crate::error::InvokeErrorKind::InvalidZipFileError(inner) => {
                    Error::InvalidZipFileError(inner)
                }
                crate::error::InvokeErrorKind::KMSAccessDeniedError(inner) => {
                    Error::KMSAccessDeniedError(inner)
                }
                crate::error::InvokeErrorKind::KMSDisabledError(inner) => {
                    Error::KMSDisabledError(inner)
                }
                crate::error::InvokeErrorKind::KMSInvalidStateError(inner) => {
                    Error::KMSInvalidStateError(inner)
                }
                crate::error::InvokeErrorKind::KMSNotFoundError(inner) => {
                    Error::KMSNotFoundError(inner)
                }
                crate::error::InvokeErrorKind::RequestTooLargeError(inner) => {
                    Error::RequestTooLargeError(inner)
                }
                crate::error::InvokeErrorKind::ResourceConflictError(inner) => {
                    Error::ResourceConflictError(inner)
                }
                crate::error::InvokeErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::InvokeErrorKind::ResourceNotReadyError(inner) => {
                    Error::ResourceNotReadyError(inner)
                }
                crate::error::InvokeErrorKind::ServiceError(inner) => Error::ServiceError(inner),
                crate::error::InvokeErrorKind::SubnetIPAddressLimitReachedError(inner) => {
                    Error::SubnetIPAddressLimitReachedError(inner)
                }
                crate::error::InvokeErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::InvokeErrorKind::UnsupportedMediaTypeError(inner) => {
                    Error::UnsupportedMediaTypeError(inner)
                }
                crate::error::InvokeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::InvokeAsyncError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::InvokeAsyncError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::InvokeAsyncErrorKind::InvalidRequestContentError(inner) => {
                    Error::InvalidRequestContentError(inner)
                }
                crate::error::InvokeAsyncErrorKind::InvalidRuntimeError(inner) => {
                    Error::InvalidRuntimeError(inner)
                }
                crate::error::InvokeAsyncErrorKind::ResourceConflictError(inner) => {
                    Error::ResourceConflictError(inner)
                }
                crate::error::InvokeAsyncErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::InvokeAsyncErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::InvokeAsyncErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListAliasesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListAliasesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListAliasesErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::ListAliasesErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::ListAliasesErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::ListAliasesErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListAliasesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListCodeSigningConfigsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListCodeSigningConfigsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListCodeSigningConfigsErrorKind::InvalidParameterValueError(
                    inner,
                ) => Error::InvalidParameterValueError(inner),
                crate::error::ListCodeSigningConfigsErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::ListCodeSigningConfigsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListEventSourceMappingsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListEventSourceMappingsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListEventSourceMappingsErrorKind::InvalidParameterValueError(
                    inner,
                ) => Error::InvalidParameterValueError(inner),
                crate::error::ListEventSourceMappingsErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::ListEventSourceMappingsErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::ListEventSourceMappingsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListEventSourceMappingsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListFunctionEventInvokeConfigsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListFunctionEventInvokeConfigsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListFunctionEventInvokeConfigsErrorKind::InvalidParameterValueError(inner) => Error::InvalidParameterValueError(inner),
                crate::error::ListFunctionEventInvokeConfigsErrorKind::ResourceNotFoundError(inner) => Error::ResourceNotFoundError(inner),
                crate::error::ListFunctionEventInvokeConfigsErrorKind::ServiceError(inner) => Error::ServiceError(inner),
                crate::error::ListFunctionEventInvokeConfigsErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::ListFunctionEventInvokeConfigsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListFunctionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListFunctionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListFunctionsErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::ListFunctionsErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::ListFunctionsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListFunctionsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListFunctionsByCodeSigningConfigError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListFunctionsByCodeSigningConfigError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListFunctionsByCodeSigningConfigErrorKind::InvalidParameterValueError(inner) => Error::InvalidParameterValueError(inner),
                crate::error::ListFunctionsByCodeSigningConfigErrorKind::ResourceNotFoundError(inner) => Error::ResourceNotFoundError(inner),
                crate::error::ListFunctionsByCodeSigningConfigErrorKind::ServiceError(inner) => Error::ServiceError(inner),
                crate::error::ListFunctionsByCodeSigningConfigErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListLayersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListLayersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListLayersErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::ListLayersErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::ListLayersErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListLayersErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListLayerVersionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListLayerVersionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListLayerVersionsErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::ListLayerVersionsErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::ListLayerVersionsErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::ListLayerVersionsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListLayerVersionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListProvisionedConcurrencyConfigsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListProvisionedConcurrencyConfigsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListProvisionedConcurrencyConfigsErrorKind::InvalidParameterValueError(inner) => Error::InvalidParameterValueError(inner),
                crate::error::ListProvisionedConcurrencyConfigsErrorKind::ResourceNotFoundError(inner) => Error::ResourceNotFoundError(inner),
                crate::error::ListProvisionedConcurrencyConfigsErrorKind::ServiceError(inner) => Error::ServiceError(inner),
                crate::error::ListProvisionedConcurrencyConfigsErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::ListProvisionedConcurrencyConfigsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::ListTagsErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::ListTagsErrorKind::ServiceError(inner) => Error::ServiceError(inner),
                crate::error::ListTagsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListVersionsByFunctionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListVersionsByFunctionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListVersionsByFunctionErrorKind::InvalidParameterValueError(
                    inner,
                ) => Error::InvalidParameterValueError(inner),
                crate::error::ListVersionsByFunctionErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::ListVersionsByFunctionErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::ListVersionsByFunctionErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ListVersionsByFunctionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PublishLayerVersionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PublishLayerVersionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PublishLayerVersionErrorKind::CodeStorageExceededError(inner) => {
                    Error::CodeStorageExceededError(inner)
                }
                crate::error::PublishLayerVersionErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::PublishLayerVersionErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::PublishLayerVersionErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::PublishLayerVersionErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::PublishLayerVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PublishVersionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PublishVersionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PublishVersionErrorKind::CodeStorageExceededError(inner) => {
                    Error::CodeStorageExceededError(inner)
                }
                crate::error::PublishVersionErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::PublishVersionErrorKind::PreconditionFailedError(inner) => {
                    Error::PreconditionFailedError(inner)
                }
                crate::error::PublishVersionErrorKind::ResourceConflictError(inner) => {
                    Error::ResourceConflictError(inner)
                }
                crate::error::PublishVersionErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::PublishVersionErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::PublishVersionErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::PublishVersionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutFunctionCodeSigningConfigError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutFunctionCodeSigningConfigError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::PutFunctionCodeSigningConfigErrorKind::CodeSigningConfigNotFoundError(inner) => Error::CodeSigningConfigNotFoundError(inner),
                crate::error::PutFunctionCodeSigningConfigErrorKind::InvalidParameterValueError(inner) => Error::InvalidParameterValueError(inner),
                crate::error::PutFunctionCodeSigningConfigErrorKind::ResourceConflictError(inner) => Error::ResourceConflictError(inner),
                crate::error::PutFunctionCodeSigningConfigErrorKind::ResourceNotFoundError(inner) => Error::ResourceNotFoundError(inner),
                crate::error::PutFunctionCodeSigningConfigErrorKind::ServiceError(inner) => Error::ServiceError(inner),
                crate::error::PutFunctionCodeSigningConfigErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::PutFunctionCodeSigningConfigErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutFunctionConcurrencyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutFunctionConcurrencyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutFunctionConcurrencyErrorKind::InvalidParameterValueError(
                    inner,
                ) => Error::InvalidParameterValueError(inner),
                crate::error::PutFunctionConcurrencyErrorKind::ResourceConflictError(inner) => {
                    Error::ResourceConflictError(inner)
                }
                crate::error::PutFunctionConcurrencyErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::PutFunctionConcurrencyErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::PutFunctionConcurrencyErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::PutFunctionConcurrencyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutFunctionEventInvokeConfigError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutFunctionEventInvokeConfigError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutFunctionEventInvokeConfigErrorKind::InvalidParameterValueError(
                    inner,
                ) => Error::InvalidParameterValueError(inner),
                crate::error::PutFunctionEventInvokeConfigErrorKind::ResourceNotFoundError(
                    inner,
                ) => Error::ResourceNotFoundError(inner),
                crate::error::PutFunctionEventInvokeConfigErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::PutFunctionEventInvokeConfigErrorKind::TooManyRequestsError(
                    inner,
                ) => Error::TooManyRequestsError(inner),
                crate::error::PutFunctionEventInvokeConfigErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutProvisionedConcurrencyConfigError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutProvisionedConcurrencyConfigError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::PutProvisionedConcurrencyConfigErrorKind::InvalidParameterValueError(inner) => Error::InvalidParameterValueError(inner),
                crate::error::PutProvisionedConcurrencyConfigErrorKind::ResourceConflictError(inner) => Error::ResourceConflictError(inner),
                crate::error::PutProvisionedConcurrencyConfigErrorKind::ResourceNotFoundError(inner) => Error::ResourceNotFoundError(inner),
                crate::error::PutProvisionedConcurrencyConfigErrorKind::ServiceError(inner) => Error::ServiceError(inner),
                crate::error::PutProvisionedConcurrencyConfigErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::PutProvisionedConcurrencyConfigErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RemoveLayerVersionPermissionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RemoveLayerVersionPermissionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RemoveLayerVersionPermissionErrorKind::InvalidParameterValueError(
                    inner,
                ) => Error::InvalidParameterValueError(inner),
                crate::error::RemoveLayerVersionPermissionErrorKind::PreconditionFailedError(
                    inner,
                ) => Error::PreconditionFailedError(inner),
                crate::error::RemoveLayerVersionPermissionErrorKind::ResourceNotFoundError(
                    inner,
                ) => Error::ResourceNotFoundError(inner),
                crate::error::RemoveLayerVersionPermissionErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::RemoveLayerVersionPermissionErrorKind::TooManyRequestsError(
                    inner,
                ) => Error::TooManyRequestsError(inner),
                crate::error::RemoveLayerVersionPermissionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RemovePermissionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RemovePermissionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RemovePermissionErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::RemovePermissionErrorKind::PreconditionFailedError(inner) => {
                    Error::PreconditionFailedError(inner)
                }
                crate::error::RemovePermissionErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::RemovePermissionErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::RemovePermissionErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::RemovePermissionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::TagResourceErrorKind::ResourceConflictError(inner) => {
                    Error::ResourceConflictError(inner)
                }
                crate::error::TagResourceErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::TagResourceErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::TagResourceErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::UntagResourceErrorKind::ResourceConflictError(inner) => {
                    Error::ResourceConflictError(inner)
                }
                crate::error::UntagResourceErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::UntagResourceErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::UntagResourceErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateAliasError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateAliasError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateAliasErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::UpdateAliasErrorKind::PreconditionFailedError(inner) => {
                    Error::PreconditionFailedError(inner)
                }
                crate::error::UpdateAliasErrorKind::ResourceConflictError(inner) => {
                    Error::ResourceConflictError(inner)
                }
                crate::error::UpdateAliasErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::UpdateAliasErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::UpdateAliasErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateAliasErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateCodeSigningConfigError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateCodeSigningConfigError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateCodeSigningConfigErrorKind::InvalidParameterValueError(
                    inner,
                ) => Error::InvalidParameterValueError(inner),
                crate::error::UpdateCodeSigningConfigErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::UpdateCodeSigningConfigErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::UpdateCodeSigningConfigErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateEventSourceMappingError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateEventSourceMappingError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateEventSourceMappingErrorKind::InvalidParameterValueError(
                    inner,
                ) => Error::InvalidParameterValueError(inner),
                crate::error::UpdateEventSourceMappingErrorKind::ResourceConflictError(inner) => {
                    Error::ResourceConflictError(inner)
                }
                crate::error::UpdateEventSourceMappingErrorKind::ResourceInUseError(inner) => {
                    Error::ResourceInUseError(inner)
                }
                crate::error::UpdateEventSourceMappingErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::UpdateEventSourceMappingErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::UpdateEventSourceMappingErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateEventSourceMappingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateFunctionCodeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateFunctionCodeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateFunctionCodeErrorKind::CodeSigningConfigNotFoundError(
                    inner,
                ) => Error::CodeSigningConfigNotFoundError(inner),
                crate::error::UpdateFunctionCodeErrorKind::CodeStorageExceededError(inner) => {
                    Error::CodeStorageExceededError(inner)
                }
                crate::error::UpdateFunctionCodeErrorKind::CodeVerificationFailedError(inner) => {
                    Error::CodeVerificationFailedError(inner)
                }
                crate::error::UpdateFunctionCodeErrorKind::InvalidCodeSignatureError(inner) => {
                    Error::InvalidCodeSignatureError(inner)
                }
                crate::error::UpdateFunctionCodeErrorKind::InvalidParameterValueError(inner) => {
                    Error::InvalidParameterValueError(inner)
                }
                crate::error::UpdateFunctionCodeErrorKind::PreconditionFailedError(inner) => {
                    Error::PreconditionFailedError(inner)
                }
                crate::error::UpdateFunctionCodeErrorKind::ResourceConflictError(inner) => {
                    Error::ResourceConflictError(inner)
                }
                crate::error::UpdateFunctionCodeErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::UpdateFunctionCodeErrorKind::ServiceError(inner) => {
                    Error::ServiceError(inner)
                }
                crate::error::UpdateFunctionCodeErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateFunctionCodeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateFunctionConfigurationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateFunctionConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateFunctionConfigurationErrorKind::CodeSigningConfigNotFoundError(inner) => Error::CodeSigningConfigNotFoundError(inner),
                crate::error::UpdateFunctionConfigurationErrorKind::CodeVerificationFailedError(inner) => Error::CodeVerificationFailedError(inner),
                crate::error::UpdateFunctionConfigurationErrorKind::InvalidCodeSignatureError(inner) => Error::InvalidCodeSignatureError(inner),
                crate::error::UpdateFunctionConfigurationErrorKind::InvalidParameterValueError(inner) => Error::InvalidParameterValueError(inner),
                crate::error::UpdateFunctionConfigurationErrorKind::PreconditionFailedError(inner) => Error::PreconditionFailedError(inner),
                crate::error::UpdateFunctionConfigurationErrorKind::ResourceConflictError(inner) => Error::ResourceConflictError(inner),
                crate::error::UpdateFunctionConfigurationErrorKind::ResourceNotFoundError(inner) => Error::ResourceNotFoundError(inner),
                crate::error::UpdateFunctionConfigurationErrorKind::ServiceError(inner) => Error::ServiceError(inner),
                crate::error::UpdateFunctionConfigurationErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::UpdateFunctionConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateFunctionEventInvokeConfigError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateFunctionEventInvokeConfigError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateFunctionEventInvokeConfigErrorKind::InvalidParameterValueError(inner) => Error::InvalidParameterValueError(inner),
                crate::error::UpdateFunctionEventInvokeConfigErrorKind::ResourceNotFoundError(inner) => Error::ResourceNotFoundError(inner),
                crate::error::UpdateFunctionEventInvokeConfigErrorKind::ServiceError(inner) => Error::ServiceError(inner),
                crate::error::UpdateFunctionEventInvokeConfigErrorKind::TooManyRequestsError(inner) => Error::TooManyRequestsError(inner),
                crate::error::UpdateFunctionEventInvokeConfigErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
