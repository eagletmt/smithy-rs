// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_add_layer_version_permission_input_body(
    input: &crate::input::AddLayerVersionPermissionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::AddLayerVersionPermissionInputBody {
        statement_id: &input.statement_id,
        action: &input.action,
        principal: &input.principal,
        organization_id: &input.organization_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_add_permission_input_body(
    input: &crate::input::AddPermissionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::AddPermissionInputBody {
        statement_id: &input.statement_id,
        action: &input.action,
        principal: &input.principal,
        source_arn: &input.source_arn,
        source_account: &input.source_account,
        event_source_token: &input.event_source_token,
        revision_id: &input.revision_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_alias_input_body(
    input: &crate::input::CreateAliasInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateAliasInputBody {
        name: &input.name,
        function_version: &input.function_version,
        description: &input.description,
        routing_config: &input.routing_config,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_code_signing_config_input_body(
    input: &crate::input::CreateCodeSigningConfigInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateCodeSigningConfigInputBody {
        description: &input.description,
        allowed_publishers: &input.allowed_publishers,
        code_signing_policies: &input.code_signing_policies,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_event_source_mapping_input_body(
    input: &crate::input::CreateEventSourceMappingInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateEventSourceMappingInputBody {
        event_source_arn: &input.event_source_arn,
        function_name: &input.function_name,
        enabled: &input.enabled,
        batch_size: &input.batch_size,
        maximum_batching_window_in_seconds: &input.maximum_batching_window_in_seconds,
        parallelization_factor: &input.parallelization_factor,
        starting_position: &input.starting_position,
        starting_position_timestamp: &input.starting_position_timestamp,
        destination_config: &input.destination_config,
        maximum_record_age_in_seconds: &input.maximum_record_age_in_seconds,
        bisect_batch_on_function_error: &input.bisect_batch_on_function_error,
        maximum_retry_attempts: &input.maximum_retry_attempts,
        tumbling_window_in_seconds: &input.tumbling_window_in_seconds,
        topics: &input.topics,
        queues: &input.queues,
        source_access_configurations: &input.source_access_configurations,
        self_managed_event_source: &input.self_managed_event_source,
        function_response_types: &input.function_response_types,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_function_input_body(
    input: &crate::input::CreateFunctionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateFunctionInputBody {
        function_name: &input.function_name,
        runtime: &input.runtime,
        role: &input.role,
        handler: &input.handler,
        code: &input.code,
        description: &input.description,
        timeout: &input.timeout,
        memory_size: &input.memory_size,
        publish: &input.publish,
        vpc_config: &input.vpc_config,
        package_type: &input.package_type,
        dead_letter_config: &input.dead_letter_config,
        environment: &input.environment,
        kms_key_arn: &input.kms_key_arn,
        tracing_config: &input.tracing_config,
        tags: &input.tags,
        layers: &input.layers,
        file_system_configs: &input.file_system_configs,
        image_config: &input.image_config,
        code_signing_config_arn: &input.code_signing_config_arn,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn ser_payload_invoke_input(
    payload: std::option::Option<smithy_types::Blob>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(payload.into_inner()))
}

pub fn ser_payload_invoke_async_input(
    payload: smithy_http::byte_stream::ByteStream,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(payload.into_inner()))
}

pub fn serialize_operation_publish_layer_version_input_body(
    input: &crate::input::PublishLayerVersionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::PublishLayerVersionInputBody {
        description: &input.description,
        content: &input.content,
        compatible_runtimes: &input.compatible_runtimes,
        license_info: &input.license_info,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_publish_version_input_body(
    input: &crate::input::PublishVersionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::PublishVersionInputBody {
        code_sha256: &input.code_sha256,
        description: &input.description,
        revision_id: &input.revision_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_put_function_code_signing_config_input_body(
    input: &crate::input::PutFunctionCodeSigningConfigInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::PutFunctionCodeSigningConfigInputBody {
        code_signing_config_arn: &input.code_signing_config_arn,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_put_function_concurrency_input_body(
    input: &crate::input::PutFunctionConcurrencyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::PutFunctionConcurrencyInputBody {
        reserved_concurrent_executions: &input.reserved_concurrent_executions,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_put_function_event_invoke_config_input_body(
    input: &crate::input::PutFunctionEventInvokeConfigInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::PutFunctionEventInvokeConfigInputBody {
        maximum_retry_attempts: &input.maximum_retry_attempts,
        maximum_event_age_in_seconds: &input.maximum_event_age_in_seconds,
        destination_config: &input.destination_config,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_put_provisioned_concurrency_config_input_body(
    input: &crate::input::PutProvisionedConcurrencyConfigInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::PutProvisionedConcurrencyConfigInputBody {
        provisioned_concurrent_executions: &input.provisioned_concurrent_executions,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_tag_resource_input_body(
    input: &crate::input::TagResourceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::TagResourceInputBody { tags: &input.tags };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_alias_input_body(
    input: &crate::input::UpdateAliasInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateAliasInputBody {
        function_version: &input.function_version,
        description: &input.description,
        routing_config: &input.routing_config,
        revision_id: &input.revision_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_code_signing_config_input_body(
    input: &crate::input::UpdateCodeSigningConfigInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateCodeSigningConfigInputBody {
        description: &input.description,
        allowed_publishers: &input.allowed_publishers,
        code_signing_policies: &input.code_signing_policies,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_event_source_mapping_input_body(
    input: &crate::input::UpdateEventSourceMappingInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateEventSourceMappingInputBody {
        function_name: &input.function_name,
        enabled: &input.enabled,
        batch_size: &input.batch_size,
        maximum_batching_window_in_seconds: &input.maximum_batching_window_in_seconds,
        destination_config: &input.destination_config,
        maximum_record_age_in_seconds: &input.maximum_record_age_in_seconds,
        bisect_batch_on_function_error: &input.bisect_batch_on_function_error,
        maximum_retry_attempts: &input.maximum_retry_attempts,
        parallelization_factor: &input.parallelization_factor,
        source_access_configurations: &input.source_access_configurations,
        tumbling_window_in_seconds: &input.tumbling_window_in_seconds,
        function_response_types: &input.function_response_types,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_function_code_input_body(
    input: &crate::input::UpdateFunctionCodeInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateFunctionCodeInputBody {
        zip_file: &input.zip_file,
        s3_bucket: &input.s3_bucket,
        s3_key: &input.s3_key,
        s3_object_version: &input.s3_object_version,
        image_uri: &input.image_uri,
        publish: &input.publish,
        dry_run: &input.dry_run,
        revision_id: &input.revision_id,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_function_configuration_input_body(
    input: &crate::input::UpdateFunctionConfigurationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateFunctionConfigurationInputBody {
        role: &input.role,
        handler: &input.handler,
        description: &input.description,
        timeout: &input.timeout,
        memory_size: &input.memory_size,
        vpc_config: &input.vpc_config,
        environment: &input.environment,
        runtime: &input.runtime,
        dead_letter_config: &input.dead_letter_config,
        kms_key_arn: &input.kms_key_arn,
        tracing_config: &input.tracing_config,
        revision_id: &input.revision_id,
        layers: &input.layers,
        file_system_configs: &input.file_system_configs,
        image_config: &input.image_config,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_function_event_invoke_config_input_body(
    input: &crate::input::UpdateFunctionEventInvokeConfigInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateFunctionEventInvokeConfigInputBody {
        maximum_retry_attempts: &input.maximum_retry_attempts,
        maximum_event_age_in_seconds: &input.maximum_event_age_in_seconds,
        destination_config: &input.destination_config,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}
