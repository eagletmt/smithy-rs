// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_create_ledger_input_body(
    input: &crate::input::CreateLedgerInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateLedgerInputBody {
        name: &input.name,
        tags: &input.tags,
        permissions_mode: &input.permissions_mode,
        deletion_protection: &input.deletion_protection,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_export_journal_to_s3_input_body(
    input: &crate::input::ExportJournalToS3Input,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::ExportJournalToS3InputBody {
        inclusive_start_time: &input.inclusive_start_time,
        exclusive_end_time: &input.exclusive_end_time,
        s3_export_configuration: &input.s3_export_configuration,
        role_arn: &input.role_arn,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_block_input_body(
    input: &crate::input::GetBlockInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetBlockInputBody {
        block_address: &input.block_address,
        digest_tip_address: &input.digest_tip_address,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_get_revision_input_body(
    input: &crate::input::GetRevisionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GetRevisionInputBody {
        block_address: &input.block_address,
        document_id: &input.document_id,
        digest_tip_address: &input.digest_tip_address,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_stream_journal_to_kinesis_input_body(
    input: &crate::input::StreamJournalToKinesisInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::StreamJournalToKinesisInputBody {
        role_arn: &input.role_arn,
        tags: &input.tags,
        inclusive_start_time: &input.inclusive_start_time,
        exclusive_end_time: &input.exclusive_end_time,
        kinesis_configuration: &input.kinesis_configuration,
        stream_name: &input.stream_name,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_tag_resource_input_body(
    input: &crate::input::TagResourceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::TagResourceInputBody { tags: &input.tags };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_ledger_input_body(
    input: &crate::input::UpdateLedgerInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateLedgerInputBody {
        deletion_protection: &input.deletion_protection,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}
