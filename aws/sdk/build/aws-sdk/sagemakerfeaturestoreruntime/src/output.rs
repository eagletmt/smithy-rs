// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutRecordOutput {}
impl std::fmt::Debug for PutRecordOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutRecordOutput");
        formatter.finish()
    }
}
/// See [`PutRecordOutput`](crate::output::PutRecordOutput)
pub mod put_record_output {
    /// A builder for [`PutRecordOutput`](crate::output::PutRecordOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutRecordOutput`](crate::output::PutRecordOutput)
        pub fn build(self) -> crate::output::PutRecordOutput {
            crate::output::PutRecordOutput {}
        }
    }
}
impl PutRecordOutput {
    /// Creates a new builder-style object to manufacture [`PutRecordOutput`](crate::output::PutRecordOutput)
    pub fn builder() -> crate::output::put_record_output::Builder {
        crate::output::put_record_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetRecordOutput {
    /// <p>The record you requested. A list of <code>FeatureValues</code>.</p>
    pub record: std::option::Option<std::vec::Vec<crate::model::FeatureValue>>,
}
impl std::fmt::Debug for GetRecordOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetRecordOutput");
        formatter.field("record", &self.record);
        formatter.finish()
    }
}
/// See [`GetRecordOutput`](crate::output::GetRecordOutput)
pub mod get_record_output {
    /// A builder for [`GetRecordOutput`](crate::output::GetRecordOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) record: std::option::Option<std::vec::Vec<crate::model::FeatureValue>>,
    }
    impl Builder {
        pub fn record(mut self, inp: impl Into<crate::model::FeatureValue>) -> Self {
            let mut v = self.record.unwrap_or_default();
            v.push(inp.into());
            self.record = Some(v);
            self
        }
        pub fn set_record(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::FeatureValue>>,
        ) -> Self {
            self.record = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetRecordOutput`](crate::output::GetRecordOutput)
        pub fn build(self) -> crate::output::GetRecordOutput {
            crate::output::GetRecordOutput {
                record: self.record,
            }
        }
    }
}
impl GetRecordOutput {
    /// Creates a new builder-style object to manufacture [`GetRecordOutput`](crate::output::GetRecordOutput)
    pub fn builder() -> crate::output::get_record_output::Builder {
        crate::output::get_record_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteRecordOutput {}
impl std::fmt::Debug for DeleteRecordOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteRecordOutput");
        formatter.finish()
    }
}
/// See [`DeleteRecordOutput`](crate::output::DeleteRecordOutput)
pub mod delete_record_output {
    /// A builder for [`DeleteRecordOutput`](crate::output::DeleteRecordOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteRecordOutput`](crate::output::DeleteRecordOutput)
        pub fn build(self) -> crate::output::DeleteRecordOutput {
            crate::output::DeleteRecordOutput {}
        }
    }
}
impl DeleteRecordOutput {
    /// Creates a new builder-style object to manufacture [`DeleteRecordOutput`](crate::output::DeleteRecordOutput)
    pub fn builder() -> crate::output::delete_record_output::Builder {
        crate::output::delete_record_output::Builder::default()
    }
}
