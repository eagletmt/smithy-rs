// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>The value associated with a feature.</p>
#[non_exhaustive]
#[derive(serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct FeatureValue {
    /// <p>The name of a feature that a feature value corresponds to.</p>
    #[serde(rename = "FeatureName")]
    #[serde(default)]
    pub feature_name: std::option::Option<std::string::String>,
    /// <p>The value associated with a feature, in string format. Note that features types can be
    /// String, Integral, or Fractional. This value represents all three types as a string.</p>
    #[serde(rename = "ValueAsString")]
    #[serde(default)]
    pub value_as_string: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for FeatureValue {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("FeatureValue");
        formatter.field("feature_name", &self.feature_name);
        formatter.field("value_as_string", &self.value_as_string);
        formatter.finish()
    }
}
/// See [`FeatureValue`](crate::model::FeatureValue)
pub mod feature_value {
    /// A builder for [`FeatureValue`](crate::model::FeatureValue)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) feature_name: std::option::Option<std::string::String>,
        pub(crate) value_as_string: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of a feature that a feature value corresponds to.</p>
        pub fn feature_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.feature_name = Some(inp.into());
            self
        }
        pub fn set_feature_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.feature_name = inp;
            self
        }
        /// <p>The value associated with a feature, in string format. Note that features types can be
        /// String, Integral, or Fractional. This value represents all three types as a string.</p>
        pub fn value_as_string(mut self, inp: impl Into<std::string::String>) -> Self {
            self.value_as_string = Some(inp.into());
            self
        }
        pub fn set_value_as_string(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.value_as_string = inp;
            self
        }
        /// Consumes the builder and constructs a [`FeatureValue`](crate::model::FeatureValue)
        pub fn build(self) -> crate::model::FeatureValue {
            crate::model::FeatureValue {
                feature_name: self.feature_name,
                value_as_string: self.value_as_string,
            }
        }
    }
}
impl FeatureValue {
    /// Creates a new builder-style object to manufacture [`FeatureValue`](crate::model::FeatureValue)
    pub fn builder() -> crate::model::feature_value::Builder {
        crate::model::feature_value::Builder::default()
    }
}
