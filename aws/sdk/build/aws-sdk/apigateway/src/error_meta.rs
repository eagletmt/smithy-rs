// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    BadRequestError(crate::error::BadRequestError),
    ConflictError(crate::error::ConflictError),
    LimitExceededError(crate::error::LimitExceededError),
    NotFoundError(crate::error::NotFoundError),
    ServiceUnavailableError(crate::error::ServiceUnavailableError),
    TooManyRequestsError(crate::error::TooManyRequestsError),
    UnauthorizedError(crate::error::UnauthorizedError),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestError(inner) => inner.fmt(f),
            Error::ConflictError(inner) => inner.fmt(f),
            Error::LimitExceededError(inner) => inner.fmt(f),
            Error::NotFoundError(inner) => inner.fmt(f),
            Error::ServiceUnavailableError(inner) => inner.fmt(f),
            Error::TooManyRequestsError(inner) => inner.fmt(f),
            Error::UnauthorizedError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateApiKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateApiKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateApiKeyErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateApiKeyErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::CreateApiKeyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateApiKeyErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateApiKeyErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateApiKeyErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::CreateApiKeyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateAuthorizerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateAuthorizerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateAuthorizerErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateAuthorizerErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateAuthorizerErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateAuthorizerErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateAuthorizerErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::CreateAuthorizerErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateBasePathMappingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateBasePathMappingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateBasePathMappingErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateBasePathMappingErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::CreateBasePathMappingErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateBasePathMappingErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateBasePathMappingErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::CreateBasePathMappingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDeploymentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateDeploymentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDeploymentErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateDeploymentErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::CreateDeploymentErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateDeploymentErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateDeploymentErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::CreateDeploymentErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateDeploymentErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::CreateDeploymentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDocumentationPartError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateDocumentationPartError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDocumentationPartErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateDocumentationPartErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::CreateDocumentationPartErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateDocumentationPartErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateDocumentationPartErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateDocumentationPartErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::CreateDocumentationPartErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDocumentationVersionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateDocumentationVersionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDocumentationVersionErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateDocumentationVersionErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::CreateDocumentationVersionErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateDocumentationVersionErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateDocumentationVersionErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateDocumentationVersionErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::CreateDocumentationVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDomainNameError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateDomainNameError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDomainNameErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateDomainNameErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::CreateDomainNameErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateDomainNameErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::CreateDomainNameErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateModelError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateModelError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateModelErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateModelErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::CreateModelErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateModelErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateModelErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateModelErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::CreateModelErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateRequestValidatorError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateRequestValidatorError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateRequestValidatorErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateRequestValidatorErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateRequestValidatorErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateRequestValidatorErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateRequestValidatorErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::CreateRequestValidatorErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateResourceErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateResourceErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::CreateResourceErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateResourceErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateResourceErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateResourceErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::CreateResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateRestApiError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateRestApiError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateRestApiErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateRestApiErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateRestApiErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateRestApiErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::CreateRestApiErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateStageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateStageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateStageErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateStageErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::CreateStageErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateStageErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateStageErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateStageErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::CreateStageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateUsagePlanError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateUsagePlanError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateUsagePlanErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateUsagePlanErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::CreateUsagePlanErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateUsagePlanErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateUsagePlanErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateUsagePlanErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::CreateUsagePlanErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateUsagePlanKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateUsagePlanKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateUsagePlanKeyErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateUsagePlanKeyErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::CreateUsagePlanKeyErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::CreateUsagePlanKeyErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateUsagePlanKeyErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::CreateUsagePlanKeyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateVpcLinkError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateVpcLinkError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateVpcLinkErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::CreateVpcLinkErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::CreateVpcLinkErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::CreateVpcLinkErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteApiKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteApiKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteApiKeyErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteApiKeyErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteApiKeyErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteApiKeyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteAuthorizerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteAuthorizerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteAuthorizerErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteAuthorizerErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::DeleteAuthorizerErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteAuthorizerErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteAuthorizerErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteAuthorizerErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteBasePathMappingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteBasePathMappingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteBasePathMappingErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteBasePathMappingErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::DeleteBasePathMappingErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteBasePathMappingErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteBasePathMappingErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteBasePathMappingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteClientCertificateError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteClientCertificateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteClientCertificateErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteClientCertificateErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteClientCertificateErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteClientCertificateErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteClientCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDeploymentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteDeploymentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteDeploymentErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteDeploymentErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteDeploymentErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteDeploymentErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteDeploymentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDocumentationPartError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteDocumentationPartError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteDocumentationPartErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteDocumentationPartErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::DeleteDocumentationPartErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteDocumentationPartErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteDocumentationPartErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteDocumentationPartErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDocumentationVersionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteDocumentationVersionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteDocumentationVersionErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteDocumentationVersionErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::DeleteDocumentationVersionErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteDocumentationVersionErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteDocumentationVersionErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteDocumentationVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDomainNameError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteDomainNameError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteDomainNameErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteDomainNameErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteDomainNameErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteDomainNameErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteDomainNameErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteGatewayResponseError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteGatewayResponseError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteGatewayResponseErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteGatewayResponseErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::DeleteGatewayResponseErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteGatewayResponseErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteGatewayResponseErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteGatewayResponseErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteIntegrationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteIntegrationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteIntegrationErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::DeleteIntegrationErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteIntegrationErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteIntegrationErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteIntegrationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteIntegrationResponseError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteIntegrationResponseError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteIntegrationResponseErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteIntegrationResponseErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::DeleteIntegrationResponseErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteIntegrationResponseErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteIntegrationResponseErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteIntegrationResponseErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteMethodError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteMethodError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteMethodErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::DeleteMethodErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteMethodErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteMethodErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteMethodErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteMethodResponseError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteMethodResponseError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteMethodResponseErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteMethodResponseErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::DeleteMethodResponseErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteMethodResponseErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteMethodResponseErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteMethodResponseErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteModelError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteModelError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteModelErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteModelErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::DeleteModelErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteModelErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteModelErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteModelErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteRequestValidatorError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteRequestValidatorError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteRequestValidatorErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteRequestValidatorErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::DeleteRequestValidatorErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteRequestValidatorErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteRequestValidatorErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteRequestValidatorErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteResourceErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteResourceErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::DeleteResourceErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteResourceErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteResourceErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteRestApiError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteRestApiError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteRestApiErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteRestApiErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteRestApiErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteRestApiErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteRestApiErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteStageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteStageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteStageErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteStageErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteStageErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteStageErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteStageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteUsagePlanError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteUsagePlanError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteUsagePlanErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteUsagePlanErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteUsagePlanErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteUsagePlanErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteUsagePlanErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteUsagePlanKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteUsagePlanKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteUsagePlanKeyErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteUsagePlanKeyErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::DeleteUsagePlanKeyErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteUsagePlanKeyErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteUsagePlanKeyErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteUsagePlanKeyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteVpcLinkError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteVpcLinkError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteVpcLinkErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::DeleteVpcLinkErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::DeleteVpcLinkErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::DeleteVpcLinkErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::DeleteVpcLinkErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::FlushStageAuthorizersCacheError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::FlushStageAuthorizersCacheError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::FlushStageAuthorizersCacheErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::FlushStageAuthorizersCacheErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::FlushStageAuthorizersCacheErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::FlushStageAuthorizersCacheErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::FlushStageAuthorizersCacheErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::FlushStageCacheError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::FlushStageCacheError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::FlushStageCacheErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::FlushStageCacheErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::FlushStageCacheErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::FlushStageCacheErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::FlushStageCacheErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GenerateClientCertificateError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GenerateClientCertificateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GenerateClientCertificateErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::GenerateClientCertificateErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GenerateClientCertificateErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GenerateClientCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetAccountError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetAccountError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetAccountErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetAccountErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetAccountErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetAccountErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetApiKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetApiKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetApiKeyErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetApiKeyErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetApiKeyErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetApiKeyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetApiKeysError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetApiKeysError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetApiKeysErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetApiKeysErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetApiKeysErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetApiKeysErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetAuthorizerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetAuthorizerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetAuthorizerErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetAuthorizerErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetAuthorizerErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetAuthorizerErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetAuthorizersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetAuthorizersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetAuthorizersErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetAuthorizersErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetAuthorizersErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetAuthorizersErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetAuthorizersErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBasePathMappingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetBasePathMappingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBasePathMappingErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetBasePathMappingErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetBasePathMappingErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetBasePathMappingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBasePathMappingsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetBasePathMappingsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBasePathMappingsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetBasePathMappingsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetBasePathMappingsErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetBasePathMappingsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetClientCertificateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetClientCertificateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetClientCertificateErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetClientCertificateErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetClientCertificateErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetClientCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetClientCertificatesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetClientCertificatesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetClientCertificatesErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetClientCertificatesErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetClientCertificatesErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetClientCertificatesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDeploymentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetDeploymentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDeploymentErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetDeploymentErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::GetDeploymentErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetDeploymentErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetDeploymentErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDeploymentsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetDeploymentsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDeploymentsErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetDeploymentsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetDeploymentsErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::GetDeploymentsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetDeploymentsErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetDeploymentsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDocumentationPartError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetDocumentationPartError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDocumentationPartErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetDocumentationPartErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetDocumentationPartErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetDocumentationPartErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDocumentationPartsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetDocumentationPartsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDocumentationPartsErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetDocumentationPartsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetDocumentationPartsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetDocumentationPartsErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetDocumentationPartsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDocumentationVersionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetDocumentationVersionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDocumentationVersionErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetDocumentationVersionErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetDocumentationVersionErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetDocumentationVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDocumentationVersionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetDocumentationVersionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDocumentationVersionsErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetDocumentationVersionsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetDocumentationVersionsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetDocumentationVersionsErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetDocumentationVersionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDomainNameError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetDomainNameError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDomainNameErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetDomainNameErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::GetDomainNameErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetDomainNameErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetDomainNameErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDomainNamesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetDomainNamesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDomainNamesErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetDomainNamesErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetDomainNamesErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetDomainNamesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetExportError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetExportError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetExportErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetExportErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::GetExportErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetExportErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetExportErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetExportErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetGatewayResponseError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetGatewayResponseError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetGatewayResponseErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetGatewayResponseErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetGatewayResponseErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetGatewayResponseErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetGatewayResponsesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetGatewayResponsesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetGatewayResponsesErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetGatewayResponsesErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetGatewayResponsesErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetGatewayResponsesErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetGatewayResponsesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetIntegrationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetIntegrationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetIntegrationErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetIntegrationErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetIntegrationErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetIntegrationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetIntegrationResponseError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetIntegrationResponseError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetIntegrationResponseErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetIntegrationResponseErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetIntegrationResponseErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetIntegrationResponseErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetMethodError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetMethodError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetMethodErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetMethodErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetMethodErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetMethodErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetMethodResponseError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetMethodResponseError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetMethodResponseErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetMethodResponseErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetMethodResponseErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetMethodResponseErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetModelError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetModelError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetModelErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetModelErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetModelErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetModelErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetModelsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetModelsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetModelsErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetModelsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetModelsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetModelsErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetModelsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetModelTemplateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetModelTemplateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetModelTemplateErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetModelTemplateErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetModelTemplateErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetModelTemplateErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetModelTemplateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetRequestValidatorError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetRequestValidatorError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetRequestValidatorErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetRequestValidatorErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetRequestValidatorErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetRequestValidatorErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetRequestValidatorsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetRequestValidatorsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetRequestValidatorsErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetRequestValidatorsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetRequestValidatorsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetRequestValidatorsErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetRequestValidatorsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetResourceErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetResourceErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetResourceErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetResourcesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetResourcesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetResourcesErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetResourcesErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetResourcesErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetResourcesErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetResourcesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetRestApiError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetRestApiError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetRestApiErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetRestApiErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetRestApiErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetRestApiErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetRestApisError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetRestApisError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetRestApisErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetRestApisErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetRestApisErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetRestApisErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetSdkError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetSdkError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetSdkErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetSdkErrorKind::ConflictError(inner) => Error::ConflictError(inner),
                crate::error::GetSdkErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::GetSdkErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetSdkErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetSdkErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetSdkTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetSdkTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetSdkTypeErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetSdkTypeErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetSdkTypeErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetSdkTypeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetSdkTypesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetSdkTypesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetSdkTypesErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetSdkTypesErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetSdkTypesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetStageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetStageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetStageErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetStageErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetStageErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetStageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetStagesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetStagesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetStagesErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetStagesErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetStagesErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetStagesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTagsErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetTagsErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::GetTagsErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
                crate::error::GetTagsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetTagsErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetUsageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetUsageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetUsageErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetUsageErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetUsageErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetUsageErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetUsageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetUsagePlanError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetUsagePlanError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetUsagePlanErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetUsagePlanErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetUsagePlanErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetUsagePlanErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetUsagePlanErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetUsagePlanKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetUsagePlanKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetUsagePlanKeyErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetUsagePlanKeyErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetUsagePlanKeyErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetUsagePlanKeyErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetUsagePlanKeyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetUsagePlanKeysError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetUsagePlanKeysError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetUsagePlanKeysErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetUsagePlanKeysErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetUsagePlanKeysErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetUsagePlanKeysErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetUsagePlanKeysErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetUsagePlansError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetUsagePlansError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetUsagePlansErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetUsagePlansErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::GetUsagePlansErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetUsagePlansErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetUsagePlansErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetUsagePlansErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetVpcLinkError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetVpcLinkError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetVpcLinkErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::GetVpcLinkErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetVpcLinkErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetVpcLinkErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetVpcLinksError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetVpcLinksError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetVpcLinksErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::GetVpcLinksErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::GetVpcLinksErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::GetVpcLinksErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ImportApiKeysError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ImportApiKeysError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ImportApiKeysErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::ImportApiKeysErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::ImportApiKeysErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::ImportApiKeysErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::ImportApiKeysErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ImportApiKeysErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::ImportApiKeysErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ImportDocumentationPartsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ImportDocumentationPartsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ImportDocumentationPartsErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::ImportDocumentationPartsErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::ImportDocumentationPartsErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::ImportDocumentationPartsErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ImportDocumentationPartsErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::ImportDocumentationPartsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ImportRestApiError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ImportRestApiError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ImportRestApiErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::ImportRestApiErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::ImportRestApiErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::ImportRestApiErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::ImportRestApiErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::ImportRestApiErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutGatewayResponseError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutGatewayResponseError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutGatewayResponseErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::PutGatewayResponseErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::PutGatewayResponseErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::PutGatewayResponseErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::PutGatewayResponseErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::PutGatewayResponseErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutIntegrationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutIntegrationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutIntegrationErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::PutIntegrationErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::PutIntegrationErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::PutIntegrationErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::PutIntegrationErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::PutIntegrationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutIntegrationResponseError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutIntegrationResponseError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutIntegrationResponseErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::PutIntegrationResponseErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::PutIntegrationResponseErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::PutIntegrationResponseErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::PutIntegrationResponseErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::PutIntegrationResponseErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::PutIntegrationResponseErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutMethodError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutMethodError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutMethodErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::PutMethodErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::PutMethodErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::PutMethodErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::PutMethodErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::PutMethodErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::PutMethodErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutMethodResponseError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutMethodResponseError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutMethodResponseErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::PutMethodResponseErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::PutMethodResponseErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::PutMethodResponseErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::PutMethodResponseErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::PutMethodResponseErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::PutMethodResponseErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutRestApiError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutRestApiError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutRestApiErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::PutRestApiErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::PutRestApiErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::PutRestApiErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::PutRestApiErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::PutRestApiErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::PutRestApiErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::TagResourceErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::TagResourceErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::TagResourceErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::TagResourceErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::TagResourceErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TestInvokeAuthorizerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TestInvokeAuthorizerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TestInvokeAuthorizerErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::TestInvokeAuthorizerErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::TestInvokeAuthorizerErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::TestInvokeAuthorizerErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::TestInvokeAuthorizerErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TestInvokeMethodError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TestInvokeMethodError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TestInvokeMethodErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::TestInvokeMethodErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::TestInvokeMethodErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::TestInvokeMethodErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::TestInvokeMethodErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UntagResourceErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::UntagResourceErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UntagResourceErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UntagResourceErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateAccountError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateAccountError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateAccountErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateAccountErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateAccountErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateAccountErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateAccountErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateApiKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateApiKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateApiKeyErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateApiKeyErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::UpdateApiKeyErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateApiKeyErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateApiKeyErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateApiKeyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateAuthorizerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateAuthorizerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateAuthorizerErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateAuthorizerErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateAuthorizerErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateAuthorizerErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateAuthorizerErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateBasePathMappingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateBasePathMappingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateBasePathMappingErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateBasePathMappingErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::UpdateBasePathMappingErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateBasePathMappingErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateBasePathMappingErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateBasePathMappingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateClientCertificateError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateClientCertificateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateClientCertificateErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateClientCertificateErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateClientCertificateErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateClientCertificateErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateClientCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateDeploymentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateDeploymentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateDeploymentErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateDeploymentErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateDeploymentErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::UpdateDeploymentErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateDeploymentErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateDeploymentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateDocumentationPartError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateDocumentationPartError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateDocumentationPartErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateDocumentationPartErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::UpdateDocumentationPartErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UpdateDocumentationPartErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateDocumentationPartErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateDocumentationPartErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateDocumentationPartErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateDocumentationVersionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateDocumentationVersionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateDocumentationVersionErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateDocumentationVersionErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::UpdateDocumentationVersionErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateDocumentationVersionErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateDocumentationVersionErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateDocumentationVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateDomainNameError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateDomainNameError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateDomainNameErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateDomainNameErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::UpdateDomainNameErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateDomainNameErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateDomainNameErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateDomainNameErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateGatewayResponseError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateGatewayResponseError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateGatewayResponseErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateGatewayResponseErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateGatewayResponseErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateGatewayResponseErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateGatewayResponseErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateIntegrationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateIntegrationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateIntegrationErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateIntegrationErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::UpdateIntegrationErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateIntegrationErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateIntegrationErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateIntegrationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateIntegrationResponseError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateIntegrationResponseError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateIntegrationResponseErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateIntegrationResponseErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::UpdateIntegrationResponseErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateIntegrationResponseErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateIntegrationResponseErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateIntegrationResponseErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateMethodError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateMethodError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateMethodErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateMethodErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::UpdateMethodErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateMethodErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateMethodErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateMethodErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateMethodResponseError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateMethodResponseError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateMethodResponseErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateMethodResponseErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::UpdateMethodResponseErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::UpdateMethodResponseErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateMethodResponseErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateMethodResponseErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateMethodResponseErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateModelError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateModelError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateModelErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateModelErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::UpdateModelErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateModelErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateModelErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateModelErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateRequestValidatorError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateRequestValidatorError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateRequestValidatorErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateRequestValidatorErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateRequestValidatorErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateRequestValidatorErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateRequestValidatorErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateResourceErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateResourceErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::UpdateResourceErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateResourceErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateResourceErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateRestApiError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateRestApiError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateRestApiErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateRestApiErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::UpdateRestApiErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateRestApiErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateRestApiErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateRestApiErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateStageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateStageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateStageErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateStageErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::UpdateStageErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateStageErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateStageErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateStageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateUsageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateUsageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateUsageErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateUsageErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateUsageErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateUsageErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateUsageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateUsagePlanError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateUsagePlanError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateUsagePlanErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateUsagePlanErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::UpdateUsagePlanErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateUsagePlanErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateUsagePlanErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateUsagePlanErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateVpcLinkError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateVpcLinkError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateVpcLinkErrorKind::BadRequestError(inner) => {
                    Error::BadRequestError(inner)
                }
                crate::error::UpdateVpcLinkErrorKind::ConflictError(inner) => {
                    Error::ConflictError(inner)
                }
                crate::error::UpdateVpcLinkErrorKind::NotFoundError(inner) => {
                    Error::NotFoundError(inner)
                }
                crate::error::UpdateVpcLinkErrorKind::TooManyRequestsError(inner) => {
                    Error::TooManyRequestsError(inner)
                }
                crate::error::UpdateVpcLinkErrorKind::UnauthorizedError(inner) => {
                    Error::UnauthorizedError(inner)
                }
                crate::error::UpdateVpcLinkErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
