// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_create_api_key_input_body(
    input: &crate::input::CreateApiKeyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateApiKeyInputBody {
        name: &input.name,
        description: &input.description,
        enabled: &input.enabled,
        generate_distinct_id: &input.generate_distinct_id,
        value: &input.value,
        stage_keys: &input.stage_keys,
        customer_id: &input.customer_id,
        tags: &input.tags,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_authorizer_input_body(
    input: &crate::input::CreateAuthorizerInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateAuthorizerInputBody {
        name: &input.name,
        r#type: &input.r#type,
        provider_ar_ns: &input.provider_ar_ns,
        auth_type: &input.auth_type,
        authorizer_uri: &input.authorizer_uri,
        authorizer_credentials: &input.authorizer_credentials,
        identity_source: &input.identity_source,
        identity_validation_expression: &input.identity_validation_expression,
        authorizer_result_ttl_in_seconds: &input.authorizer_result_ttl_in_seconds,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_base_path_mapping_input_body(
    input: &crate::input::CreateBasePathMappingInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateBasePathMappingInputBody {
        base_path: &input.base_path,
        rest_api_id: &input.rest_api_id,
        stage: &input.stage,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_deployment_input_body(
    input: &crate::input::CreateDeploymentInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateDeploymentInputBody {
        stage_name: &input.stage_name,
        stage_description: &input.stage_description,
        description: &input.description,
        cache_cluster_enabled: &input.cache_cluster_enabled,
        cache_cluster_size: &input.cache_cluster_size,
        variables: &input.variables,
        canary_settings: &input.canary_settings,
        tracing_enabled: &input.tracing_enabled,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_documentation_part_input_body(
    input: &crate::input::CreateDocumentationPartInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateDocumentationPartInputBody {
        location: &input.location,
        properties: &input.properties,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_documentation_version_input_body(
    input: &crate::input::CreateDocumentationVersionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateDocumentationVersionInputBody {
        documentation_version: &input.documentation_version,
        stage_name: &input.stage_name,
        description: &input.description,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_domain_name_input_body(
    input: &crate::input::CreateDomainNameInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateDomainNameInputBody {
        domain_name: &input.domain_name,
        certificate_name: &input.certificate_name,
        certificate_body: &input.certificate_body,
        certificate_private_key: &input.certificate_private_key,
        certificate_chain: &input.certificate_chain,
        certificate_arn: &input.certificate_arn,
        regional_certificate_name: &input.regional_certificate_name,
        regional_certificate_arn: &input.regional_certificate_arn,
        endpoint_configuration: &input.endpoint_configuration,
        tags: &input.tags,
        security_policy: &input.security_policy,
        mutual_tls_authentication: &input.mutual_tls_authentication,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_model_input_body(
    input: &crate::input::CreateModelInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateModelInputBody {
        name: &input.name,
        description: &input.description,
        schema: &input.schema,
        content_type: &input.content_type,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_request_validator_input_body(
    input: &crate::input::CreateRequestValidatorInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateRequestValidatorInputBody {
        name: &input.name,
        validate_request_body: &input.validate_request_body,
        validate_request_parameters: &input.validate_request_parameters,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_resource_input_body(
    input: &crate::input::CreateResourceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateResourceInputBody {
        path_part: &input.path_part,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_rest_api_input_body(
    input: &crate::input::CreateRestApiInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateRestApiInputBody {
        name: &input.name,
        description: &input.description,
        version: &input.version,
        clone_from: &input.clone_from,
        binary_media_types: &input.binary_media_types,
        minimum_compression_size: &input.minimum_compression_size,
        api_key_source: &input.api_key_source,
        endpoint_configuration: &input.endpoint_configuration,
        policy: &input.policy,
        tags: &input.tags,
        disable_execute_api_endpoint: &input.disable_execute_api_endpoint,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_stage_input_body(
    input: &crate::input::CreateStageInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateStageInputBody {
        stage_name: &input.stage_name,
        deployment_id: &input.deployment_id,
        description: &input.description,
        cache_cluster_enabled: &input.cache_cluster_enabled,
        cache_cluster_size: &input.cache_cluster_size,
        variables: &input.variables,
        documentation_version: &input.documentation_version,
        canary_settings: &input.canary_settings,
        tracing_enabled: &input.tracing_enabled,
        tags: &input.tags,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_usage_plan_input_body(
    input: &crate::input::CreateUsagePlanInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateUsagePlanInputBody {
        name: &input.name,
        description: &input.description,
        api_stages: &input.api_stages,
        throttle: &input.throttle,
        quota: &input.quota,
        tags: &input.tags,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_usage_plan_key_input_body(
    input: &crate::input::CreateUsagePlanKeyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateUsagePlanKeyInputBody {
        key_id: &input.key_id,
        key_type: &input.key_type,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_create_vpc_link_input_body(
    input: &crate::input::CreateVpcLinkInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::CreateVpcLinkInputBody {
        name: &input.name,
        description: &input.description,
        target_arns: &input.target_arns,
        tags: &input.tags,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_generate_client_certificate_input_body(
    input: &crate::input::GenerateClientCertificateInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::GenerateClientCertificateInputBody {
        description: &input.description,
        tags: &input.tags,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn ser_payload_import_api_keys_input(
    payload: std::option::Option<smithy_types::Blob>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(payload.into_inner()))
}

pub fn ser_payload_import_documentation_parts_input(
    payload: std::option::Option<smithy_types::Blob>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(payload.into_inner()))
}

pub fn ser_payload_import_rest_api_input(
    payload: std::option::Option<smithy_types::Blob>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(payload.into_inner()))
}

pub fn serialize_operation_put_gateway_response_input_body(
    input: &crate::input::PutGatewayResponseInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::PutGatewayResponseInputBody {
        status_code: &input.status_code,
        response_parameters: &input.response_parameters,
        response_templates: &input.response_templates,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_put_integration_input_body(
    input: &crate::input::PutIntegrationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::PutIntegrationInputBody {
        r#type: &input.r#type,
        integration_http_method: &input.integration_http_method,
        uri: &input.uri,
        connection_type: &input.connection_type,
        connection_id: &input.connection_id,
        credentials: &input.credentials,
        request_parameters: &input.request_parameters,
        request_templates: &input.request_templates,
        passthrough_behavior: &input.passthrough_behavior,
        cache_namespace: &input.cache_namespace,
        cache_key_parameters: &input.cache_key_parameters,
        content_handling: &input.content_handling,
        timeout_in_millis: &input.timeout_in_millis,
        tls_config: &input.tls_config,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_put_integration_response_input_body(
    input: &crate::input::PutIntegrationResponseInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::PutIntegrationResponseInputBody {
        selection_pattern: &input.selection_pattern,
        response_parameters: &input.response_parameters,
        response_templates: &input.response_templates,
        content_handling: &input.content_handling,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_put_method_input_body(
    input: &crate::input::PutMethodInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::PutMethodInputBody {
        authorization_type: &input.authorization_type,
        authorizer_id: &input.authorizer_id,
        api_key_required: &input.api_key_required,
        operation_name: &input.operation_name,
        request_parameters: &input.request_parameters,
        request_models: &input.request_models,
        request_validator_id: &input.request_validator_id,
        authorization_scopes: &input.authorization_scopes,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_put_method_response_input_body(
    input: &crate::input::PutMethodResponseInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::PutMethodResponseInputBody {
        response_parameters: &input.response_parameters,
        response_models: &input.response_models,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn ser_payload_put_rest_api_input(
    payload: std::option::Option<smithy_types::Blob>,
) -> Result<smithy_http::body::SdkBody, smithy_http::operation::BuildError> {
    let payload = match payload {
        Some(t) => t,
        None => return Ok(smithy_http::body::SdkBody::from("")),
    };
    #[allow(clippy::useless_conversion)]
    Ok(smithy_http::body::SdkBody::from(payload.into_inner()))
}

pub fn serialize_operation_tag_resource_input_body(
    input: &crate::input::TagResourceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::TagResourceInputBody { tags: &input.tags };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_test_invoke_authorizer_input_body(
    input: &crate::input::TestInvokeAuthorizerInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::TestInvokeAuthorizerInputBody {
        headers: &input.headers,
        multi_value_headers: &input.multi_value_headers,
        path_with_query_string: &input.path_with_query_string,
        body: &input.body,
        stage_variables: &input.stage_variables,
        additional_context: &input.additional_context,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_test_invoke_method_input_body(
    input: &crate::input::TestInvokeMethodInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::TestInvokeMethodInputBody {
        path_with_query_string: &input.path_with_query_string,
        body: &input.body,
        headers: &input.headers,
        multi_value_headers: &input.multi_value_headers,
        client_certificate_id: &input.client_certificate_id,
        stage_variables: &input.stage_variables,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_account_input_body(
    input: &crate::input::UpdateAccountInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateAccountInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_api_key_input_body(
    input: &crate::input::UpdateApiKeyInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateApiKeyInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_authorizer_input_body(
    input: &crate::input::UpdateAuthorizerInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateAuthorizerInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_base_path_mapping_input_body(
    input: &crate::input::UpdateBasePathMappingInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateBasePathMappingInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_client_certificate_input_body(
    input: &crate::input::UpdateClientCertificateInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateClientCertificateInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_deployment_input_body(
    input: &crate::input::UpdateDeploymentInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateDeploymentInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_documentation_part_input_body(
    input: &crate::input::UpdateDocumentationPartInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateDocumentationPartInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_documentation_version_input_body(
    input: &crate::input::UpdateDocumentationVersionInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateDocumentationVersionInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_domain_name_input_body(
    input: &crate::input::UpdateDomainNameInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateDomainNameInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_gateway_response_input_body(
    input: &crate::input::UpdateGatewayResponseInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateGatewayResponseInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_integration_input_body(
    input: &crate::input::UpdateIntegrationInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateIntegrationInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_integration_response_input_body(
    input: &crate::input::UpdateIntegrationResponseInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateIntegrationResponseInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_method_input_body(
    input: &crate::input::UpdateMethodInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateMethodInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_method_response_input_body(
    input: &crate::input::UpdateMethodResponseInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateMethodResponseInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_model_input_body(
    input: &crate::input::UpdateModelInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateModelInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_request_validator_input_body(
    input: &crate::input::UpdateRequestValidatorInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateRequestValidatorInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_resource_input_body(
    input: &crate::input::UpdateResourceInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateResourceInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_rest_api_input_body(
    input: &crate::input::UpdateRestApiInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateRestApiInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_stage_input_body(
    input: &crate::input::UpdateStageInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateStageInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_usage_input_body(
    input: &crate::input::UpdateUsageInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateUsageInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_usage_plan_input_body(
    input: &crate::input::UpdateUsagePlanInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateUsagePlanInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}

pub fn serialize_operation_update_vpc_link_input_body(
    input: &crate::input::UpdateVpcLinkInput,
) -> Result<smithy_http::body::SdkBody, serde_json::error::Error> {
    let body = crate::serializer::UpdateVpcLinkInputBody {
        patch_operations: &input.patch_operations,
    };
    serde_json::to_vec(&body).map(smithy_http::body::SdkBody::from)
}
