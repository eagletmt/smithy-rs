// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_add_association_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddAssociationInput,
) {
    if let Some(var_1) = &input.source_arn {
        object.key("SourceArn").string(var_1);
    }
    if let Some(var_2) = &input.destination_arn {
        object.key("DestinationArn").string(var_2);
    }
    if let Some(var_3) = &input.association_type {
        object.key("AssociationType").string(var_3.as_str());
    }
}

pub fn serialize_structure_add_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsInput,
) {
    if let Some(var_4) = &input.resource_arn {
        object.key("ResourceArn").string(var_4);
    }
    if let Some(var_5) = &input.tags {
        let mut array_6 = object.key("Tags").start_array();
        for item_7 in var_5 {
            {
                let mut object_8 = array_6.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_8, item_7);
                object_8.finish();
            }
        }
        array_6.finish();
    }
}

pub fn serialize_structure_associate_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateTrialComponentInput,
) {
    if let Some(var_9) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_9);
    }
    if let Some(var_10) = &input.trial_name {
        object.key("TrialName").string(var_10);
    }
}

pub fn serialize_structure_create_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateActionInput,
) {
    if let Some(var_11) = &input.action_name {
        object.key("ActionName").string(var_11);
    }
    if let Some(var_12) = &input.source {
        let mut object_13 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_action_source(&mut object_13, var_12);
        object_13.finish();
    }
    if let Some(var_14) = &input.action_type {
        object.key("ActionType").string(var_14);
    }
    if let Some(var_15) = &input.description {
        object.key("Description").string(var_15);
    }
    if let Some(var_16) = &input.status {
        object.key("Status").string(var_16.as_str());
    }
    if let Some(var_17) = &input.properties {
        let mut object_18 = object.key("Properties").start_object();
        for (key_19, value_20) in var_17 {
            {
                object_18.key(key_19).string(value_20);
            }
        }
        object_18.finish();
    }
    if let Some(var_21) = &input.metadata_properties {
        let mut object_22 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_22, var_21);
        object_22.finish();
    }
    if let Some(var_23) = &input.tags {
        let mut array_24 = object.key("Tags").start_array();
        for item_25 in var_23 {
            {
                let mut object_26 = array_24.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_26, item_25);
                object_26.finish();
            }
        }
        array_24.finish();
    }
}

pub fn serialize_structure_create_algorithm_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAlgorithmInput,
) {
    if let Some(var_27) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_27);
    }
    if let Some(var_28) = &input.algorithm_description {
        object.key("AlgorithmDescription").string(var_28);
    }
    if let Some(var_29) = &input.training_specification {
        let mut object_30 = object.key("TrainingSpecification").start_object();
        crate::json_ser::serialize_structure_training_specification(&mut object_30, var_29);
        object_30.finish();
    }
    if let Some(var_31) = &input.inference_specification {
        let mut object_32 = object.key("InferenceSpecification").start_object();
        crate::json_ser::serialize_structure_inference_specification(&mut object_32, var_31);
        object_32.finish();
    }
    if let Some(var_33) = &input.validation_specification {
        let mut object_34 = object.key("ValidationSpecification").start_object();
        crate::json_ser::serialize_structure_algorithm_validation_specification(
            &mut object_34,
            var_33,
        );
        object_34.finish();
    }
    if input.certify_for_marketplace {
        object
            .key("CertifyForMarketplace")
            .boolean(input.certify_for_marketplace);
    }
    if let Some(var_35) = &input.tags {
        let mut array_36 = object.key("Tags").start_array();
        for item_37 in var_35 {
            {
                let mut object_38 = array_36.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_38, item_37);
                object_38.finish();
            }
        }
        array_36.finish();
    }
}

pub fn serialize_structure_create_app_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppInput,
) {
    if let Some(var_39) = &input.domain_id {
        object.key("DomainId").string(var_39);
    }
    if let Some(var_40) = &input.user_profile_name {
        object.key("UserProfileName").string(var_40);
    }
    if let Some(var_41) = &input.app_type {
        object.key("AppType").string(var_41.as_str());
    }
    if let Some(var_42) = &input.app_name {
        object.key("AppName").string(var_42);
    }
    if let Some(var_43) = &input.tags {
        let mut array_44 = object.key("Tags").start_array();
        for item_45 in var_43 {
            {
                let mut object_46 = array_44.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_46, item_45);
                object_46.finish();
            }
        }
        array_44.finish();
    }
    if let Some(var_47) = &input.resource_spec {
        let mut object_48 = object.key("ResourceSpec").start_object();
        crate::json_ser::serialize_structure_resource_spec(&mut object_48, var_47);
        object_48.finish();
    }
}

pub fn serialize_structure_create_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppImageConfigInput,
) {
    if let Some(var_49) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_49);
    }
    if let Some(var_50) = &input.tags {
        let mut array_51 = object.key("Tags").start_array();
        for item_52 in var_50 {
            {
                let mut object_53 = array_51.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_53, item_52);
                object_53.finish();
            }
        }
        array_51.finish();
    }
    if let Some(var_54) = &input.kernel_gateway_image_config {
        let mut object_55 = object.key("KernelGatewayImageConfig").start_object();
        crate::json_ser::serialize_structure_kernel_gateway_image_config(&mut object_55, var_54);
        object_55.finish();
    }
}

pub fn serialize_structure_create_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateArtifactInput,
) {
    if let Some(var_56) = &input.artifact_name {
        object.key("ArtifactName").string(var_56);
    }
    if let Some(var_57) = &input.source {
        let mut object_58 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_artifact_source(&mut object_58, var_57);
        object_58.finish();
    }
    if let Some(var_59) = &input.artifact_type {
        object.key("ArtifactType").string(var_59);
    }
    if let Some(var_60) = &input.properties {
        let mut object_61 = object.key("Properties").start_object();
        for (key_62, value_63) in var_60 {
            {
                object_61.key(key_62).string(value_63);
            }
        }
        object_61.finish();
    }
    if let Some(var_64) = &input.metadata_properties {
        let mut object_65 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_65, var_64);
        object_65.finish();
    }
    if let Some(var_66) = &input.tags {
        let mut array_67 = object.key("Tags").start_array();
        for item_68 in var_66 {
            {
                let mut object_69 = array_67.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_69, item_68);
                object_69.finish();
            }
        }
        array_67.finish();
    }
}

pub fn serialize_structure_create_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAutoMLJobInput,
) {
    if let Some(var_70) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_70);
    }
    if let Some(var_71) = &input.input_data_config {
        let mut array_72 = object.key("InputDataConfig").start_array();
        for item_73 in var_71 {
            {
                let mut object_74 = array_72.value().start_object();
                crate::json_ser::serialize_structure_auto_ml_channel(&mut object_74, item_73);
                object_74.finish();
            }
        }
        array_72.finish();
    }
    if let Some(var_75) = &input.output_data_config {
        let mut object_76 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_auto_ml_output_data_config(&mut object_76, var_75);
        object_76.finish();
    }
    if let Some(var_77) = &input.problem_type {
        object.key("ProblemType").string(var_77.as_str());
    }
    if let Some(var_78) = &input.auto_ml_job_objective {
        let mut object_79 = object.key("AutoMLJobObjective").start_object();
        crate::json_ser::serialize_structure_auto_ml_job_objective(&mut object_79, var_78);
        object_79.finish();
    }
    if let Some(var_80) = &input.auto_ml_job_config {
        let mut object_81 = object.key("AutoMLJobConfig").start_object();
        crate::json_ser::serialize_structure_auto_ml_job_config(&mut object_81, var_80);
        object_81.finish();
    }
    if let Some(var_82) = &input.role_arn {
        object.key("RoleArn").string(var_82);
    }
    if input.generate_candidate_definitions_only {
        object
            .key("GenerateCandidateDefinitionsOnly")
            .boolean(input.generate_candidate_definitions_only);
    }
    if let Some(var_83) = &input.tags {
        let mut array_84 = object.key("Tags").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_86, item_85);
                object_86.finish();
            }
        }
        array_84.finish();
    }
    if let Some(var_87) = &input.model_deploy_config {
        let mut object_88 = object.key("ModelDeployConfig").start_object();
        crate::json_ser::serialize_structure_model_deploy_config(&mut object_88, var_87);
        object_88.finish();
    }
}

pub fn serialize_structure_create_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCodeRepositoryInput,
) {
    if let Some(var_89) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_89);
    }
    if let Some(var_90) = &input.git_config {
        let mut object_91 = object.key("GitConfig").start_object();
        crate::json_ser::serialize_structure_git_config(&mut object_91, var_90);
        object_91.finish();
    }
    if let Some(var_92) = &input.tags {
        let mut array_93 = object.key("Tags").start_array();
        for item_94 in var_92 {
            {
                let mut object_95 = array_93.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_95, item_94);
                object_95.finish();
            }
        }
        array_93.finish();
    }
}

pub fn serialize_structure_create_compilation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCompilationJobInput,
) {
    if let Some(var_96) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_96);
    }
    if let Some(var_97) = &input.role_arn {
        object.key("RoleArn").string(var_97);
    }
    if let Some(var_98) = &input.input_config {
        let mut object_99 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_input_config(&mut object_99, var_98);
        object_99.finish();
    }
    if let Some(var_100) = &input.output_config {
        let mut object_101 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_output_config(&mut object_101, var_100);
        object_101.finish();
    }
    if let Some(var_102) = &input.stopping_condition {
        let mut object_103 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_stopping_condition(&mut object_103, var_102);
        object_103.finish();
    }
    if let Some(var_104) = &input.tags {
        let mut array_105 = object.key("Tags").start_array();
        for item_106 in var_104 {
            {
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_107, item_106);
                object_107.finish();
            }
        }
        array_105.finish();
    }
}

pub fn serialize_structure_create_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContextInput,
) {
    if let Some(var_108) = &input.context_name {
        object.key("ContextName").string(var_108);
    }
    if let Some(var_109) = &input.source {
        let mut object_110 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_context_source(&mut object_110, var_109);
        object_110.finish();
    }
    if let Some(var_111) = &input.context_type {
        object.key("ContextType").string(var_111);
    }
    if let Some(var_112) = &input.description {
        object.key("Description").string(var_112);
    }
    if let Some(var_113) = &input.properties {
        let mut object_114 = object.key("Properties").start_object();
        for (key_115, value_116) in var_113 {
            {
                object_114.key(key_115).string(value_116);
            }
        }
        object_114.finish();
    }
    if let Some(var_117) = &input.tags {
        let mut array_118 = object.key("Tags").start_array();
        for item_119 in var_117 {
            {
                let mut object_120 = array_118.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_120, item_119);
                object_120.finish();
            }
        }
        array_118.finish();
    }
}

pub fn serialize_structure_create_data_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataQualityJobDefinitionInput,
) {
    if let Some(var_121) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_121);
    }
    if let Some(var_122) = &input.data_quality_baseline_config {
        let mut object_123 = object.key("DataQualityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_data_quality_baseline_config(&mut object_123, var_122);
        object_123.finish();
    }
    if let Some(var_124) = &input.data_quality_app_specification {
        let mut object_125 = object.key("DataQualityAppSpecification").start_object();
        crate::json_ser::serialize_structure_data_quality_app_specification(
            &mut object_125,
            var_124,
        );
        object_125.finish();
    }
    if let Some(var_126) = &input.data_quality_job_input {
        let mut object_127 = object.key("DataQualityJobInput").start_object();
        crate::json_ser::serialize_structure_data_quality_job_input(&mut object_127, var_126);
        object_127.finish();
    }
    if let Some(var_128) = &input.data_quality_job_output_config {
        let mut object_129 = object.key("DataQualityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_129, var_128);
        object_129.finish();
    }
    if let Some(var_130) = &input.job_resources {
        let mut object_131 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_131, var_130);
        object_131.finish();
    }
    if let Some(var_132) = &input.network_config {
        let mut object_133 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_network_config(&mut object_133, var_132);
        object_133.finish();
    }
    if let Some(var_134) = &input.role_arn {
        object.key("RoleArn").string(var_134);
    }
    if let Some(var_135) = &input.stopping_condition {
        let mut object_136 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_136,
            var_135,
        );
        object_136.finish();
    }
    if let Some(var_137) = &input.tags {
        let mut array_138 = object.key("Tags").start_array();
        for item_139 in var_137 {
            {
                let mut object_140 = array_138.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_140, item_139);
                object_140.finish();
            }
        }
        array_138.finish();
    }
}

pub fn serialize_structure_create_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDeviceFleetInput,
) {
    if let Some(var_141) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_141);
    }
    if let Some(var_142) = &input.role_arn {
        object.key("RoleArn").string(var_142);
    }
    if let Some(var_143) = &input.description {
        object.key("Description").string(var_143);
    }
    if let Some(var_144) = &input.output_config {
        let mut object_145 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_edge_output_config(&mut object_145, var_144);
        object_145.finish();
    }
    if let Some(var_146) = &input.tags {
        let mut array_147 = object.key("Tags").start_array();
        for item_148 in var_146 {
            {
                let mut object_149 = array_147.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_149, item_148);
                object_149.finish();
            }
        }
        array_147.finish();
    }
}

pub fn serialize_structure_create_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainInput,
) {
    if let Some(var_150) = &input.domain_name {
        object.key("DomainName").string(var_150);
    }
    if let Some(var_151) = &input.auth_mode {
        object.key("AuthMode").string(var_151.as_str());
    }
    if let Some(var_152) = &input.default_user_settings {
        let mut object_153 = object.key("DefaultUserSettings").start_object();
        crate::json_ser::serialize_structure_user_settings(&mut object_153, var_152);
        object_153.finish();
    }
    if let Some(var_154) = &input.subnet_ids {
        let mut array_155 = object.key("SubnetIds").start_array();
        for item_156 in var_154 {
            {
                array_155.value().string(item_156);
            }
        }
        array_155.finish();
    }
    if let Some(var_157) = &input.vpc_id {
        object.key("VpcId").string(var_157);
    }
    if let Some(var_158) = &input.tags {
        let mut array_159 = object.key("Tags").start_array();
        for item_160 in var_158 {
            {
                let mut object_161 = array_159.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_161, item_160);
                object_161.finish();
            }
        }
        array_159.finish();
    }
    if let Some(var_162) = &input.app_network_access_type {
        object.key("AppNetworkAccessType").string(var_162.as_str());
    }
    if let Some(var_163) = &input.home_efs_file_system_kms_key_id {
        object.key("HomeEfsFileSystemKmsKeyId").string(var_163);
    }
    if let Some(var_164) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_164);
    }
}

pub fn serialize_structure_create_edge_packaging_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEdgePackagingJobInput,
) {
    if let Some(var_165) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_165);
    }
    if let Some(var_166) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_166);
    }
    if let Some(var_167) = &input.model_name {
        object.key("ModelName").string(var_167);
    }
    if let Some(var_168) = &input.model_version {
        object.key("ModelVersion").string(var_168);
    }
    if let Some(var_169) = &input.role_arn {
        object.key("RoleArn").string(var_169);
    }
    if let Some(var_170) = &input.output_config {
        let mut object_171 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_edge_output_config(&mut object_171, var_170);
        object_171.finish();
    }
    if let Some(var_172) = &input.resource_key {
        object.key("ResourceKey").string(var_172);
    }
    if let Some(var_173) = &input.tags {
        let mut array_174 = object.key("Tags").start_array();
        for item_175 in var_173 {
            {
                let mut object_176 = array_174.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_176, item_175);
                object_176.finish();
            }
        }
        array_174.finish();
    }
}

pub fn serialize_structure_create_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointInput,
) {
    if let Some(var_177) = &input.endpoint_name {
        object.key("EndpointName").string(var_177);
    }
    if let Some(var_178) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_178);
    }
    if let Some(var_179) = &input.tags {
        let mut array_180 = object.key("Tags").start_array();
        for item_181 in var_179 {
            {
                let mut object_182 = array_180.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_182, item_181);
                object_182.finish();
            }
        }
        array_180.finish();
    }
}

pub fn serialize_structure_create_endpoint_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEndpointConfigInput,
) {
    if let Some(var_183) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_183);
    }
    if let Some(var_184) = &input.production_variants {
        let mut array_185 = object.key("ProductionVariants").start_array();
        for item_186 in var_184 {
            {
                let mut object_187 = array_185.value().start_object();
                crate::json_ser::serialize_structure_production_variant(&mut object_187, item_186);
                object_187.finish();
            }
        }
        array_185.finish();
    }
    if let Some(var_188) = &input.data_capture_config {
        let mut object_189 = object.key("DataCaptureConfig").start_object();
        crate::json_ser::serialize_structure_data_capture_config(&mut object_189, var_188);
        object_189.finish();
    }
    if let Some(var_190) = &input.tags {
        let mut array_191 = object.key("Tags").start_array();
        for item_192 in var_190 {
            {
                let mut object_193 = array_191.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_193, item_192);
                object_193.finish();
            }
        }
        array_191.finish();
    }
    if let Some(var_194) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_194);
    }
}

pub fn serialize_structure_create_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExperimentInput,
) {
    if let Some(var_195) = &input.experiment_name {
        object.key("ExperimentName").string(var_195);
    }
    if let Some(var_196) = &input.display_name {
        object.key("DisplayName").string(var_196);
    }
    if let Some(var_197) = &input.description {
        object.key("Description").string(var_197);
    }
    if let Some(var_198) = &input.tags {
        let mut array_199 = object.key("Tags").start_array();
        for item_200 in var_198 {
            {
                let mut object_201 = array_199.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_201, item_200);
                object_201.finish();
            }
        }
        array_199.finish();
    }
}

pub fn serialize_structure_create_feature_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFeatureGroupInput,
) {
    if let Some(var_202) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_202);
    }
    if let Some(var_203) = &input.record_identifier_feature_name {
        object.key("RecordIdentifierFeatureName").string(var_203);
    }
    if let Some(var_204) = &input.event_time_feature_name {
        object.key("EventTimeFeatureName").string(var_204);
    }
    if let Some(var_205) = &input.feature_definitions {
        let mut array_206 = object.key("FeatureDefinitions").start_array();
        for item_207 in var_205 {
            {
                let mut object_208 = array_206.value().start_object();
                crate::json_ser::serialize_structure_feature_definition(&mut object_208, item_207);
                object_208.finish();
            }
        }
        array_206.finish();
    }
    if let Some(var_209) = &input.online_store_config {
        let mut object_210 = object.key("OnlineStoreConfig").start_object();
        crate::json_ser::serialize_structure_online_store_config(&mut object_210, var_209);
        object_210.finish();
    }
    if let Some(var_211) = &input.offline_store_config {
        let mut object_212 = object.key("OfflineStoreConfig").start_object();
        crate::json_ser::serialize_structure_offline_store_config(&mut object_212, var_211);
        object_212.finish();
    }
    if let Some(var_213) = &input.role_arn {
        object.key("RoleArn").string(var_213);
    }
    if let Some(var_214) = &input.description {
        object.key("Description").string(var_214);
    }
    if let Some(var_215) = &input.tags {
        let mut array_216 = object.key("Tags").start_array();
        for item_217 in var_215 {
            {
                let mut object_218 = array_216.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_218, item_217);
                object_218.finish();
            }
        }
        array_216.finish();
    }
}

pub fn serialize_structure_create_flow_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFlowDefinitionInput,
) {
    if let Some(var_219) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_219);
    }
    if let Some(var_220) = &input.human_loop_request_source {
        let mut object_221 = object.key("HumanLoopRequestSource").start_object();
        crate::json_ser::serialize_structure_human_loop_request_source(&mut object_221, var_220);
        object_221.finish();
    }
    if let Some(var_222) = &input.human_loop_activation_config {
        let mut object_223 = object.key("HumanLoopActivationConfig").start_object();
        crate::json_ser::serialize_structure_human_loop_activation_config(&mut object_223, var_222);
        object_223.finish();
    }
    if let Some(var_224) = &input.human_loop_config {
        let mut object_225 = object.key("HumanLoopConfig").start_object();
        crate::json_ser::serialize_structure_human_loop_config(&mut object_225, var_224);
        object_225.finish();
    }
    if let Some(var_226) = &input.output_config {
        let mut object_227 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_flow_definition_output_config(
            &mut object_227,
            var_226,
        );
        object_227.finish();
    }
    if let Some(var_228) = &input.role_arn {
        object.key("RoleArn").string(var_228);
    }
    if let Some(var_229) = &input.tags {
        let mut array_230 = object.key("Tags").start_array();
        for item_231 in var_229 {
            {
                let mut object_232 = array_230.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_232, item_231);
                object_232.finish();
            }
        }
        array_230.finish();
    }
}

pub fn serialize_structure_create_human_task_ui_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHumanTaskUiInput,
) {
    if let Some(var_233) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_233);
    }
    if let Some(var_234) = &input.ui_template {
        let mut object_235 = object.key("UiTemplate").start_object();
        crate::json_ser::serialize_structure_ui_template(&mut object_235, var_234);
        object_235.finish();
    }
    if let Some(var_236) = &input.tags {
        let mut array_237 = object.key("Tags").start_array();
        for item_238 in var_236 {
            {
                let mut object_239 = array_237.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_239, item_238);
                object_239.finish();
            }
        }
        array_237.finish();
    }
}

pub fn serialize_structure_create_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHyperParameterTuningJobInput,
) {
    if let Some(var_240) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_240);
    }
    if let Some(var_241) = &input.hyper_parameter_tuning_job_config {
        let mut object_242 = object.key("HyperParameterTuningJobConfig").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_tuning_job_config(
            &mut object_242,
            var_241,
        );
        object_242.finish();
    }
    if let Some(var_243) = &input.training_job_definition {
        let mut object_244 = object.key("TrainingJobDefinition").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_training_job_definition(
            &mut object_244,
            var_243,
        );
        object_244.finish();
    }
    if let Some(var_245) = &input.training_job_definitions {
        let mut array_246 = object.key("TrainingJobDefinitions").start_array();
        for item_247 in var_245 {
            {
                let mut object_248 = array_246.value().start_object();
                crate::json_ser::serialize_structure_hyper_parameter_training_job_definition(
                    &mut object_248,
                    item_247,
                );
                object_248.finish();
            }
        }
        array_246.finish();
    }
    if let Some(var_249) = &input.warm_start_config {
        let mut object_250 = object.key("WarmStartConfig").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_tuning_job_warm_start_config(
            &mut object_250,
            var_249,
        );
        object_250.finish();
    }
    if let Some(var_251) = &input.tags {
        let mut array_252 = object.key("Tags").start_array();
        for item_253 in var_251 {
            {
                let mut object_254 = array_252.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_254, item_253);
                object_254.finish();
            }
        }
        array_252.finish();
    }
}

pub fn serialize_structure_create_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageInput,
) {
    if let Some(var_255) = &input.description {
        object.key("Description").string(var_255);
    }
    if let Some(var_256) = &input.display_name {
        object.key("DisplayName").string(var_256);
    }
    if let Some(var_257) = &input.image_name {
        object.key("ImageName").string(var_257);
    }
    if let Some(var_258) = &input.role_arn {
        object.key("RoleArn").string(var_258);
    }
    if let Some(var_259) = &input.tags {
        let mut array_260 = object.key("Tags").start_array();
        for item_261 in var_259 {
            {
                let mut object_262 = array_260.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_262, item_261);
                object_262.finish();
            }
        }
        array_260.finish();
    }
}

pub fn serialize_structure_create_image_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageVersionInput,
) {
    if let Some(var_263) = &input.base_image {
        object.key("BaseImage").string(var_263);
    }
    if let Some(var_264) = &input.client_token {
        object.key("ClientToken").string(var_264);
    }
    if let Some(var_265) = &input.image_name {
        object.key("ImageName").string(var_265);
    }
}

pub fn serialize_structure_create_labeling_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLabelingJobInput,
) {
    if let Some(var_266) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_266);
    }
    if let Some(var_267) = &input.label_attribute_name {
        object.key("LabelAttributeName").string(var_267);
    }
    if let Some(var_268) = &input.input_config {
        let mut object_269 = object.key("InputConfig").start_object();
        crate::json_ser::serialize_structure_labeling_job_input_config(&mut object_269, var_268);
        object_269.finish();
    }
    if let Some(var_270) = &input.output_config {
        let mut object_271 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_labeling_job_output_config(&mut object_271, var_270);
        object_271.finish();
    }
    if let Some(var_272) = &input.role_arn {
        object.key("RoleArn").string(var_272);
    }
    if let Some(var_273) = &input.label_category_config_s3_uri {
        object.key("LabelCategoryConfigS3Uri").string(var_273);
    }
    if let Some(var_274) = &input.stopping_conditions {
        let mut object_275 = object.key("StoppingConditions").start_object();
        crate::json_ser::serialize_structure_labeling_job_stopping_conditions(
            &mut object_275,
            var_274,
        );
        object_275.finish();
    }
    if let Some(var_276) = &input.labeling_job_algorithms_config {
        let mut object_277 = object.key("LabelingJobAlgorithmsConfig").start_object();
        crate::json_ser::serialize_structure_labeling_job_algorithms_config(
            &mut object_277,
            var_276,
        );
        object_277.finish();
    }
    if let Some(var_278) = &input.human_task_config {
        let mut object_279 = object.key("HumanTaskConfig").start_object();
        crate::json_ser::serialize_structure_human_task_config(&mut object_279, var_278);
        object_279.finish();
    }
    if let Some(var_280) = &input.tags {
        let mut array_281 = object.key("Tags").start_array();
        for item_282 in var_280 {
            {
                let mut object_283 = array_281.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_283, item_282);
                object_283.finish();
            }
        }
        array_281.finish();
    }
}

pub fn serialize_structure_create_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelInput,
) {
    if let Some(var_284) = &input.model_name {
        object.key("ModelName").string(var_284);
    }
    if let Some(var_285) = &input.primary_container {
        let mut object_286 = object.key("PrimaryContainer").start_object();
        crate::json_ser::serialize_structure_container_definition(&mut object_286, var_285);
        object_286.finish();
    }
    if let Some(var_287) = &input.containers {
        let mut array_288 = object.key("Containers").start_array();
        for item_289 in var_287 {
            {
                let mut object_290 = array_288.value().start_object();
                crate::json_ser::serialize_structure_container_definition(
                    &mut object_290,
                    item_289,
                );
                object_290.finish();
            }
        }
        array_288.finish();
    }
    if let Some(var_291) = &input.inference_execution_config {
        let mut object_292 = object.key("InferenceExecutionConfig").start_object();
        crate::json_ser::serialize_structure_inference_execution_config(&mut object_292, var_291);
        object_292.finish();
    }
    if let Some(var_293) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_293);
    }
    if let Some(var_294) = &input.tags {
        let mut array_295 = object.key("Tags").start_array();
        for item_296 in var_294 {
            {
                let mut object_297 = array_295.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_297, item_296);
                object_297.finish();
            }
        }
        array_295.finish();
    }
    if let Some(var_298) = &input.vpc_config {
        let mut object_299 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_299, var_298);
        object_299.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
}

pub fn serialize_structure_create_model_bias_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelBiasJobDefinitionInput,
) {
    if let Some(var_300) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_300);
    }
    if let Some(var_301) = &input.model_bias_baseline_config {
        let mut object_302 = object.key("ModelBiasBaselineConfig").start_object();
        crate::json_ser::serialize_structure_model_bias_baseline_config(&mut object_302, var_301);
        object_302.finish();
    }
    if let Some(var_303) = &input.model_bias_app_specification {
        let mut object_304 = object.key("ModelBiasAppSpecification").start_object();
        crate::json_ser::serialize_structure_model_bias_app_specification(&mut object_304, var_303);
        object_304.finish();
    }
    if let Some(var_305) = &input.model_bias_job_input {
        let mut object_306 = object.key("ModelBiasJobInput").start_object();
        crate::json_ser::serialize_structure_model_bias_job_input(&mut object_306, var_305);
        object_306.finish();
    }
    if let Some(var_307) = &input.model_bias_job_output_config {
        let mut object_308 = object.key("ModelBiasJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_308, var_307);
        object_308.finish();
    }
    if let Some(var_309) = &input.job_resources {
        let mut object_310 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_310, var_309);
        object_310.finish();
    }
    if let Some(var_311) = &input.network_config {
        let mut object_312 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_network_config(&mut object_312, var_311);
        object_312.finish();
    }
    if let Some(var_313) = &input.role_arn {
        object.key("RoleArn").string(var_313);
    }
    if let Some(var_314) = &input.stopping_condition {
        let mut object_315 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_315,
            var_314,
        );
        object_315.finish();
    }
    if let Some(var_316) = &input.tags {
        let mut array_317 = object.key("Tags").start_array();
        for item_318 in var_316 {
            {
                let mut object_319 = array_317.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_319, item_318);
                object_319.finish();
            }
        }
        array_317.finish();
    }
}

pub fn serialize_structure_create_model_explainability_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelExplainabilityJobDefinitionInput,
) {
    if let Some(var_320) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_320);
    }
    if let Some(var_321) = &input.model_explainability_baseline_config {
        let mut object_322 = object
            .key("ModelExplainabilityBaselineConfig")
            .start_object();
        crate::json_ser::serialize_structure_model_explainability_baseline_config(
            &mut object_322,
            var_321,
        );
        object_322.finish();
    }
    if let Some(var_323) = &input.model_explainability_app_specification {
        let mut object_324 = object
            .key("ModelExplainabilityAppSpecification")
            .start_object();
        crate::json_ser::serialize_structure_model_explainability_app_specification(
            &mut object_324,
            var_323,
        );
        object_324.finish();
    }
    if let Some(var_325) = &input.model_explainability_job_input {
        let mut object_326 = object.key("ModelExplainabilityJobInput").start_object();
        crate::json_ser::serialize_structure_model_explainability_job_input(
            &mut object_326,
            var_325,
        );
        object_326.finish();
    }
    if let Some(var_327) = &input.model_explainability_job_output_config {
        let mut object_328 = object
            .key("ModelExplainabilityJobOutputConfig")
            .start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_328, var_327);
        object_328.finish();
    }
    if let Some(var_329) = &input.job_resources {
        let mut object_330 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_330, var_329);
        object_330.finish();
    }
    if let Some(var_331) = &input.network_config {
        let mut object_332 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_network_config(&mut object_332, var_331);
        object_332.finish();
    }
    if let Some(var_333) = &input.role_arn {
        object.key("RoleArn").string(var_333);
    }
    if let Some(var_334) = &input.stopping_condition {
        let mut object_335 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_335,
            var_334,
        );
        object_335.finish();
    }
    if let Some(var_336) = &input.tags {
        let mut array_337 = object.key("Tags").start_array();
        for item_338 in var_336 {
            {
                let mut object_339 = array_337.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_339, item_338);
                object_339.finish();
            }
        }
        array_337.finish();
    }
}

pub fn serialize_structure_create_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelPackageInput,
) {
    if let Some(var_340) = &input.model_package_name {
        object.key("ModelPackageName").string(var_340);
    }
    if let Some(var_341) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_341);
    }
    if let Some(var_342) = &input.model_package_description {
        object.key("ModelPackageDescription").string(var_342);
    }
    if let Some(var_343) = &input.inference_specification {
        let mut object_344 = object.key("InferenceSpecification").start_object();
        crate::json_ser::serialize_structure_inference_specification(&mut object_344, var_343);
        object_344.finish();
    }
    if let Some(var_345) = &input.validation_specification {
        let mut object_346 = object.key("ValidationSpecification").start_object();
        crate::json_ser::serialize_structure_model_package_validation_specification(
            &mut object_346,
            var_345,
        );
        object_346.finish();
    }
    if let Some(var_347) = &input.source_algorithm_specification {
        let mut object_348 = object.key("SourceAlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_source_algorithm_specification(
            &mut object_348,
            var_347,
        );
        object_348.finish();
    }
    if input.certify_for_marketplace {
        object
            .key("CertifyForMarketplace")
            .boolean(input.certify_for_marketplace);
    }
    if let Some(var_349) = &input.tags {
        let mut array_350 = object.key("Tags").start_array();
        for item_351 in var_349 {
            {
                let mut object_352 = array_350.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_352, item_351);
                object_352.finish();
            }
        }
        array_350.finish();
    }
    if let Some(var_353) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_353.as_str());
    }
    if let Some(var_354) = &input.metadata_properties {
        let mut object_355 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_355, var_354);
        object_355.finish();
    }
    if let Some(var_356) = &input.model_metrics {
        let mut object_357 = object.key("ModelMetrics").start_object();
        crate::json_ser::serialize_structure_model_metrics(&mut object_357, var_356);
        object_357.finish();
    }
    if let Some(var_358) = &input.client_token {
        object.key("ClientToken").string(var_358);
    }
}

pub fn serialize_structure_create_model_package_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelPackageGroupInput,
) {
    if let Some(var_359) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_359);
    }
    if let Some(var_360) = &input.model_package_group_description {
        object.key("ModelPackageGroupDescription").string(var_360);
    }
    if let Some(var_361) = &input.tags {
        let mut array_362 = object.key("Tags").start_array();
        for item_363 in var_361 {
            {
                let mut object_364 = array_362.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_364, item_363);
                object_364.finish();
            }
        }
        array_362.finish();
    }
}

pub fn serialize_structure_create_model_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelQualityJobDefinitionInput,
) {
    if let Some(var_365) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_365);
    }
    if let Some(var_366) = &input.model_quality_baseline_config {
        let mut object_367 = object.key("ModelQualityBaselineConfig").start_object();
        crate::json_ser::serialize_structure_model_quality_baseline_config(
            &mut object_367,
            var_366,
        );
        object_367.finish();
    }
    if let Some(var_368) = &input.model_quality_app_specification {
        let mut object_369 = object.key("ModelQualityAppSpecification").start_object();
        crate::json_ser::serialize_structure_model_quality_app_specification(
            &mut object_369,
            var_368,
        );
        object_369.finish();
    }
    if let Some(var_370) = &input.model_quality_job_input {
        let mut object_371 = object.key("ModelQualityJobInput").start_object();
        crate::json_ser::serialize_structure_model_quality_job_input(&mut object_371, var_370);
        object_371.finish();
    }
    if let Some(var_372) = &input.model_quality_job_output_config {
        let mut object_373 = object.key("ModelQualityJobOutputConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_373, var_372);
        object_373.finish();
    }
    if let Some(var_374) = &input.job_resources {
        let mut object_375 = object.key("JobResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_375, var_374);
        object_375.finish();
    }
    if let Some(var_376) = &input.network_config {
        let mut object_377 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_network_config(&mut object_377, var_376);
        object_377.finish();
    }
    if let Some(var_378) = &input.role_arn {
        object.key("RoleArn").string(var_378);
    }
    if let Some(var_379) = &input.stopping_condition {
        let mut object_380 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_380,
            var_379,
        );
        object_380.finish();
    }
    if let Some(var_381) = &input.tags {
        let mut array_382 = object.key("Tags").start_array();
        for item_383 in var_381 {
            {
                let mut object_384 = array_382.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_384, item_383);
                object_384.finish();
            }
        }
        array_382.finish();
    }
}

pub fn serialize_structure_create_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMonitoringScheduleInput,
) {
    if let Some(var_385) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_385);
    }
    if let Some(var_386) = &input.monitoring_schedule_config {
        let mut object_387 = object.key("MonitoringScheduleConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_schedule_config(&mut object_387, var_386);
        object_387.finish();
    }
    if let Some(var_388) = &input.tags {
        let mut array_389 = object.key("Tags").start_array();
        for item_390 in var_388 {
            {
                let mut object_391 = array_389.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_391, item_390);
                object_391.finish();
            }
        }
        array_389.finish();
    }
}

pub fn serialize_structure_create_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNotebookInstanceInput,
) {
    if let Some(var_392) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_392);
    }
    if let Some(var_393) = &input.instance_type {
        object.key("InstanceType").string(var_393.as_str());
    }
    if let Some(var_394) = &input.subnet_id {
        object.key("SubnetId").string(var_394);
    }
    if let Some(var_395) = &input.security_group_ids {
        let mut array_396 = object.key("SecurityGroupIds").start_array();
        for item_397 in var_395 {
            {
                array_396.value().string(item_397);
            }
        }
        array_396.finish();
    }
    if let Some(var_398) = &input.role_arn {
        object.key("RoleArn").string(var_398);
    }
    if let Some(var_399) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_399);
    }
    if let Some(var_400) = &input.tags {
        let mut array_401 = object.key("Tags").start_array();
        for item_402 in var_400 {
            {
                let mut object_403 = array_401.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_403, item_402);
                object_403.finish();
            }
        }
        array_401.finish();
    }
    if let Some(var_404) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_404);
    }
    if let Some(var_405) = &input.direct_internet_access {
        object.key("DirectInternetAccess").string(var_405.as_str());
    }
    if let Some(var_406) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_406).into()),
        );
    }
    if let Some(var_407) = &input.accelerator_types {
        let mut array_408 = object.key("AcceleratorTypes").start_array();
        for item_409 in var_407 {
            {
                array_408.value().string(item_409.as_str());
            }
        }
        array_408.finish();
    }
    if let Some(var_410) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_410);
    }
    if let Some(var_411) = &input.additional_code_repositories {
        let mut array_412 = object.key("AdditionalCodeRepositories").start_array();
        for item_413 in var_411 {
            {
                array_412.value().string(item_413);
            }
        }
        array_412.finish();
    }
    if let Some(var_414) = &input.root_access {
        object.key("RootAccess").string(var_414.as_str());
    }
}

pub fn serialize_structure_create_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_415) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_415);
    }
    if let Some(var_416) = &input.on_create {
        let mut array_417 = object.key("OnCreate").start_array();
        for item_418 in var_416 {
            {
                let mut object_419 = array_417.value().start_object();
                crate::json_ser::serialize_structure_notebook_instance_lifecycle_hook(
                    &mut object_419,
                    item_418,
                );
                object_419.finish();
            }
        }
        array_417.finish();
    }
    if let Some(var_420) = &input.on_start {
        let mut array_421 = object.key("OnStart").start_array();
        for item_422 in var_420 {
            {
                let mut object_423 = array_421.value().start_object();
                crate::json_ser::serialize_structure_notebook_instance_lifecycle_hook(
                    &mut object_423,
                    item_422,
                );
                object_423.finish();
            }
        }
        array_421.finish();
    }
}

pub fn serialize_structure_create_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePipelineInput,
) {
    if let Some(var_424) = &input.pipeline_name {
        object.key("PipelineName").string(var_424);
    }
    if let Some(var_425) = &input.pipeline_display_name {
        object.key("PipelineDisplayName").string(var_425);
    }
    if let Some(var_426) = &input.pipeline_definition {
        object.key("PipelineDefinition").string(var_426);
    }
    if let Some(var_427) = &input.pipeline_description {
        object.key("PipelineDescription").string(var_427);
    }
    if let Some(var_428) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_428);
    }
    if let Some(var_429) = &input.role_arn {
        object.key("RoleArn").string(var_429);
    }
    if let Some(var_430) = &input.tags {
        let mut array_431 = object.key("Tags").start_array();
        for item_432 in var_430 {
            {
                let mut object_433 = array_431.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_433, item_432);
                object_433.finish();
            }
        }
        array_431.finish();
    }
}

pub fn serialize_structure_create_presigned_domain_url_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePresignedDomainUrlInput,
) {
    if let Some(var_434) = &input.domain_id {
        object.key("DomainId").string(var_434);
    }
    if let Some(var_435) = &input.user_profile_name {
        object.key("UserProfileName").string(var_435);
    }
    if let Some(var_436) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_436).into()),
        );
    }
    if let Some(var_437) = &input.expires_in_seconds {
        object.key("ExpiresInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_437).into()),
        );
    }
}

pub fn serialize_structure_create_presigned_notebook_instance_url_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePresignedNotebookInstanceUrlInput,
) {
    if let Some(var_438) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_438);
    }
    if let Some(var_439) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_439).into()),
        );
    }
}

pub fn serialize_structure_create_processing_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProcessingJobInput,
) {
    if let Some(var_440) = &input.processing_inputs {
        let mut array_441 = object.key("ProcessingInputs").start_array();
        for item_442 in var_440 {
            {
                let mut object_443 = array_441.value().start_object();
                crate::json_ser::serialize_structure_processing_input(&mut object_443, item_442);
                object_443.finish();
            }
        }
        array_441.finish();
    }
    if let Some(var_444) = &input.processing_output_config {
        let mut object_445 = object.key("ProcessingOutputConfig").start_object();
        crate::json_ser::serialize_structure_processing_output_config(&mut object_445, var_444);
        object_445.finish();
    }
    if let Some(var_446) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_446);
    }
    if let Some(var_447) = &input.processing_resources {
        let mut object_448 = object.key("ProcessingResources").start_object();
        crate::json_ser::serialize_structure_processing_resources(&mut object_448, var_447);
        object_448.finish();
    }
    if let Some(var_449) = &input.stopping_condition {
        let mut object_450 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_processing_stopping_condition(
            &mut object_450,
            var_449,
        );
        object_450.finish();
    }
    if let Some(var_451) = &input.app_specification {
        let mut object_452 = object.key("AppSpecification").start_object();
        crate::json_ser::serialize_structure_app_specification(&mut object_452, var_451);
        object_452.finish();
    }
    if let Some(var_453) = &input.environment {
        let mut object_454 = object.key("Environment").start_object();
        for (key_455, value_456) in var_453 {
            {
                object_454.key(key_455).string(value_456);
            }
        }
        object_454.finish();
    }
    if let Some(var_457) = &input.network_config {
        let mut object_458 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_network_config(&mut object_458, var_457);
        object_458.finish();
    }
    if let Some(var_459) = &input.role_arn {
        object.key("RoleArn").string(var_459);
    }
    if let Some(var_460) = &input.tags {
        let mut array_461 = object.key("Tags").start_array();
        for item_462 in var_460 {
            {
                let mut object_463 = array_461.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_463, item_462);
                object_463.finish();
            }
        }
        array_461.finish();
    }
    if let Some(var_464) = &input.experiment_config {
        let mut object_465 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_experiment_config(&mut object_465, var_464);
        object_465.finish();
    }
}

pub fn serialize_structure_create_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProjectInput,
) {
    if let Some(var_466) = &input.project_name {
        object.key("ProjectName").string(var_466);
    }
    if let Some(var_467) = &input.project_description {
        object.key("ProjectDescription").string(var_467);
    }
    if let Some(var_468) = &input.service_catalog_provisioning_details {
        let mut object_469 = object
            .key("ServiceCatalogProvisioningDetails")
            .start_object();
        crate::json_ser::serialize_structure_service_catalog_provisioning_details(
            &mut object_469,
            var_468,
        );
        object_469.finish();
    }
    if let Some(var_470) = &input.tags {
        let mut array_471 = object.key("Tags").start_array();
        for item_472 in var_470 {
            {
                let mut object_473 = array_471.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_473, item_472);
                object_473.finish();
            }
        }
        array_471.finish();
    }
}

pub fn serialize_structure_create_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrainingJobInput,
) {
    if let Some(var_474) = &input.training_job_name {
        object.key("TrainingJobName").string(var_474);
    }
    if let Some(var_475) = &input.hyper_parameters {
        let mut object_476 = object.key("HyperParameters").start_object();
        for (key_477, value_478) in var_475 {
            {
                object_476.key(key_477).string(value_478);
            }
        }
        object_476.finish();
    }
    if let Some(var_479) = &input.algorithm_specification {
        let mut object_480 = object.key("AlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_algorithm_specification(&mut object_480, var_479);
        object_480.finish();
    }
    if let Some(var_481) = &input.role_arn {
        object.key("RoleArn").string(var_481);
    }
    if let Some(var_482) = &input.input_data_config {
        let mut array_483 = object.key("InputDataConfig").start_array();
        for item_484 in var_482 {
            {
                let mut object_485 = array_483.value().start_object();
                crate::json_ser::serialize_structure_channel(&mut object_485, item_484);
                object_485.finish();
            }
        }
        array_483.finish();
    }
    if let Some(var_486) = &input.output_data_config {
        let mut object_487 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_487, var_486);
        object_487.finish();
    }
    if let Some(var_488) = &input.resource_config {
        let mut object_489 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_resource_config(&mut object_489, var_488);
        object_489.finish();
    }
    if let Some(var_490) = &input.vpc_config {
        let mut object_491 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_491, var_490);
        object_491.finish();
    }
    if let Some(var_492) = &input.stopping_condition {
        let mut object_493 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_stopping_condition(&mut object_493, var_492);
        object_493.finish();
    }
    if let Some(var_494) = &input.tags {
        let mut array_495 = object.key("Tags").start_array();
        for item_496 in var_494 {
            {
                let mut object_497 = array_495.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_497, item_496);
                object_497.finish();
            }
        }
        array_495.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object
            .key("EnableManagedSpotTraining")
            .boolean(input.enable_managed_spot_training);
    }
    if let Some(var_498) = &input.checkpoint_config {
        let mut object_499 = object.key("CheckpointConfig").start_object();
        crate::json_ser::serialize_structure_checkpoint_config(&mut object_499, var_498);
        object_499.finish();
    }
    if let Some(var_500) = &input.debug_hook_config {
        let mut object_501 = object.key("DebugHookConfig").start_object();
        crate::json_ser::serialize_structure_debug_hook_config(&mut object_501, var_500);
        object_501.finish();
    }
    if let Some(var_502) = &input.debug_rule_configurations {
        let mut array_503 = object.key("DebugRuleConfigurations").start_array();
        for item_504 in var_502 {
            {
                let mut object_505 = array_503.value().start_object();
                crate::json_ser::serialize_structure_debug_rule_configuration(
                    &mut object_505,
                    item_504,
                );
                object_505.finish();
            }
        }
        array_503.finish();
    }
    if let Some(var_506) = &input.tensor_board_output_config {
        let mut object_507 = object.key("TensorBoardOutputConfig").start_object();
        crate::json_ser::serialize_structure_tensor_board_output_config(&mut object_507, var_506);
        object_507.finish();
    }
    if let Some(var_508) = &input.experiment_config {
        let mut object_509 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_experiment_config(&mut object_509, var_508);
        object_509.finish();
    }
    if let Some(var_510) = &input.profiler_config {
        let mut object_511 = object.key("ProfilerConfig").start_object();
        crate::json_ser::serialize_structure_profiler_config(&mut object_511, var_510);
        object_511.finish();
    }
    if let Some(var_512) = &input.profiler_rule_configurations {
        let mut array_513 = object.key("ProfilerRuleConfigurations").start_array();
        for item_514 in var_512 {
            {
                let mut object_515 = array_513.value().start_object();
                crate::json_ser::serialize_structure_profiler_rule_configuration(
                    &mut object_515,
                    item_514,
                );
                object_515.finish();
            }
        }
        array_513.finish();
    }
    if let Some(var_516) = &input.environment {
        let mut object_517 = object.key("Environment").start_object();
        for (key_518, value_519) in var_516 {
            {
                object_517.key(key_518).string(value_519);
            }
        }
        object_517.finish();
    }
    if let Some(var_520) = &input.retry_strategy {
        let mut object_521 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_retry_strategy(&mut object_521, var_520);
        object_521.finish();
    }
}

pub fn serialize_structure_create_transform_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTransformJobInput,
) {
    if let Some(var_522) = &input.transform_job_name {
        object.key("TransformJobName").string(var_522);
    }
    if let Some(var_523) = &input.model_name {
        object.key("ModelName").string(var_523);
    }
    if let Some(var_524) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_524).into()),
        );
    }
    if let Some(var_525) = &input.model_client_config {
        let mut object_526 = object.key("ModelClientConfig").start_object();
        crate::json_ser::serialize_structure_model_client_config(&mut object_526, var_525);
        object_526.finish();
    }
    if let Some(var_527) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_527).into()),
        );
    }
    if let Some(var_528) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_528.as_str());
    }
    if let Some(var_529) = &input.environment {
        let mut object_530 = object.key("Environment").start_object();
        for (key_531, value_532) in var_529 {
            {
                object_530.key(key_531).string(value_532);
            }
        }
        object_530.finish();
    }
    if let Some(var_533) = &input.transform_input {
        let mut object_534 = object.key("TransformInput").start_object();
        crate::json_ser::serialize_structure_transform_input(&mut object_534, var_533);
        object_534.finish();
    }
    if let Some(var_535) = &input.transform_output {
        let mut object_536 = object.key("TransformOutput").start_object();
        crate::json_ser::serialize_structure_transform_output(&mut object_536, var_535);
        object_536.finish();
    }
    if let Some(var_537) = &input.transform_resources {
        let mut object_538 = object.key("TransformResources").start_object();
        crate::json_ser::serialize_structure_transform_resources(&mut object_538, var_537);
        object_538.finish();
    }
    if let Some(var_539) = &input.data_processing {
        let mut object_540 = object.key("DataProcessing").start_object();
        crate::json_ser::serialize_structure_data_processing(&mut object_540, var_539);
        object_540.finish();
    }
    if let Some(var_541) = &input.tags {
        let mut array_542 = object.key("Tags").start_array();
        for item_543 in var_541 {
            {
                let mut object_544 = array_542.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_544, item_543);
                object_544.finish();
            }
        }
        array_542.finish();
    }
    if let Some(var_545) = &input.experiment_config {
        let mut object_546 = object.key("ExperimentConfig").start_object();
        crate::json_ser::serialize_structure_experiment_config(&mut object_546, var_545);
        object_546.finish();
    }
}

pub fn serialize_structure_create_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrialInput,
) {
    if let Some(var_547) = &input.trial_name {
        object.key("TrialName").string(var_547);
    }
    if let Some(var_548) = &input.display_name {
        object.key("DisplayName").string(var_548);
    }
    if let Some(var_549) = &input.experiment_name {
        object.key("ExperimentName").string(var_549);
    }
    if let Some(var_550) = &input.metadata_properties {
        let mut object_551 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_551, var_550);
        object_551.finish();
    }
    if let Some(var_552) = &input.tags {
        let mut array_553 = object.key("Tags").start_array();
        for item_554 in var_552 {
            {
                let mut object_555 = array_553.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_555, item_554);
                object_555.finish();
            }
        }
        array_553.finish();
    }
}

pub fn serialize_structure_create_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrialComponentInput,
) {
    if let Some(var_556) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_556);
    }
    if let Some(var_557) = &input.display_name {
        object.key("DisplayName").string(var_557);
    }
    if let Some(var_558) = &input.status {
        let mut object_559 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_trial_component_status(&mut object_559, var_558);
        object_559.finish();
    }
    if let Some(var_560) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_560, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_561) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_561, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_562) = &input.parameters {
        let mut object_563 = object.key("Parameters").start_object();
        for (key_564, value_565) in var_562 {
            {
                let mut object_566 = object_563.key(key_564).start_object();
                crate::json_ser::serialize_union_trial_component_parameter_value(
                    &mut object_566,
                    value_565,
                );
                object_566.finish();
            }
        }
        object_563.finish();
    }
    if let Some(var_567) = &input.input_artifacts {
        let mut object_568 = object.key("InputArtifacts").start_object();
        for (key_569, value_570) in var_567 {
            {
                let mut object_571 = object_568.key(key_569).start_object();
                crate::json_ser::serialize_structure_trial_component_artifact(
                    &mut object_571,
                    value_570,
                );
                object_571.finish();
            }
        }
        object_568.finish();
    }
    if let Some(var_572) = &input.output_artifacts {
        let mut object_573 = object.key("OutputArtifacts").start_object();
        for (key_574, value_575) in var_572 {
            {
                let mut object_576 = object_573.key(key_574).start_object();
                crate::json_ser::serialize_structure_trial_component_artifact(
                    &mut object_576,
                    value_575,
                );
                object_576.finish();
            }
        }
        object_573.finish();
    }
    if let Some(var_577) = &input.metadata_properties {
        let mut object_578 = object.key("MetadataProperties").start_object();
        crate::json_ser::serialize_structure_metadata_properties(&mut object_578, var_577);
        object_578.finish();
    }
    if let Some(var_579) = &input.tags {
        let mut array_580 = object.key("Tags").start_array();
        for item_581 in var_579 {
            {
                let mut object_582 = array_580.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_582, item_581);
                object_582.finish();
            }
        }
        array_580.finish();
    }
}

pub fn serialize_structure_create_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserProfileInput,
) {
    if let Some(var_583) = &input.domain_id {
        object.key("DomainId").string(var_583);
    }
    if let Some(var_584) = &input.user_profile_name {
        object.key("UserProfileName").string(var_584);
    }
    if let Some(var_585) = &input.single_sign_on_user_identifier {
        object.key("SingleSignOnUserIdentifier").string(var_585);
    }
    if let Some(var_586) = &input.single_sign_on_user_value {
        object.key("SingleSignOnUserValue").string(var_586);
    }
    if let Some(var_587) = &input.tags {
        let mut array_588 = object.key("Tags").start_array();
        for item_589 in var_587 {
            {
                let mut object_590 = array_588.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_590, item_589);
                object_590.finish();
            }
        }
        array_588.finish();
    }
    if let Some(var_591) = &input.user_settings {
        let mut object_592 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_user_settings(&mut object_592, var_591);
        object_592.finish();
    }
}

pub fn serialize_structure_create_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkforceInput,
) {
    if let Some(var_593) = &input.cognito_config {
        let mut object_594 = object.key("CognitoConfig").start_object();
        crate::json_ser::serialize_structure_cognito_config(&mut object_594, var_593);
        object_594.finish();
    }
    if let Some(var_595) = &input.oidc_config {
        let mut object_596 = object.key("OidcConfig").start_object();
        crate::json_ser::serialize_structure_oidc_config(&mut object_596, var_595);
        object_596.finish();
    }
    if let Some(var_597) = &input.source_ip_config {
        let mut object_598 = object.key("SourceIpConfig").start_object();
        crate::json_ser::serialize_structure_source_ip_config(&mut object_598, var_597);
        object_598.finish();
    }
    if let Some(var_599) = &input.workforce_name {
        object.key("WorkforceName").string(var_599);
    }
    if let Some(var_600) = &input.tags {
        let mut array_601 = object.key("Tags").start_array();
        for item_602 in var_600 {
            {
                let mut object_603 = array_601.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_603, item_602);
                object_603.finish();
            }
        }
        array_601.finish();
    }
}

pub fn serialize_structure_create_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkteamInput,
) {
    if let Some(var_604) = &input.workteam_name {
        object.key("WorkteamName").string(var_604);
    }
    if let Some(var_605) = &input.workforce_name {
        object.key("WorkforceName").string(var_605);
    }
    if let Some(var_606) = &input.member_definitions {
        let mut array_607 = object.key("MemberDefinitions").start_array();
        for item_608 in var_606 {
            {
                let mut object_609 = array_607.value().start_object();
                crate::json_ser::serialize_structure_member_definition(&mut object_609, item_608);
                object_609.finish();
            }
        }
        array_607.finish();
    }
    if let Some(var_610) = &input.description {
        object.key("Description").string(var_610);
    }
    if let Some(var_611) = &input.notification_configuration {
        let mut object_612 = object.key("NotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_notification_configuration(&mut object_612, var_611);
        object_612.finish();
    }
    if let Some(var_613) = &input.tags {
        let mut array_614 = object.key("Tags").start_array();
        for item_615 in var_613 {
            {
                let mut object_616 = array_614.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_616, item_615);
                object_616.finish();
            }
        }
        array_614.finish();
    }
}

pub fn serialize_structure_delete_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteActionInput,
) {
    if let Some(var_617) = &input.action_name {
        object.key("ActionName").string(var_617);
    }
}

pub fn serialize_structure_delete_algorithm_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAlgorithmInput,
) {
    if let Some(var_618) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_618);
    }
}

pub fn serialize_structure_delete_app_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppInput,
) {
    if let Some(var_619) = &input.domain_id {
        object.key("DomainId").string(var_619);
    }
    if let Some(var_620) = &input.user_profile_name {
        object.key("UserProfileName").string(var_620);
    }
    if let Some(var_621) = &input.app_type {
        object.key("AppType").string(var_621.as_str());
    }
    if let Some(var_622) = &input.app_name {
        object.key("AppName").string(var_622);
    }
}

pub fn serialize_structure_delete_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppImageConfigInput,
) {
    if let Some(var_623) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_623);
    }
}

pub fn serialize_structure_delete_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteArtifactInput,
) {
    if let Some(var_624) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_624);
    }
    if let Some(var_625) = &input.source {
        let mut object_626 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_artifact_source(&mut object_626, var_625);
        object_626.finish();
    }
}

pub fn serialize_structure_delete_association_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAssociationInput,
) {
    if let Some(var_627) = &input.source_arn {
        object.key("SourceArn").string(var_627);
    }
    if let Some(var_628) = &input.destination_arn {
        object.key("DestinationArn").string(var_628);
    }
}

pub fn serialize_structure_delete_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCodeRepositoryInput,
) {
    if let Some(var_629) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_629);
    }
}

pub fn serialize_structure_delete_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteContextInput,
) {
    if let Some(var_630) = &input.context_name {
        object.key("ContextName").string(var_630);
    }
}

pub fn serialize_structure_delete_data_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataQualityJobDefinitionInput,
) {
    if let Some(var_631) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_631);
    }
}

pub fn serialize_structure_delete_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDeviceFleetInput,
) {
    if let Some(var_632) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_632);
    }
}

pub fn serialize_structure_delete_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDomainInput,
) {
    if let Some(var_633) = &input.domain_id {
        object.key("DomainId").string(var_633);
    }
    if let Some(var_634) = &input.retention_policy {
        let mut object_635 = object.key("RetentionPolicy").start_object();
        crate::json_ser::serialize_structure_retention_policy(&mut object_635, var_634);
        object_635.finish();
    }
}

pub fn serialize_structure_delete_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointInput,
) {
    if let Some(var_636) = &input.endpoint_name {
        object.key("EndpointName").string(var_636);
    }
}

pub fn serialize_structure_delete_endpoint_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEndpointConfigInput,
) {
    if let Some(var_637) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_637);
    }
}

pub fn serialize_structure_delete_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteExperimentInput,
) {
    if let Some(var_638) = &input.experiment_name {
        object.key("ExperimentName").string(var_638);
    }
}

pub fn serialize_structure_delete_feature_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFeatureGroupInput,
) {
    if let Some(var_639) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_639);
    }
}

pub fn serialize_structure_delete_flow_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFlowDefinitionInput,
) {
    if let Some(var_640) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_640);
    }
}

pub fn serialize_structure_delete_human_task_ui_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteHumanTaskUiInput,
) {
    if let Some(var_641) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_641);
    }
}

pub fn serialize_structure_delete_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageInput,
) {
    if let Some(var_642) = &input.image_name {
        object.key("ImageName").string(var_642);
    }
}

pub fn serialize_structure_delete_image_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageVersionInput,
) {
    if let Some(var_643) = &input.image_name {
        object.key("ImageName").string(var_643);
    }
    if let Some(var_644) = &input.version {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_644).into()),
        );
    }
}

pub fn serialize_structure_delete_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelInput,
) {
    if let Some(var_645) = &input.model_name {
        object.key("ModelName").string(var_645);
    }
}

pub fn serialize_structure_delete_model_bias_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelBiasJobDefinitionInput,
) {
    if let Some(var_646) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_646);
    }
}

pub fn serialize_structure_delete_model_explainability_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelExplainabilityJobDefinitionInput,
) {
    if let Some(var_647) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_647);
    }
}

pub fn serialize_structure_delete_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageInput,
) {
    if let Some(var_648) = &input.model_package_name {
        object.key("ModelPackageName").string(var_648);
    }
}

pub fn serialize_structure_delete_model_package_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageGroupInput,
) {
    if let Some(var_649) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_649);
    }
}

pub fn serialize_structure_delete_model_package_group_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelPackageGroupPolicyInput,
) {
    if let Some(var_650) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_650);
    }
}

pub fn serialize_structure_delete_model_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteModelQualityJobDefinitionInput,
) {
    if let Some(var_651) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_651);
    }
}

pub fn serialize_structure_delete_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMonitoringScheduleInput,
) {
    if let Some(var_652) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_652);
    }
}

pub fn serialize_structure_delete_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteNotebookInstanceInput,
) {
    if let Some(var_653) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_653);
    }
}

pub fn serialize_structure_delete_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_654) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_654);
    }
}

pub fn serialize_structure_delete_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePipelineInput,
) {
    if let Some(var_655) = &input.pipeline_name {
        object.key("PipelineName").string(var_655);
    }
    if let Some(var_656) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_656);
    }
}

pub fn serialize_structure_delete_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProjectInput,
) {
    if let Some(var_657) = &input.project_name {
        object.key("ProjectName").string(var_657);
    }
}

pub fn serialize_structure_delete_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTagsInput,
) {
    if let Some(var_658) = &input.resource_arn {
        object.key("ResourceArn").string(var_658);
    }
    if let Some(var_659) = &input.tag_keys {
        let mut array_660 = object.key("TagKeys").start_array();
        for item_661 in var_659 {
            {
                array_660.value().string(item_661);
            }
        }
        array_660.finish();
    }
}

pub fn serialize_structure_delete_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTrialInput,
) {
    if let Some(var_662) = &input.trial_name {
        object.key("TrialName").string(var_662);
    }
}

pub fn serialize_structure_delete_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTrialComponentInput,
) {
    if let Some(var_663) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_663);
    }
}

pub fn serialize_structure_delete_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserProfileInput,
) {
    if let Some(var_664) = &input.domain_id {
        object.key("DomainId").string(var_664);
    }
    if let Some(var_665) = &input.user_profile_name {
        object.key("UserProfileName").string(var_665);
    }
}

pub fn serialize_structure_delete_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkforceInput,
) {
    if let Some(var_666) = &input.workforce_name {
        object.key("WorkforceName").string(var_666);
    }
}

pub fn serialize_structure_delete_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkteamInput,
) {
    if let Some(var_667) = &input.workteam_name {
        object.key("WorkteamName").string(var_667);
    }
}

pub fn serialize_structure_deregister_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterDevicesInput,
) {
    if let Some(var_668) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_668);
    }
    if let Some(var_669) = &input.device_names {
        let mut array_670 = object.key("DeviceNames").start_array();
        for item_671 in var_669 {
            {
                array_670.value().string(item_671);
            }
        }
        array_670.finish();
    }
}

pub fn serialize_structure_describe_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeActionInput,
) {
    if let Some(var_672) = &input.action_name {
        object.key("ActionName").string(var_672);
    }
}

pub fn serialize_structure_describe_algorithm_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAlgorithmInput,
) {
    if let Some(var_673) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_673);
    }
}

pub fn serialize_structure_describe_app_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppInput,
) {
    if let Some(var_674) = &input.domain_id {
        object.key("DomainId").string(var_674);
    }
    if let Some(var_675) = &input.user_profile_name {
        object.key("UserProfileName").string(var_675);
    }
    if let Some(var_676) = &input.app_type {
        object.key("AppType").string(var_676.as_str());
    }
    if let Some(var_677) = &input.app_name {
        object.key("AppName").string(var_677);
    }
}

pub fn serialize_structure_describe_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppImageConfigInput,
) {
    if let Some(var_678) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_678);
    }
}

pub fn serialize_structure_describe_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeArtifactInput,
) {
    if let Some(var_679) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_679);
    }
}

pub fn serialize_structure_describe_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAutoMLJobInput,
) {
    if let Some(var_680) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_680);
    }
}

pub fn serialize_structure_describe_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCodeRepositoryInput,
) {
    if let Some(var_681) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_681);
    }
}

pub fn serialize_structure_describe_compilation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCompilationJobInput,
) {
    if let Some(var_682) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_682);
    }
}

pub fn serialize_structure_describe_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeContextInput,
) {
    if let Some(var_683) = &input.context_name {
        object.key("ContextName").string(var_683);
    }
}

pub fn serialize_structure_describe_data_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataQualityJobDefinitionInput,
) {
    if let Some(var_684) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_684);
    }
}

pub fn serialize_structure_describe_device_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeviceInput,
) {
    if let Some(var_685) = &input.next_token {
        object.key("NextToken").string(var_685);
    }
    if let Some(var_686) = &input.device_name {
        object.key("DeviceName").string(var_686);
    }
    if let Some(var_687) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_687);
    }
}

pub fn serialize_structure_describe_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeviceFleetInput,
) {
    if let Some(var_688) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_688);
    }
}

pub fn serialize_structure_describe_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDomainInput,
) {
    if let Some(var_689) = &input.domain_id {
        object.key("DomainId").string(var_689);
    }
}

pub fn serialize_structure_describe_edge_packaging_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEdgePackagingJobInput,
) {
    if let Some(var_690) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_690);
    }
}

pub fn serialize_structure_describe_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointInput,
) {
    if let Some(var_691) = &input.endpoint_name {
        object.key("EndpointName").string(var_691);
    }
}

pub fn serialize_structure_describe_endpoint_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEndpointConfigInput,
) {
    if let Some(var_692) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_692);
    }
}

pub fn serialize_structure_describe_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExperimentInput,
) {
    if let Some(var_693) = &input.experiment_name {
        object.key("ExperimentName").string(var_693);
    }
}

pub fn serialize_structure_describe_feature_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFeatureGroupInput,
) {
    if let Some(var_694) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_694);
    }
    if let Some(var_695) = &input.next_token {
        object.key("NextToken").string(var_695);
    }
}

pub fn serialize_structure_describe_flow_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFlowDefinitionInput,
) {
    if let Some(var_696) = &input.flow_definition_name {
        object.key("FlowDefinitionName").string(var_696);
    }
}

pub fn serialize_structure_describe_human_task_ui_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeHumanTaskUiInput,
) {
    if let Some(var_697) = &input.human_task_ui_name {
        object.key("HumanTaskUiName").string(var_697);
    }
}

pub fn serialize_structure_describe_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeHyperParameterTuningJobInput,
) {
    if let Some(var_698) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_698);
    }
}

pub fn serialize_structure_describe_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageInput,
) {
    if let Some(var_699) = &input.image_name {
        object.key("ImageName").string(var_699);
    }
}

pub fn serialize_structure_describe_image_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageVersionInput,
) {
    if let Some(var_700) = &input.image_name {
        object.key("ImageName").string(var_700);
    }
    if let Some(var_701) = &input.version {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_701).into()),
        );
    }
}

pub fn serialize_structure_describe_labeling_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLabelingJobInput,
) {
    if let Some(var_702) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_702);
    }
}

pub fn serialize_structure_describe_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelInput,
) {
    if let Some(var_703) = &input.model_name {
        object.key("ModelName").string(var_703);
    }
}

pub fn serialize_structure_describe_model_bias_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelBiasJobDefinitionInput,
) {
    if let Some(var_704) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_704);
    }
}

pub fn serialize_structure_describe_model_explainability_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelExplainabilityJobDefinitionInput,
) {
    if let Some(var_705) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_705);
    }
}

pub fn serialize_structure_describe_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelPackageInput,
) {
    if let Some(var_706) = &input.model_package_name {
        object.key("ModelPackageName").string(var_706);
    }
}

pub fn serialize_structure_describe_model_package_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelPackageGroupInput,
) {
    if let Some(var_707) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_707);
    }
}

pub fn serialize_structure_describe_model_quality_job_definition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeModelQualityJobDefinitionInput,
) {
    if let Some(var_708) = &input.job_definition_name {
        object.key("JobDefinitionName").string(var_708);
    }
}

pub fn serialize_structure_describe_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMonitoringScheduleInput,
) {
    if let Some(var_709) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_709);
    }
}

pub fn serialize_structure_describe_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookInstanceInput,
) {
    if let Some(var_710) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_710);
    }
}

pub fn serialize_structure_describe_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_711) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_711);
    }
}

pub fn serialize_structure_describe_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineInput,
) {
    if let Some(var_712) = &input.pipeline_name {
        object.key("PipelineName").string(var_712);
    }
}

pub fn serialize_structure_describe_pipeline_definition_for_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineDefinitionForExecutionInput,
) {
    if let Some(var_713) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_713);
    }
}

pub fn serialize_structure_describe_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePipelineExecutionInput,
) {
    if let Some(var_714) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_714);
    }
}

pub fn serialize_structure_describe_processing_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProcessingJobInput,
) {
    if let Some(var_715) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_715);
    }
}

pub fn serialize_structure_describe_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProjectInput,
) {
    if let Some(var_716) = &input.project_name {
        object.key("ProjectName").string(var_716);
    }
}

pub fn serialize_structure_describe_subscribed_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSubscribedWorkteamInput,
) {
    if let Some(var_717) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_717);
    }
}

pub fn serialize_structure_describe_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrainingJobInput,
) {
    if let Some(var_718) = &input.training_job_name {
        object.key("TrainingJobName").string(var_718);
    }
}

pub fn serialize_structure_describe_transform_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTransformJobInput,
) {
    if let Some(var_719) = &input.transform_job_name {
        object.key("TransformJobName").string(var_719);
    }
}

pub fn serialize_structure_describe_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrialInput,
) {
    if let Some(var_720) = &input.trial_name {
        object.key("TrialName").string(var_720);
    }
}

pub fn serialize_structure_describe_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrialComponentInput,
) {
    if let Some(var_721) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_721);
    }
}

pub fn serialize_structure_describe_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserProfileInput,
) {
    if let Some(var_722) = &input.domain_id {
        object.key("DomainId").string(var_722);
    }
    if let Some(var_723) = &input.user_profile_name {
        object.key("UserProfileName").string(var_723);
    }
}

pub fn serialize_structure_describe_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkforceInput,
) {
    if let Some(var_724) = &input.workforce_name {
        object.key("WorkforceName").string(var_724);
    }
}

pub fn serialize_structure_describe_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkteamInput,
) {
    if let Some(var_725) = &input.workteam_name {
        object.key("WorkteamName").string(var_725);
    }
}

pub fn serialize_structure_disassociate_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateTrialComponentInput,
) {
    if let Some(var_726) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_726);
    }
    if let Some(var_727) = &input.trial_name {
        object.key("TrialName").string(var_727);
    }
}

pub fn serialize_structure_get_device_fleet_report_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDeviceFleetReportInput,
) {
    if let Some(var_728) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_728);
    }
}

pub fn serialize_structure_get_model_package_group_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetModelPackageGroupPolicyInput,
) {
    if let Some(var_729) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_729);
    }
}

pub fn serialize_structure_get_search_suggestions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSearchSuggestionsInput,
) {
    if let Some(var_730) = &input.resource {
        object.key("Resource").string(var_730.as_str());
    }
    if let Some(var_731) = &input.suggestion_query {
        let mut object_732 = object.key("SuggestionQuery").start_object();
        crate::json_ser::serialize_structure_suggestion_query(&mut object_732, var_731);
        object_732.finish();
    }
}

pub fn serialize_structure_list_actions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListActionsInput,
) {
    if let Some(var_733) = &input.source_uri {
        object.key("SourceUri").string(var_733);
    }
    if let Some(var_734) = &input.action_type {
        object.key("ActionType").string(var_734);
    }
    if let Some(var_735) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_735, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_736) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_736, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_737) = &input.sort_by {
        object.key("SortBy").string(var_737.as_str());
    }
    if let Some(var_738) = &input.sort_order {
        object.key("SortOrder").string(var_738.as_str());
    }
    if let Some(var_739) = &input.next_token {
        object.key("NextToken").string(var_739);
    }
    if let Some(var_740) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_740).into()),
        );
    }
}

pub fn serialize_structure_list_algorithms_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAlgorithmsInput,
) {
    if let Some(var_741) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_741, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_742) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_742, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_743) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_743).into()),
        );
    }
    if let Some(var_744) = &input.name_contains {
        object.key("NameContains").string(var_744);
    }
    if let Some(var_745) = &input.next_token {
        object.key("NextToken").string(var_745);
    }
    if let Some(var_746) = &input.sort_by {
        object.key("SortBy").string(var_746.as_str());
    }
    if let Some(var_747) = &input.sort_order {
        object.key("SortOrder").string(var_747.as_str());
    }
}

pub fn serialize_structure_list_app_image_configs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAppImageConfigsInput,
) {
    if let Some(var_748) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_748).into()),
        );
    }
    if let Some(var_749) = &input.next_token {
        object.key("NextToken").string(var_749);
    }
    if let Some(var_750) = &input.name_contains {
        object.key("NameContains").string(var_750);
    }
    if let Some(var_751) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_751, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_752) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_752, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_753) = &input.modified_time_before {
        object
            .key("ModifiedTimeBefore")
            .instant(var_753, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_754) = &input.modified_time_after {
        object
            .key("ModifiedTimeAfter")
            .instant(var_754, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_755) = &input.sort_by {
        object.key("SortBy").string(var_755.as_str());
    }
    if let Some(var_756) = &input.sort_order {
        object.key("SortOrder").string(var_756.as_str());
    }
}

pub fn serialize_structure_list_apps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAppsInput,
) {
    if let Some(var_757) = &input.next_token {
        object.key("NextToken").string(var_757);
    }
    if let Some(var_758) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_758).into()),
        );
    }
    if let Some(var_759) = &input.sort_order {
        object.key("SortOrder").string(var_759.as_str());
    }
    if let Some(var_760) = &input.sort_by {
        object.key("SortBy").string(var_760.as_str());
    }
    if let Some(var_761) = &input.domain_id_equals {
        object.key("DomainIdEquals").string(var_761);
    }
    if let Some(var_762) = &input.user_profile_name_equals {
        object.key("UserProfileNameEquals").string(var_762);
    }
}

pub fn serialize_structure_list_artifacts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListArtifactsInput,
) {
    if let Some(var_763) = &input.source_uri {
        object.key("SourceUri").string(var_763);
    }
    if let Some(var_764) = &input.artifact_type {
        object.key("ArtifactType").string(var_764);
    }
    if let Some(var_765) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_765, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_766) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_766, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_767) = &input.sort_by {
        object.key("SortBy").string(var_767.as_str());
    }
    if let Some(var_768) = &input.sort_order {
        object.key("SortOrder").string(var_768.as_str());
    }
    if let Some(var_769) = &input.next_token {
        object.key("NextToken").string(var_769);
    }
    if let Some(var_770) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_770).into()),
        );
    }
}

pub fn serialize_structure_list_associations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociationsInput,
) {
    if let Some(var_771) = &input.source_arn {
        object.key("SourceArn").string(var_771);
    }
    if let Some(var_772) = &input.destination_arn {
        object.key("DestinationArn").string(var_772);
    }
    if let Some(var_773) = &input.source_type {
        object.key("SourceType").string(var_773);
    }
    if let Some(var_774) = &input.destination_type {
        object.key("DestinationType").string(var_774);
    }
    if let Some(var_775) = &input.association_type {
        object.key("AssociationType").string(var_775.as_str());
    }
    if let Some(var_776) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_776, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_777) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_777, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_778) = &input.sort_by {
        object.key("SortBy").string(var_778.as_str());
    }
    if let Some(var_779) = &input.sort_order {
        object.key("SortOrder").string(var_779.as_str());
    }
    if let Some(var_780) = &input.next_token {
        object.key("NextToken").string(var_780);
    }
    if let Some(var_781) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_781).into()),
        );
    }
}

pub fn serialize_structure_list_auto_ml_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAutoMLJobsInput,
) {
    if let Some(var_782) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_782, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_783) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_783, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_784) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_784, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_785) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_785, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_786) = &input.name_contains {
        object.key("NameContains").string(var_786);
    }
    if let Some(var_787) = &input.status_equals {
        object.key("StatusEquals").string(var_787.as_str());
    }
    if let Some(var_788) = &input.sort_order {
        object.key("SortOrder").string(var_788.as_str());
    }
    if let Some(var_789) = &input.sort_by {
        object.key("SortBy").string(var_789.as_str());
    }
    if let Some(var_790) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_790).into()),
        );
    }
    if let Some(var_791) = &input.next_token {
        object.key("NextToken").string(var_791);
    }
}

pub fn serialize_structure_list_candidates_for_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCandidatesForAutoMLJobInput,
) {
    if let Some(var_792) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_792);
    }
    if let Some(var_793) = &input.status_equals {
        object.key("StatusEquals").string(var_793.as_str());
    }
    if let Some(var_794) = &input.candidate_name_equals {
        object.key("CandidateNameEquals").string(var_794);
    }
    if let Some(var_795) = &input.sort_order {
        object.key("SortOrder").string(var_795.as_str());
    }
    if let Some(var_796) = &input.sort_by {
        object.key("SortBy").string(var_796.as_str());
    }
    if let Some(var_797) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_797).into()),
        );
    }
    if let Some(var_798) = &input.next_token {
        object.key("NextToken").string(var_798);
    }
}

pub fn serialize_structure_list_code_repositories_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCodeRepositoriesInput,
) {
    if let Some(var_799) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_799, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_800) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_800, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_801) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_801, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_802) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_802, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_803) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_803).into()),
        );
    }
    if let Some(var_804) = &input.name_contains {
        object.key("NameContains").string(var_804);
    }
    if let Some(var_805) = &input.next_token {
        object.key("NextToken").string(var_805);
    }
    if let Some(var_806) = &input.sort_by {
        object.key("SortBy").string(var_806.as_str());
    }
    if let Some(var_807) = &input.sort_order {
        object.key("SortOrder").string(var_807.as_str());
    }
}

pub fn serialize_structure_list_compilation_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCompilationJobsInput,
) {
    if let Some(var_808) = &input.next_token {
        object.key("NextToken").string(var_808);
    }
    if let Some(var_809) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_809).into()),
        );
    }
    if let Some(var_810) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_810, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_811) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_811, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_812) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_812, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_813) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_813, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_814) = &input.name_contains {
        object.key("NameContains").string(var_814);
    }
    if let Some(var_815) = &input.status_equals {
        object.key("StatusEquals").string(var_815.as_str());
    }
    if let Some(var_816) = &input.sort_by {
        object.key("SortBy").string(var_816.as_str());
    }
    if let Some(var_817) = &input.sort_order {
        object.key("SortOrder").string(var_817.as_str());
    }
}

pub fn serialize_structure_list_contexts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListContextsInput,
) {
    if let Some(var_818) = &input.source_uri {
        object.key("SourceUri").string(var_818);
    }
    if let Some(var_819) = &input.context_type {
        object.key("ContextType").string(var_819);
    }
    if let Some(var_820) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_820, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_821) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_821, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_822) = &input.sort_by {
        object.key("SortBy").string(var_822.as_str());
    }
    if let Some(var_823) = &input.sort_order {
        object.key("SortOrder").string(var_823.as_str());
    }
    if let Some(var_824) = &input.next_token {
        object.key("NextToken").string(var_824);
    }
    if let Some(var_825) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_825).into()),
        );
    }
}

pub fn serialize_structure_list_data_quality_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataQualityJobDefinitionsInput,
) {
    if let Some(var_826) = &input.endpoint_name {
        object.key("EndpointName").string(var_826);
    }
    if let Some(var_827) = &input.sort_by {
        object.key("SortBy").string(var_827.as_str());
    }
    if let Some(var_828) = &input.sort_order {
        object.key("SortOrder").string(var_828.as_str());
    }
    if let Some(var_829) = &input.next_token {
        object.key("NextToken").string(var_829);
    }
    if let Some(var_830) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_830).into()),
        );
    }
    if let Some(var_831) = &input.name_contains {
        object.key("NameContains").string(var_831);
    }
    if let Some(var_832) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_832, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_833) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_833, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_device_fleets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDeviceFleetsInput,
) {
    if let Some(var_834) = &input.next_token {
        object.key("NextToken").string(var_834);
    }
    if let Some(var_835) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_835).into()),
        );
    }
    if let Some(var_836) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_836, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_837) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_837, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_838) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_838, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_839) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_839, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_840) = &input.name_contains {
        object.key("NameContains").string(var_840);
    }
    if let Some(var_841) = &input.sort_by {
        object.key("SortBy").string(var_841.as_str());
    }
    if let Some(var_842) = &input.sort_order {
        object.key("SortOrder").string(var_842.as_str());
    }
}

pub fn serialize_structure_list_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDevicesInput,
) {
    if let Some(var_843) = &input.next_token {
        object.key("NextToken").string(var_843);
    }
    if let Some(var_844) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_844).into()),
        );
    }
    if let Some(var_845) = &input.latest_heartbeat_after {
        object
            .key("LatestHeartbeatAfter")
            .instant(var_845, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_846) = &input.model_name {
        object.key("ModelName").string(var_846);
    }
    if let Some(var_847) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_847);
    }
}

pub fn serialize_structure_list_domains_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDomainsInput,
) {
    if let Some(var_848) = &input.next_token {
        object.key("NextToken").string(var_848);
    }
    if let Some(var_849) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_849).into()),
        );
    }
}

pub fn serialize_structure_list_edge_packaging_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEdgePackagingJobsInput,
) {
    if let Some(var_850) = &input.next_token {
        object.key("NextToken").string(var_850);
    }
    if let Some(var_851) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_851).into()),
        );
    }
    if let Some(var_852) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_852, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_853) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_853, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_854) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_854, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_855) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_855, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_856) = &input.name_contains {
        object.key("NameContains").string(var_856);
    }
    if let Some(var_857) = &input.model_name_contains {
        object.key("ModelNameContains").string(var_857);
    }
    if let Some(var_858) = &input.status_equals {
        object.key("StatusEquals").string(var_858.as_str());
    }
    if let Some(var_859) = &input.sort_by {
        object.key("SortBy").string(var_859.as_str());
    }
    if let Some(var_860) = &input.sort_order {
        object.key("SortOrder").string(var_860.as_str());
    }
}

pub fn serialize_structure_list_endpoint_configs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointConfigsInput,
) {
    if let Some(var_861) = &input.sort_by {
        object.key("SortBy").string(var_861.as_str());
    }
    if let Some(var_862) = &input.sort_order {
        object.key("SortOrder").string(var_862.as_str());
    }
    if let Some(var_863) = &input.next_token {
        object.key("NextToken").string(var_863);
    }
    if let Some(var_864) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_864).into()),
        );
    }
    if let Some(var_865) = &input.name_contains {
        object.key("NameContains").string(var_865);
    }
    if let Some(var_866) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_866, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_867) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_867, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_endpoints_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEndpointsInput,
) {
    if let Some(var_868) = &input.sort_by {
        object.key("SortBy").string(var_868.as_str());
    }
    if let Some(var_869) = &input.sort_order {
        object.key("SortOrder").string(var_869.as_str());
    }
    if let Some(var_870) = &input.next_token {
        object.key("NextToken").string(var_870);
    }
    if let Some(var_871) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_871).into()),
        );
    }
    if let Some(var_872) = &input.name_contains {
        object.key("NameContains").string(var_872);
    }
    if let Some(var_873) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_873, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_874) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_874, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_875) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_875, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_876) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_876, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_877) = &input.status_equals {
        object.key("StatusEquals").string(var_877.as_str());
    }
}

pub fn serialize_structure_list_experiments_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperimentsInput,
) {
    if let Some(var_878) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_878, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_879) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_879, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_880) = &input.sort_by {
        object.key("SortBy").string(var_880.as_str());
    }
    if let Some(var_881) = &input.sort_order {
        object.key("SortOrder").string(var_881.as_str());
    }
    if let Some(var_882) = &input.next_token {
        object.key("NextToken").string(var_882);
    }
    if let Some(var_883) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_883).into()),
        );
    }
}

pub fn serialize_structure_list_feature_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFeatureGroupsInput,
) {
    if let Some(var_884) = &input.name_contains {
        object.key("NameContains").string(var_884);
    }
    if let Some(var_885) = &input.feature_group_status_equals {
        object
            .key("FeatureGroupStatusEquals")
            .string(var_885.as_str());
    }
    if let Some(var_886) = &input.offline_store_status_equals {
        object
            .key("OfflineStoreStatusEquals")
            .string(var_886.as_str());
    }
    if let Some(var_887) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_887, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_888) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_888, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_889) = &input.sort_order {
        object.key("SortOrder").string(var_889.as_str());
    }
    if let Some(var_890) = &input.sort_by {
        object.key("SortBy").string(var_890.as_str());
    }
    if let Some(var_891) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_891).into()),
        );
    }
    if let Some(var_892) = &input.next_token {
        object.key("NextToken").string(var_892);
    }
}

pub fn serialize_structure_list_flow_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFlowDefinitionsInput,
) {
    if let Some(var_893) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_893, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_894) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_894, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_895) = &input.sort_order {
        object.key("SortOrder").string(var_895.as_str());
    }
    if let Some(var_896) = &input.next_token {
        object.key("NextToken").string(var_896);
    }
    if let Some(var_897) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_897).into()),
        );
    }
}

pub fn serialize_structure_list_human_task_uis_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListHumanTaskUisInput,
) {
    if let Some(var_898) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_898, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_899) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_899, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_900) = &input.sort_order {
        object.key("SortOrder").string(var_900.as_str());
    }
    if let Some(var_901) = &input.next_token {
        object.key("NextToken").string(var_901);
    }
    if let Some(var_902) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_902).into()),
        );
    }
}

pub fn serialize_structure_list_hyper_parameter_tuning_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListHyperParameterTuningJobsInput,
) {
    if let Some(var_903) = &input.next_token {
        object.key("NextToken").string(var_903);
    }
    if let Some(var_904) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_904).into()),
        );
    }
    if let Some(var_905) = &input.sort_by {
        object.key("SortBy").string(var_905.as_str());
    }
    if let Some(var_906) = &input.sort_order {
        object.key("SortOrder").string(var_906.as_str());
    }
    if let Some(var_907) = &input.name_contains {
        object.key("NameContains").string(var_907);
    }
    if let Some(var_908) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_908, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_909) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_909, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_910) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_910, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_911) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_911, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_912) = &input.status_equals {
        object.key("StatusEquals").string(var_912.as_str());
    }
}

pub fn serialize_structure_list_images_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImagesInput,
) {
    if let Some(var_913) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_913, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_914) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_914, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_915) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_915, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_916) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_916, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_917) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_917).into()),
        );
    }
    if let Some(var_918) = &input.name_contains {
        object.key("NameContains").string(var_918);
    }
    if let Some(var_919) = &input.next_token {
        object.key("NextToken").string(var_919);
    }
    if let Some(var_920) = &input.sort_by {
        object.key("SortBy").string(var_920.as_str());
    }
    if let Some(var_921) = &input.sort_order {
        object.key("SortOrder").string(var_921.as_str());
    }
}

pub fn serialize_structure_list_image_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImageVersionsInput,
) {
    if let Some(var_922) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_922, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_923) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_923, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_924) = &input.image_name {
        object.key("ImageName").string(var_924);
    }
    if let Some(var_925) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_925, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_926) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_926, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_927) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_927).into()),
        );
    }
    if let Some(var_928) = &input.next_token {
        object.key("NextToken").string(var_928);
    }
    if let Some(var_929) = &input.sort_by {
        object.key("SortBy").string(var_929.as_str());
    }
    if let Some(var_930) = &input.sort_order {
        object.key("SortOrder").string(var_930.as_str());
    }
}

pub fn serialize_structure_list_labeling_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLabelingJobsInput,
) {
    if let Some(var_931) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_931, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_932) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_932, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_933) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_933, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_934) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_934, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_935) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_935).into()),
        );
    }
    if let Some(var_936) = &input.next_token {
        object.key("NextToken").string(var_936);
    }
    if let Some(var_937) = &input.name_contains {
        object.key("NameContains").string(var_937);
    }
    if let Some(var_938) = &input.sort_by {
        object.key("SortBy").string(var_938.as_str());
    }
    if let Some(var_939) = &input.sort_order {
        object.key("SortOrder").string(var_939.as_str());
    }
    if let Some(var_940) = &input.status_equals {
        object.key("StatusEquals").string(var_940.as_str());
    }
}

pub fn serialize_structure_list_labeling_jobs_for_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLabelingJobsForWorkteamInput,
) {
    if let Some(var_941) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_941);
    }
    if let Some(var_942) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_942).into()),
        );
    }
    if let Some(var_943) = &input.next_token {
        object.key("NextToken").string(var_943);
    }
    if let Some(var_944) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_944, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_945) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_945, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_946) = &input.job_reference_code_contains {
        object.key("JobReferenceCodeContains").string(var_946);
    }
    if let Some(var_947) = &input.sort_by {
        object.key("SortBy").string(var_947.as_str());
    }
    if let Some(var_948) = &input.sort_order {
        object.key("SortOrder").string(var_948.as_str());
    }
}

pub fn serialize_structure_list_model_bias_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelBiasJobDefinitionsInput,
) {
    if let Some(var_949) = &input.endpoint_name {
        object.key("EndpointName").string(var_949);
    }
    if let Some(var_950) = &input.sort_by {
        object.key("SortBy").string(var_950.as_str());
    }
    if let Some(var_951) = &input.sort_order {
        object.key("SortOrder").string(var_951.as_str());
    }
    if let Some(var_952) = &input.next_token {
        object.key("NextToken").string(var_952);
    }
    if let Some(var_953) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_953).into()),
        );
    }
    if let Some(var_954) = &input.name_contains {
        object.key("NameContains").string(var_954);
    }
    if let Some(var_955) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_955, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_956) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_956, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_model_explainability_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelExplainabilityJobDefinitionsInput,
) {
    if let Some(var_957) = &input.endpoint_name {
        object.key("EndpointName").string(var_957);
    }
    if let Some(var_958) = &input.sort_by {
        object.key("SortBy").string(var_958.as_str());
    }
    if let Some(var_959) = &input.sort_order {
        object.key("SortOrder").string(var_959.as_str());
    }
    if let Some(var_960) = &input.next_token {
        object.key("NextToken").string(var_960);
    }
    if let Some(var_961) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_961).into()),
        );
    }
    if let Some(var_962) = &input.name_contains {
        object.key("NameContains").string(var_962);
    }
    if let Some(var_963) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_963, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_964) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_964, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_model_package_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelPackageGroupsInput,
) {
    if let Some(var_965) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_965, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_966) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_966, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_967) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_967).into()),
        );
    }
    if let Some(var_968) = &input.name_contains {
        object.key("NameContains").string(var_968);
    }
    if let Some(var_969) = &input.next_token {
        object.key("NextToken").string(var_969);
    }
    if let Some(var_970) = &input.sort_by {
        object.key("SortBy").string(var_970.as_str());
    }
    if let Some(var_971) = &input.sort_order {
        object.key("SortOrder").string(var_971.as_str());
    }
}

pub fn serialize_structure_list_model_packages_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelPackagesInput,
) {
    if let Some(var_972) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_972, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_973) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_973, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_974) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_974).into()),
        );
    }
    if let Some(var_975) = &input.name_contains {
        object.key("NameContains").string(var_975);
    }
    if let Some(var_976) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_976.as_str());
    }
    if let Some(var_977) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_977);
    }
    if let Some(var_978) = &input.model_package_type {
        object.key("ModelPackageType").string(var_978.as_str());
    }
    if let Some(var_979) = &input.next_token {
        object.key("NextToken").string(var_979);
    }
    if let Some(var_980) = &input.sort_by {
        object.key("SortBy").string(var_980.as_str());
    }
    if let Some(var_981) = &input.sort_order {
        object.key("SortOrder").string(var_981.as_str());
    }
}

pub fn serialize_structure_list_model_quality_job_definitions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelQualityJobDefinitionsInput,
) {
    if let Some(var_982) = &input.endpoint_name {
        object.key("EndpointName").string(var_982);
    }
    if let Some(var_983) = &input.sort_by {
        object.key("SortBy").string(var_983.as_str());
    }
    if let Some(var_984) = &input.sort_order {
        object.key("SortOrder").string(var_984.as_str());
    }
    if let Some(var_985) = &input.next_token {
        object.key("NextToken").string(var_985);
    }
    if let Some(var_986) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_986).into()),
        );
    }
    if let Some(var_987) = &input.name_contains {
        object.key("NameContains").string(var_987);
    }
    if let Some(var_988) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_988, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_989) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_989, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_models_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListModelsInput,
) {
    if let Some(var_990) = &input.sort_by {
        object.key("SortBy").string(var_990.as_str());
    }
    if let Some(var_991) = &input.sort_order {
        object.key("SortOrder").string(var_991.as_str());
    }
    if let Some(var_992) = &input.next_token {
        object.key("NextToken").string(var_992);
    }
    if let Some(var_993) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_993).into()),
        );
    }
    if let Some(var_994) = &input.name_contains {
        object.key("NameContains").string(var_994);
    }
    if let Some(var_995) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_995, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_996) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_996, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_monitoring_executions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMonitoringExecutionsInput,
) {
    if let Some(var_997) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_997);
    }
    if let Some(var_998) = &input.endpoint_name {
        object.key("EndpointName").string(var_998);
    }
    if let Some(var_999) = &input.sort_by {
        object.key("SortBy").string(var_999.as_str());
    }
    if let Some(var_1000) = &input.sort_order {
        object.key("SortOrder").string(var_1000.as_str());
    }
    if let Some(var_1001) = &input.next_token {
        object.key("NextToken").string(var_1001);
    }
    if let Some(var_1002) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1002).into()),
        );
    }
    if let Some(var_1003) = &input.scheduled_time_before {
        object
            .key("ScheduledTimeBefore")
            .instant(var_1003, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1004) = &input.scheduled_time_after {
        object
            .key("ScheduledTimeAfter")
            .instant(var_1004, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1005) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1005, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1006) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1006, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1007) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1007, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1008) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1008, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1009) = &input.status_equals {
        object.key("StatusEquals").string(var_1009.as_str());
    }
    if let Some(var_1010) = &input.monitoring_job_definition_name {
        object.key("MonitoringJobDefinitionName").string(var_1010);
    }
    if let Some(var_1011) = &input.monitoring_type_equals {
        object.key("MonitoringTypeEquals").string(var_1011.as_str());
    }
}

pub fn serialize_structure_list_monitoring_schedules_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMonitoringSchedulesInput,
) {
    if let Some(var_1012) = &input.endpoint_name {
        object.key("EndpointName").string(var_1012);
    }
    if let Some(var_1013) = &input.sort_by {
        object.key("SortBy").string(var_1013.as_str());
    }
    if let Some(var_1014) = &input.sort_order {
        object.key("SortOrder").string(var_1014.as_str());
    }
    if let Some(var_1015) = &input.next_token {
        object.key("NextToken").string(var_1015);
    }
    if let Some(var_1016) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1016).into()),
        );
    }
    if let Some(var_1017) = &input.name_contains {
        object.key("NameContains").string(var_1017);
    }
    if let Some(var_1018) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1018, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1019) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1019, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1020) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1020, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1021) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1021, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1022) = &input.status_equals {
        object.key("StatusEquals").string(var_1022.as_str());
    }
    if let Some(var_1023) = &input.monitoring_job_definition_name {
        object.key("MonitoringJobDefinitionName").string(var_1023);
    }
    if let Some(var_1024) = &input.monitoring_type_equals {
        object.key("MonitoringTypeEquals").string(var_1024.as_str());
    }
}

pub fn serialize_structure_list_notebook_instance_lifecycle_configs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookInstanceLifecycleConfigsInput,
) {
    if let Some(var_1025) = &input.next_token {
        object.key("NextToken").string(var_1025);
    }
    if let Some(var_1026) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1026).into()),
        );
    }
    if let Some(var_1027) = &input.sort_by {
        object.key("SortBy").string(var_1027.as_str());
    }
    if let Some(var_1028) = &input.sort_order {
        object.key("SortOrder").string(var_1028.as_str());
    }
    if let Some(var_1029) = &input.name_contains {
        object.key("NameContains").string(var_1029);
    }
    if let Some(var_1030) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1030, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1031) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1031, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1032) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1032, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1033) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1033, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_list_notebook_instances_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookInstancesInput,
) {
    if let Some(var_1034) = &input.next_token {
        object.key("NextToken").string(var_1034);
    }
    if let Some(var_1035) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1035).into()),
        );
    }
    if let Some(var_1036) = &input.sort_by {
        object.key("SortBy").string(var_1036.as_str());
    }
    if let Some(var_1037) = &input.sort_order {
        object.key("SortOrder").string(var_1037.as_str());
    }
    if let Some(var_1038) = &input.name_contains {
        object.key("NameContains").string(var_1038);
    }
    if let Some(var_1039) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1039, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1040) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1040, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1041) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1041, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1042) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1042, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1043) = &input.status_equals {
        object.key("StatusEquals").string(var_1043.as_str());
    }
    if let Some(var_1044) = &input.notebook_instance_lifecycle_config_name_contains {
        object
            .key("NotebookInstanceLifecycleConfigNameContains")
            .string(var_1044);
    }
    if let Some(var_1045) = &input.default_code_repository_contains {
        object.key("DefaultCodeRepositoryContains").string(var_1045);
    }
    if let Some(var_1046) = &input.additional_code_repository_equals {
        object
            .key("AdditionalCodeRepositoryEquals")
            .string(var_1046);
    }
}

pub fn serialize_structure_list_pipeline_executions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineExecutionsInput,
) {
    if let Some(var_1047) = &input.pipeline_name {
        object.key("PipelineName").string(var_1047);
    }
    if let Some(var_1048) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1048, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1049) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1049, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1050) = &input.sort_by {
        object.key("SortBy").string(var_1050.as_str());
    }
    if let Some(var_1051) = &input.sort_order {
        object.key("SortOrder").string(var_1051.as_str());
    }
    if let Some(var_1052) = &input.next_token {
        object.key("NextToken").string(var_1052);
    }
    if let Some(var_1053) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1053).into()),
        );
    }
}

pub fn serialize_structure_list_pipeline_execution_steps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineExecutionStepsInput,
) {
    if let Some(var_1054) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1054);
    }
    if let Some(var_1055) = &input.next_token {
        object.key("NextToken").string(var_1055);
    }
    if let Some(var_1056) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1056).into()),
        );
    }
    if let Some(var_1057) = &input.sort_order {
        object.key("SortOrder").string(var_1057.as_str());
    }
}

pub fn serialize_structure_list_pipeline_parameters_for_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelineParametersForExecutionInput,
) {
    if let Some(var_1058) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1058);
    }
    if let Some(var_1059) = &input.next_token {
        object.key("NextToken").string(var_1059);
    }
    if let Some(var_1060) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1060).into()),
        );
    }
}

pub fn serialize_structure_list_pipelines_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPipelinesInput,
) {
    if let Some(var_1061) = &input.pipeline_name_prefix {
        object.key("PipelineNamePrefix").string(var_1061);
    }
    if let Some(var_1062) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1062, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1063) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1063, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1064) = &input.sort_by {
        object.key("SortBy").string(var_1064.as_str());
    }
    if let Some(var_1065) = &input.sort_order {
        object.key("SortOrder").string(var_1065.as_str());
    }
    if let Some(var_1066) = &input.next_token {
        object.key("NextToken").string(var_1066);
    }
    if let Some(var_1067) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1067).into()),
        );
    }
}

pub fn serialize_structure_list_processing_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProcessingJobsInput,
) {
    if let Some(var_1068) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1068, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1069) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1069, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1070) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1070, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1071) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1071, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1072) = &input.name_contains {
        object.key("NameContains").string(var_1072);
    }
    if let Some(var_1073) = &input.status_equals {
        object.key("StatusEquals").string(var_1073.as_str());
    }
    if let Some(var_1074) = &input.sort_by {
        object.key("SortBy").string(var_1074.as_str());
    }
    if let Some(var_1075) = &input.sort_order {
        object.key("SortOrder").string(var_1075.as_str());
    }
    if let Some(var_1076) = &input.next_token {
        object.key("NextToken").string(var_1076);
    }
    if let Some(var_1077) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1077).into()),
        );
    }
}

pub fn serialize_structure_list_projects_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProjectsInput,
) {
    if let Some(var_1078) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1078, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1079) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1079, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1080) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1080).into()),
        );
    }
    if let Some(var_1081) = &input.name_contains {
        object.key("NameContains").string(var_1081);
    }
    if let Some(var_1082) = &input.next_token {
        object.key("NextToken").string(var_1082);
    }
    if let Some(var_1083) = &input.sort_by {
        object.key("SortBy").string(var_1083.as_str());
    }
    if let Some(var_1084) = &input.sort_order {
        object.key("SortOrder").string(var_1084.as_str());
    }
}

pub fn serialize_structure_list_subscribed_workteams_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSubscribedWorkteamsInput,
) {
    if let Some(var_1085) = &input.name_contains {
        object.key("NameContains").string(var_1085);
    }
    if let Some(var_1086) = &input.next_token {
        object.key("NextToken").string(var_1086);
    }
    if let Some(var_1087) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1087).into()),
        );
    }
}

pub fn serialize_structure_list_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsInput,
) {
    if let Some(var_1088) = &input.resource_arn {
        object.key("ResourceArn").string(var_1088);
    }
    if let Some(var_1089) = &input.next_token {
        object.key("NextToken").string(var_1089);
    }
    if let Some(var_1090) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1090).into()),
        );
    }
}

pub fn serialize_structure_list_training_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrainingJobsInput,
) {
    if let Some(var_1091) = &input.next_token {
        object.key("NextToken").string(var_1091);
    }
    if let Some(var_1092) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1092).into()),
        );
    }
    if let Some(var_1093) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1093, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1094) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1094, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1095) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1095, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1096) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1096, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1097) = &input.name_contains {
        object.key("NameContains").string(var_1097);
    }
    if let Some(var_1098) = &input.status_equals {
        object.key("StatusEquals").string(var_1098.as_str());
    }
    if let Some(var_1099) = &input.sort_by {
        object.key("SortBy").string(var_1099.as_str());
    }
    if let Some(var_1100) = &input.sort_order {
        object.key("SortOrder").string(var_1100.as_str());
    }
}

pub fn serialize_structure_list_training_jobs_for_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrainingJobsForHyperParameterTuningJobInput,
) {
    if let Some(var_1101) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_1101);
    }
    if let Some(var_1102) = &input.next_token {
        object.key("NextToken").string(var_1102);
    }
    if let Some(var_1103) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1103).into()),
        );
    }
    if let Some(var_1104) = &input.status_equals {
        object.key("StatusEquals").string(var_1104.as_str());
    }
    if let Some(var_1105) = &input.sort_by {
        object.key("SortBy").string(var_1105.as_str());
    }
    if let Some(var_1106) = &input.sort_order {
        object.key("SortOrder").string(var_1106.as_str());
    }
}

pub fn serialize_structure_list_transform_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTransformJobsInput,
) {
    if let Some(var_1107) = &input.creation_time_after {
        object
            .key("CreationTimeAfter")
            .instant(var_1107, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1108) = &input.creation_time_before {
        object
            .key("CreationTimeBefore")
            .instant(var_1108, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1109) = &input.last_modified_time_after {
        object
            .key("LastModifiedTimeAfter")
            .instant(var_1109, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1110) = &input.last_modified_time_before {
        object
            .key("LastModifiedTimeBefore")
            .instant(var_1110, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1111) = &input.name_contains {
        object.key("NameContains").string(var_1111);
    }
    if let Some(var_1112) = &input.status_equals {
        object.key("StatusEquals").string(var_1112.as_str());
    }
    if let Some(var_1113) = &input.sort_by {
        object.key("SortBy").string(var_1113.as_str());
    }
    if let Some(var_1114) = &input.sort_order {
        object.key("SortOrder").string(var_1114.as_str());
    }
    if let Some(var_1115) = &input.next_token {
        object.key("NextToken").string(var_1115);
    }
    if let Some(var_1116) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1116).into()),
        );
    }
}

pub fn serialize_structure_list_trial_components_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrialComponentsInput,
) {
    if let Some(var_1117) = &input.experiment_name {
        object.key("ExperimentName").string(var_1117);
    }
    if let Some(var_1118) = &input.trial_name {
        object.key("TrialName").string(var_1118);
    }
    if let Some(var_1119) = &input.source_arn {
        object.key("SourceArn").string(var_1119);
    }
    if let Some(var_1120) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1120, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1121) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1121, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1122) = &input.sort_by {
        object.key("SortBy").string(var_1122.as_str());
    }
    if let Some(var_1123) = &input.sort_order {
        object.key("SortOrder").string(var_1123.as_str());
    }
    if let Some(var_1124) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1124).into()),
        );
    }
    if let Some(var_1125) = &input.next_token {
        object.key("NextToken").string(var_1125);
    }
}

pub fn serialize_structure_list_trials_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTrialsInput,
) {
    if let Some(var_1126) = &input.experiment_name {
        object.key("ExperimentName").string(var_1126);
    }
    if let Some(var_1127) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1127);
    }
    if let Some(var_1128) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_1128, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1129) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_1129, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1130) = &input.sort_by {
        object.key("SortBy").string(var_1130.as_str());
    }
    if let Some(var_1131) = &input.sort_order {
        object.key("SortOrder").string(var_1131.as_str());
    }
    if let Some(var_1132) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1132).into()),
        );
    }
    if let Some(var_1133) = &input.next_token {
        object.key("NextToken").string(var_1133);
    }
}

pub fn serialize_structure_list_user_profiles_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUserProfilesInput,
) {
    if let Some(var_1134) = &input.next_token {
        object.key("NextToken").string(var_1134);
    }
    if let Some(var_1135) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1135).into()),
        );
    }
    if let Some(var_1136) = &input.sort_order {
        object.key("SortOrder").string(var_1136.as_str());
    }
    if let Some(var_1137) = &input.sort_by {
        object.key("SortBy").string(var_1137.as_str());
    }
    if let Some(var_1138) = &input.domain_id_equals {
        object.key("DomainIdEquals").string(var_1138);
    }
    if let Some(var_1139) = &input.user_profile_name_contains {
        object.key("UserProfileNameContains").string(var_1139);
    }
}

pub fn serialize_structure_list_workforces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkforcesInput,
) {
    if let Some(var_1140) = &input.sort_by {
        object.key("SortBy").string(var_1140.as_str());
    }
    if let Some(var_1141) = &input.sort_order {
        object.key("SortOrder").string(var_1141.as_str());
    }
    if let Some(var_1142) = &input.name_contains {
        object.key("NameContains").string(var_1142);
    }
    if let Some(var_1143) = &input.next_token {
        object.key("NextToken").string(var_1143);
    }
    if let Some(var_1144) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1144).into()),
        );
    }
}

pub fn serialize_structure_list_workteams_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkteamsInput,
) {
    if let Some(var_1145) = &input.sort_by {
        object.key("SortBy").string(var_1145.as_str());
    }
    if let Some(var_1146) = &input.sort_order {
        object.key("SortOrder").string(var_1146.as_str());
    }
    if let Some(var_1147) = &input.name_contains {
        object.key("NameContains").string(var_1147);
    }
    if let Some(var_1148) = &input.next_token {
        object.key("NextToken").string(var_1148);
    }
    if let Some(var_1149) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1149).into()),
        );
    }
}

pub fn serialize_structure_put_model_package_group_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutModelPackageGroupPolicyInput,
) {
    if let Some(var_1150) = &input.model_package_group_name {
        object.key("ModelPackageGroupName").string(var_1150);
    }
    if let Some(var_1151) = &input.resource_policy {
        object.key("ResourcePolicy").string(var_1151);
    }
}

pub fn serialize_structure_register_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterDevicesInput,
) {
    if let Some(var_1152) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1152);
    }
    if let Some(var_1153) = &input.devices {
        let mut array_1154 = object.key("Devices").start_array();
        for item_1155 in var_1153 {
            {
                let mut object_1156 = array_1154.value().start_object();
                crate::json_ser::serialize_structure_device(&mut object_1156, item_1155);
                object_1156.finish();
            }
        }
        array_1154.finish();
    }
    if let Some(var_1157) = &input.tags {
        let mut array_1158 = object.key("Tags").start_array();
        for item_1159 in var_1157 {
            {
                let mut object_1160 = array_1158.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_1160, item_1159);
                object_1160.finish();
            }
        }
        array_1158.finish();
    }
}

pub fn serialize_structure_render_ui_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RenderUiTemplateInput,
) {
    if let Some(var_1161) = &input.ui_template {
        let mut object_1162 = object.key("UiTemplate").start_object();
        crate::json_ser::serialize_structure_ui_template(&mut object_1162, var_1161);
        object_1162.finish();
    }
    if let Some(var_1163) = &input.task {
        let mut object_1164 = object.key("Task").start_object();
        crate::json_ser::serialize_structure_renderable_task(&mut object_1164, var_1163);
        object_1164.finish();
    }
    if let Some(var_1165) = &input.role_arn {
        object.key("RoleArn").string(var_1165);
    }
    if let Some(var_1166) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1166);
    }
}

pub fn serialize_structure_search_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchInput,
) {
    if let Some(var_1167) = &input.resource {
        object.key("Resource").string(var_1167.as_str());
    }
    if let Some(var_1168) = &input.search_expression {
        let mut object_1169 = object.key("SearchExpression").start_object();
        crate::json_ser::serialize_structure_search_expression(&mut object_1169, var_1168);
        object_1169.finish();
    }
    if let Some(var_1170) = &input.sort_by {
        object.key("SortBy").string(var_1170);
    }
    if let Some(var_1171) = &input.sort_order {
        object.key("SortOrder").string(var_1171.as_str());
    }
    if let Some(var_1172) = &input.next_token {
        object.key("NextToken").string(var_1172);
    }
    if let Some(var_1173) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1173).into()),
        );
    }
}

pub fn serialize_structure_start_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMonitoringScheduleInput,
) {
    if let Some(var_1174) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1174);
    }
}

pub fn serialize_structure_start_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartNotebookInstanceInput,
) {
    if let Some(var_1175) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1175);
    }
}

pub fn serialize_structure_start_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartPipelineExecutionInput,
) {
    if let Some(var_1176) = &input.pipeline_name {
        object.key("PipelineName").string(var_1176);
    }
    if let Some(var_1177) = &input.pipeline_execution_display_name {
        object.key("PipelineExecutionDisplayName").string(var_1177);
    }
    if let Some(var_1178) = &input.pipeline_parameters {
        let mut array_1179 = object.key("PipelineParameters").start_array();
        for item_1180 in var_1178 {
            {
                let mut object_1181 = array_1179.value().start_object();
                crate::json_ser::serialize_structure_parameter(&mut object_1181, item_1180);
                object_1181.finish();
            }
        }
        array_1179.finish();
    }
    if let Some(var_1182) = &input.pipeline_execution_description {
        object.key("PipelineExecutionDescription").string(var_1182);
    }
    if let Some(var_1183) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1183);
    }
}

pub fn serialize_structure_stop_auto_ml_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopAutoMLJobInput,
) {
    if let Some(var_1184) = &input.auto_ml_job_name {
        object.key("AutoMLJobName").string(var_1184);
    }
}

pub fn serialize_structure_stop_compilation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCompilationJobInput,
) {
    if let Some(var_1185) = &input.compilation_job_name {
        object.key("CompilationJobName").string(var_1185);
    }
}

pub fn serialize_structure_stop_edge_packaging_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopEdgePackagingJobInput,
) {
    if let Some(var_1186) = &input.edge_packaging_job_name {
        object.key("EdgePackagingJobName").string(var_1186);
    }
}

pub fn serialize_structure_stop_hyper_parameter_tuning_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopHyperParameterTuningJobInput,
) {
    if let Some(var_1187) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_1187);
    }
}

pub fn serialize_structure_stop_labeling_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopLabelingJobInput,
) {
    if let Some(var_1188) = &input.labeling_job_name {
        object.key("LabelingJobName").string(var_1188);
    }
}

pub fn serialize_structure_stop_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopMonitoringScheduleInput,
) {
    if let Some(var_1189) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1189);
    }
}

pub fn serialize_structure_stop_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopNotebookInstanceInput,
) {
    if let Some(var_1190) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1190);
    }
}

pub fn serialize_structure_stop_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopPipelineExecutionInput,
) {
    if let Some(var_1191) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1191);
    }
    if let Some(var_1192) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1192);
    }
}

pub fn serialize_structure_stop_processing_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopProcessingJobInput,
) {
    if let Some(var_1193) = &input.processing_job_name {
        object.key("ProcessingJobName").string(var_1193);
    }
}

pub fn serialize_structure_stop_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTrainingJobInput,
) {
    if let Some(var_1194) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1194);
    }
}

pub fn serialize_structure_stop_transform_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTransformJobInput,
) {
    if let Some(var_1195) = &input.transform_job_name {
        object.key("TransformJobName").string(var_1195);
    }
}

pub fn serialize_structure_update_action_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateActionInput,
) {
    if let Some(var_1196) = &input.action_name {
        object.key("ActionName").string(var_1196);
    }
    if let Some(var_1197) = &input.description {
        object.key("Description").string(var_1197);
    }
    if let Some(var_1198) = &input.status {
        object.key("Status").string(var_1198.as_str());
    }
    if let Some(var_1199) = &input.properties {
        let mut object_1200 = object.key("Properties").start_object();
        for (key_1201, value_1202) in var_1199 {
            {
                object_1200.key(key_1201).string(value_1202);
            }
        }
        object_1200.finish();
    }
    if let Some(var_1203) = &input.properties_to_remove {
        let mut array_1204 = object.key("PropertiesToRemove").start_array();
        for item_1205 in var_1203 {
            {
                array_1204.value().string(item_1205);
            }
        }
        array_1204.finish();
    }
}

pub fn serialize_structure_update_app_image_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAppImageConfigInput,
) {
    if let Some(var_1206) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_1206);
    }
    if let Some(var_1207) = &input.kernel_gateway_image_config {
        let mut object_1208 = object.key("KernelGatewayImageConfig").start_object();
        crate::json_ser::serialize_structure_kernel_gateway_image_config(
            &mut object_1208,
            var_1207,
        );
        object_1208.finish();
    }
}

pub fn serialize_structure_update_artifact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateArtifactInput,
) {
    if let Some(var_1209) = &input.artifact_arn {
        object.key("ArtifactArn").string(var_1209);
    }
    if let Some(var_1210) = &input.artifact_name {
        object.key("ArtifactName").string(var_1210);
    }
    if let Some(var_1211) = &input.properties {
        let mut object_1212 = object.key("Properties").start_object();
        for (key_1213, value_1214) in var_1211 {
            {
                object_1212.key(key_1213).string(value_1214);
            }
        }
        object_1212.finish();
    }
    if let Some(var_1215) = &input.properties_to_remove {
        let mut array_1216 = object.key("PropertiesToRemove").start_array();
        for item_1217 in var_1215 {
            {
                array_1216.value().string(item_1217);
            }
        }
        array_1216.finish();
    }
}

pub fn serialize_structure_update_code_repository_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCodeRepositoryInput,
) {
    if let Some(var_1218) = &input.code_repository_name {
        object.key("CodeRepositoryName").string(var_1218);
    }
    if let Some(var_1219) = &input.git_config {
        let mut object_1220 = object.key("GitConfig").start_object();
        crate::json_ser::serialize_structure_git_config_for_update(&mut object_1220, var_1219);
        object_1220.finish();
    }
}

pub fn serialize_structure_update_context_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContextInput,
) {
    if let Some(var_1221) = &input.context_name {
        object.key("ContextName").string(var_1221);
    }
    if let Some(var_1222) = &input.description {
        object.key("Description").string(var_1222);
    }
    if let Some(var_1223) = &input.properties {
        let mut object_1224 = object.key("Properties").start_object();
        for (key_1225, value_1226) in var_1223 {
            {
                object_1224.key(key_1225).string(value_1226);
            }
        }
        object_1224.finish();
    }
    if let Some(var_1227) = &input.properties_to_remove {
        let mut array_1228 = object.key("PropertiesToRemove").start_array();
        for item_1229 in var_1227 {
            {
                array_1228.value().string(item_1229);
            }
        }
        array_1228.finish();
    }
}

pub fn serialize_structure_update_device_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDeviceFleetInput,
) {
    if let Some(var_1230) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1230);
    }
    if let Some(var_1231) = &input.role_arn {
        object.key("RoleArn").string(var_1231);
    }
    if let Some(var_1232) = &input.description {
        object.key("Description").string(var_1232);
    }
    if let Some(var_1233) = &input.output_config {
        let mut object_1234 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_edge_output_config(&mut object_1234, var_1233);
        object_1234.finish();
    }
}

pub fn serialize_structure_update_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDevicesInput,
) {
    if let Some(var_1235) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_1235);
    }
    if let Some(var_1236) = &input.devices {
        let mut array_1237 = object.key("Devices").start_array();
        for item_1238 in var_1236 {
            {
                let mut object_1239 = array_1237.value().start_object();
                crate::json_ser::serialize_structure_device(&mut object_1239, item_1238);
                object_1239.finish();
            }
        }
        array_1237.finish();
    }
}

pub fn serialize_structure_update_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainInput,
) {
    if let Some(var_1240) = &input.domain_id {
        object.key("DomainId").string(var_1240);
    }
    if let Some(var_1241) = &input.default_user_settings {
        let mut object_1242 = object.key("DefaultUserSettings").start_object();
        crate::json_ser::serialize_structure_user_settings(&mut object_1242, var_1241);
        object_1242.finish();
    }
}

pub fn serialize_structure_update_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointInput,
) {
    if let Some(var_1243) = &input.endpoint_name {
        object.key("EndpointName").string(var_1243);
    }
    if let Some(var_1244) = &input.endpoint_config_name {
        object.key("EndpointConfigName").string(var_1244);
    }
    if input.retain_all_variant_properties {
        object
            .key("RetainAllVariantProperties")
            .boolean(input.retain_all_variant_properties);
    }
    if let Some(var_1245) = &input.exclude_retained_variant_properties {
        let mut array_1246 = object.key("ExcludeRetainedVariantProperties").start_array();
        for item_1247 in var_1245 {
            {
                let mut object_1248 = array_1246.value().start_object();
                crate::json_ser::serialize_structure_variant_property(&mut object_1248, item_1247);
                object_1248.finish();
            }
        }
        array_1246.finish();
    }
    if let Some(var_1249) = &input.deployment_config {
        let mut object_1250 = object.key("DeploymentConfig").start_object();
        crate::json_ser::serialize_structure_deployment_config(&mut object_1250, var_1249);
        object_1250.finish();
    }
}

pub fn serialize_structure_update_endpoint_weights_and_capacities_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEndpointWeightsAndCapacitiesInput,
) {
    if let Some(var_1251) = &input.endpoint_name {
        object.key("EndpointName").string(var_1251);
    }
    if let Some(var_1252) = &input.desired_weights_and_capacities {
        let mut array_1253 = object.key("DesiredWeightsAndCapacities").start_array();
        for item_1254 in var_1252 {
            {
                let mut object_1255 = array_1253.value().start_object();
                crate::json_ser::serialize_structure_desired_weight_and_capacity(
                    &mut object_1255,
                    item_1254,
                );
                object_1255.finish();
            }
        }
        array_1253.finish();
    }
}

pub fn serialize_structure_update_experiment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExperimentInput,
) {
    if let Some(var_1256) = &input.experiment_name {
        object.key("ExperimentName").string(var_1256);
    }
    if let Some(var_1257) = &input.display_name {
        object.key("DisplayName").string(var_1257);
    }
    if let Some(var_1258) = &input.description {
        object.key("Description").string(var_1258);
    }
}

pub fn serialize_structure_update_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateImageInput,
) {
    if let Some(var_1259) = &input.delete_properties {
        let mut array_1260 = object.key("DeleteProperties").start_array();
        for item_1261 in var_1259 {
            {
                array_1260.value().string(item_1261);
            }
        }
        array_1260.finish();
    }
    if let Some(var_1262) = &input.description {
        object.key("Description").string(var_1262);
    }
    if let Some(var_1263) = &input.display_name {
        object.key("DisplayName").string(var_1263);
    }
    if let Some(var_1264) = &input.image_name {
        object.key("ImageName").string(var_1264);
    }
    if let Some(var_1265) = &input.role_arn {
        object.key("RoleArn").string(var_1265);
    }
}

pub fn serialize_structure_update_model_package_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateModelPackageInput,
) {
    if let Some(var_1266) = &input.model_package_arn {
        object.key("ModelPackageArn").string(var_1266);
    }
    if let Some(var_1267) = &input.model_approval_status {
        object.key("ModelApprovalStatus").string(var_1267.as_str());
    }
    if let Some(var_1268) = &input.approval_description {
        object.key("ApprovalDescription").string(var_1268);
    }
}

pub fn serialize_structure_update_monitoring_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMonitoringScheduleInput,
) {
    if let Some(var_1269) = &input.monitoring_schedule_name {
        object.key("MonitoringScheduleName").string(var_1269);
    }
    if let Some(var_1270) = &input.monitoring_schedule_config {
        let mut object_1271 = object.key("MonitoringScheduleConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_schedule_config(&mut object_1271, var_1270);
        object_1271.finish();
    }
}

pub fn serialize_structure_update_notebook_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNotebookInstanceInput,
) {
    if let Some(var_1272) = &input.notebook_instance_name {
        object.key("NotebookInstanceName").string(var_1272);
    }
    if let Some(var_1273) = &input.instance_type {
        object.key("InstanceType").string(var_1273.as_str());
    }
    if let Some(var_1274) = &input.role_arn {
        object.key("RoleArn").string(var_1274);
    }
    if let Some(var_1275) = &input.lifecycle_config_name {
        object.key("LifecycleConfigName").string(var_1275);
    }
    if input.disassociate_lifecycle_config {
        object
            .key("DisassociateLifecycleConfig")
            .boolean(input.disassociate_lifecycle_config);
    }
    if let Some(var_1276) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1276).into()),
        );
    }
    if let Some(var_1277) = &input.default_code_repository {
        object.key("DefaultCodeRepository").string(var_1277);
    }
    if let Some(var_1278) = &input.additional_code_repositories {
        let mut array_1279 = object.key("AdditionalCodeRepositories").start_array();
        for item_1280 in var_1278 {
            {
                array_1279.value().string(item_1280);
            }
        }
        array_1279.finish();
    }
    if let Some(var_1281) = &input.accelerator_types {
        let mut array_1282 = object.key("AcceleratorTypes").start_array();
        for item_1283 in var_1281 {
            {
                array_1282.value().string(item_1283.as_str());
            }
        }
        array_1282.finish();
    }
    if input.disassociate_accelerator_types {
        object
            .key("DisassociateAcceleratorTypes")
            .boolean(input.disassociate_accelerator_types);
    }
    if input.disassociate_default_code_repository {
        object
            .key("DisassociateDefaultCodeRepository")
            .boolean(input.disassociate_default_code_repository);
    }
    if input.disassociate_additional_code_repositories {
        object
            .key("DisassociateAdditionalCodeRepositories")
            .boolean(input.disassociate_additional_code_repositories);
    }
    if let Some(var_1284) = &input.root_access {
        object.key("RootAccess").string(var_1284.as_str());
    }
}

pub fn serialize_structure_update_notebook_instance_lifecycle_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNotebookInstanceLifecycleConfigInput,
) {
    if let Some(var_1285) = &input.notebook_instance_lifecycle_config_name {
        object
            .key("NotebookInstanceLifecycleConfigName")
            .string(var_1285);
    }
    if let Some(var_1286) = &input.on_create {
        let mut array_1287 = object.key("OnCreate").start_array();
        for item_1288 in var_1286 {
            {
                let mut object_1289 = array_1287.value().start_object();
                crate::json_ser::serialize_structure_notebook_instance_lifecycle_hook(
                    &mut object_1289,
                    item_1288,
                );
                object_1289.finish();
            }
        }
        array_1287.finish();
    }
    if let Some(var_1290) = &input.on_start {
        let mut array_1291 = object.key("OnStart").start_array();
        for item_1292 in var_1290 {
            {
                let mut object_1293 = array_1291.value().start_object();
                crate::json_ser::serialize_structure_notebook_instance_lifecycle_hook(
                    &mut object_1293,
                    item_1292,
                );
                object_1293.finish();
            }
        }
        array_1291.finish();
    }
}

pub fn serialize_structure_update_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePipelineInput,
) {
    if let Some(var_1294) = &input.pipeline_name {
        object.key("PipelineName").string(var_1294);
    }
    if let Some(var_1295) = &input.pipeline_display_name {
        object.key("PipelineDisplayName").string(var_1295);
    }
    if let Some(var_1296) = &input.pipeline_definition {
        object.key("PipelineDefinition").string(var_1296);
    }
    if let Some(var_1297) = &input.pipeline_description {
        object.key("PipelineDescription").string(var_1297);
    }
    if let Some(var_1298) = &input.role_arn {
        object.key("RoleArn").string(var_1298);
    }
}

pub fn serialize_structure_update_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePipelineExecutionInput,
) {
    if let Some(var_1299) = &input.pipeline_execution_arn {
        object.key("PipelineExecutionArn").string(var_1299);
    }
    if let Some(var_1300) = &input.pipeline_execution_description {
        object.key("PipelineExecutionDescription").string(var_1300);
    }
    if let Some(var_1301) = &input.pipeline_execution_display_name {
        object.key("PipelineExecutionDisplayName").string(var_1301);
    }
}

pub fn serialize_structure_update_training_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrainingJobInput,
) {
    if let Some(var_1302) = &input.training_job_name {
        object.key("TrainingJobName").string(var_1302);
    }
    if let Some(var_1303) = &input.profiler_config {
        let mut object_1304 = object.key("ProfilerConfig").start_object();
        crate::json_ser::serialize_structure_profiler_config_for_update(&mut object_1304, var_1303);
        object_1304.finish();
    }
    if let Some(var_1305) = &input.profiler_rule_configurations {
        let mut array_1306 = object.key("ProfilerRuleConfigurations").start_array();
        for item_1307 in var_1305 {
            {
                let mut object_1308 = array_1306.value().start_object();
                crate::json_ser::serialize_structure_profiler_rule_configuration(
                    &mut object_1308,
                    item_1307,
                );
                object_1308.finish();
            }
        }
        array_1306.finish();
    }
}

pub fn serialize_structure_update_trial_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrialInput,
) {
    if let Some(var_1309) = &input.trial_name {
        object.key("TrialName").string(var_1309);
    }
    if let Some(var_1310) = &input.display_name {
        object.key("DisplayName").string(var_1310);
    }
}

pub fn serialize_structure_update_trial_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrialComponentInput,
) {
    if let Some(var_1311) = &input.trial_component_name {
        object.key("TrialComponentName").string(var_1311);
    }
    if let Some(var_1312) = &input.display_name {
        object.key("DisplayName").string(var_1312);
    }
    if let Some(var_1313) = &input.status {
        let mut object_1314 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_trial_component_status(&mut object_1314, var_1313);
        object_1314.finish();
    }
    if let Some(var_1315) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_1315, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1316) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_1316, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1317) = &input.parameters {
        let mut object_1318 = object.key("Parameters").start_object();
        for (key_1319, value_1320) in var_1317 {
            {
                let mut object_1321 = object_1318.key(key_1319).start_object();
                crate::json_ser::serialize_union_trial_component_parameter_value(
                    &mut object_1321,
                    value_1320,
                );
                object_1321.finish();
            }
        }
        object_1318.finish();
    }
    if let Some(var_1322) = &input.parameters_to_remove {
        let mut array_1323 = object.key("ParametersToRemove").start_array();
        for item_1324 in var_1322 {
            {
                array_1323.value().string(item_1324);
            }
        }
        array_1323.finish();
    }
    if let Some(var_1325) = &input.input_artifacts {
        let mut object_1326 = object.key("InputArtifacts").start_object();
        for (key_1327, value_1328) in var_1325 {
            {
                let mut object_1329 = object_1326.key(key_1327).start_object();
                crate::json_ser::serialize_structure_trial_component_artifact(
                    &mut object_1329,
                    value_1328,
                );
                object_1329.finish();
            }
        }
        object_1326.finish();
    }
    if let Some(var_1330) = &input.input_artifacts_to_remove {
        let mut array_1331 = object.key("InputArtifactsToRemove").start_array();
        for item_1332 in var_1330 {
            {
                array_1331.value().string(item_1332);
            }
        }
        array_1331.finish();
    }
    if let Some(var_1333) = &input.output_artifacts {
        let mut object_1334 = object.key("OutputArtifacts").start_object();
        for (key_1335, value_1336) in var_1333 {
            {
                let mut object_1337 = object_1334.key(key_1335).start_object();
                crate::json_ser::serialize_structure_trial_component_artifact(
                    &mut object_1337,
                    value_1336,
                );
                object_1337.finish();
            }
        }
        object_1334.finish();
    }
    if let Some(var_1338) = &input.output_artifacts_to_remove {
        let mut array_1339 = object.key("OutputArtifactsToRemove").start_array();
        for item_1340 in var_1338 {
            {
                array_1339.value().string(item_1340);
            }
        }
        array_1339.finish();
    }
}

pub fn serialize_structure_update_user_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserProfileInput,
) {
    if let Some(var_1341) = &input.domain_id {
        object.key("DomainId").string(var_1341);
    }
    if let Some(var_1342) = &input.user_profile_name {
        object.key("UserProfileName").string(var_1342);
    }
    if let Some(var_1343) = &input.user_settings {
        let mut object_1344 = object.key("UserSettings").start_object();
        crate::json_ser::serialize_structure_user_settings(&mut object_1344, var_1343);
        object_1344.finish();
    }
}

pub fn serialize_structure_update_workforce_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkforceInput,
) {
    if let Some(var_1345) = &input.workforce_name {
        object.key("WorkforceName").string(var_1345);
    }
    if let Some(var_1346) = &input.source_ip_config {
        let mut object_1347 = object.key("SourceIpConfig").start_object();
        crate::json_ser::serialize_structure_source_ip_config(&mut object_1347, var_1346);
        object_1347.finish();
    }
    if let Some(var_1348) = &input.oidc_config {
        let mut object_1349 = object.key("OidcConfig").start_object();
        crate::json_ser::serialize_structure_oidc_config(&mut object_1349, var_1348);
        object_1349.finish();
    }
}

pub fn serialize_structure_update_workteam_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkteamInput,
) {
    if let Some(var_1350) = &input.workteam_name {
        object.key("WorkteamName").string(var_1350);
    }
    if let Some(var_1351) = &input.member_definitions {
        let mut array_1352 = object.key("MemberDefinitions").start_array();
        for item_1353 in var_1351 {
            {
                let mut object_1354 = array_1352.value().start_object();
                crate::json_ser::serialize_structure_member_definition(&mut object_1354, item_1353);
                object_1354.finish();
            }
        }
        array_1352.finish();
    }
    if let Some(var_1355) = &input.description {
        object.key("Description").string(var_1355);
    }
    if let Some(var_1356) = &input.notification_configuration {
        let mut object_1357 = object.key("NotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_notification_configuration(&mut object_1357, var_1356);
        object_1357.finish();
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_1358) = &input.key {
        object.key("Key").string(var_1358);
    }
    if let Some(var_1359) = &input.value {
        object.key("Value").string(var_1359);
    }
}

pub fn serialize_structure_action_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionSource,
) {
    if let Some(var_1360) = &input.source_uri {
        object.key("SourceUri").string(var_1360);
    }
    if let Some(var_1361) = &input.source_type {
        object.key("SourceType").string(var_1361);
    }
    if let Some(var_1362) = &input.source_id {
        object.key("SourceId").string(var_1362);
    }
}

pub fn serialize_structure_metadata_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataProperties,
) {
    if let Some(var_1363) = &input.commit_id {
        object.key("CommitId").string(var_1363);
    }
    if let Some(var_1364) = &input.repository {
        object.key("Repository").string(var_1364);
    }
    if let Some(var_1365) = &input.generated_by {
        object.key("GeneratedBy").string(var_1365);
    }
    if let Some(var_1366) = &input.project_id {
        object.key("ProjectId").string(var_1366);
    }
}

pub fn serialize_structure_training_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingSpecification,
) {
    if let Some(var_1367) = &input.training_image {
        object.key("TrainingImage").string(var_1367);
    }
    if let Some(var_1368) = &input.training_image_digest {
        object.key("TrainingImageDigest").string(var_1368);
    }
    if let Some(var_1369) = &input.supported_hyper_parameters {
        let mut array_1370 = object.key("SupportedHyperParameters").start_array();
        for item_1371 in var_1369 {
            {
                let mut object_1372 = array_1370.value().start_object();
                crate::json_ser::serialize_structure_hyper_parameter_specification(
                    &mut object_1372,
                    item_1371,
                );
                object_1372.finish();
            }
        }
        array_1370.finish();
    }
    if let Some(var_1373) = &input.supported_training_instance_types {
        let mut array_1374 = object.key("SupportedTrainingInstanceTypes").start_array();
        for item_1375 in var_1373 {
            {
                array_1374.value().string(item_1375.as_str());
            }
        }
        array_1374.finish();
    }
    if input.supports_distributed_training {
        object
            .key("SupportsDistributedTraining")
            .boolean(input.supports_distributed_training);
    }
    if let Some(var_1376) = &input.metric_definitions {
        let mut array_1377 = object.key("MetricDefinitions").start_array();
        for item_1378 in var_1376 {
            {
                let mut object_1379 = array_1377.value().start_object();
                crate::json_ser::serialize_structure_metric_definition(&mut object_1379, item_1378);
                object_1379.finish();
            }
        }
        array_1377.finish();
    }
    if let Some(var_1380) = &input.training_channels {
        let mut array_1381 = object.key("TrainingChannels").start_array();
        for item_1382 in var_1380 {
            {
                let mut object_1383 = array_1381.value().start_object();
                crate::json_ser::serialize_structure_channel_specification(
                    &mut object_1383,
                    item_1382,
                );
                object_1383.finish();
            }
        }
        array_1381.finish();
    }
    if let Some(var_1384) = &input.supported_tuning_job_objective_metrics {
        let mut array_1385 = object
            .key("SupportedTuningJobObjectiveMetrics")
            .start_array();
        for item_1386 in var_1384 {
            {
                let mut object_1387 = array_1385.value().start_object();
                crate::json_ser::serialize_structure_hyper_parameter_tuning_job_objective(
                    &mut object_1387,
                    item_1386,
                );
                object_1387.finish();
            }
        }
        array_1385.finish();
    }
}

pub fn serialize_structure_inference_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceSpecification,
) {
    if let Some(var_1388) = &input.containers {
        let mut array_1389 = object.key("Containers").start_array();
        for item_1390 in var_1388 {
            {
                let mut object_1391 = array_1389.value().start_object();
                crate::json_ser::serialize_structure_model_package_container_definition(
                    &mut object_1391,
                    item_1390,
                );
                object_1391.finish();
            }
        }
        array_1389.finish();
    }
    if let Some(var_1392) = &input.supported_transform_instance_types {
        let mut array_1393 = object.key("SupportedTransformInstanceTypes").start_array();
        for item_1394 in var_1392 {
            {
                array_1393.value().string(item_1394.as_str());
            }
        }
        array_1393.finish();
    }
    if let Some(var_1395) = &input.supported_realtime_inference_instance_types {
        let mut array_1396 = object
            .key("SupportedRealtimeInferenceInstanceTypes")
            .start_array();
        for item_1397 in var_1395 {
            {
                array_1396.value().string(item_1397.as_str());
            }
        }
        array_1396.finish();
    }
    if let Some(var_1398) = &input.supported_content_types {
        let mut array_1399 = object.key("SupportedContentTypes").start_array();
        for item_1400 in var_1398 {
            {
                array_1399.value().string(item_1400);
            }
        }
        array_1399.finish();
    }
    if let Some(var_1401) = &input.supported_response_mime_types {
        let mut array_1402 = object.key("SupportedResponseMIMETypes").start_array();
        for item_1403 in var_1401 {
            {
                array_1402.value().string(item_1403);
            }
        }
        array_1402.finish();
    }
}

pub fn serialize_structure_algorithm_validation_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmValidationSpecification,
) {
    if let Some(var_1404) = &input.validation_role {
        object.key("ValidationRole").string(var_1404);
    }
    if let Some(var_1405) = &input.validation_profiles {
        let mut array_1406 = object.key("ValidationProfiles").start_array();
        for item_1407 in var_1405 {
            {
                let mut object_1408 = array_1406.value().start_object();
                crate::json_ser::serialize_structure_algorithm_validation_profile(
                    &mut object_1408,
                    item_1407,
                );
                object_1408.finish();
            }
        }
        array_1406.finish();
    }
}

pub fn serialize_structure_resource_spec(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceSpec,
) {
    if let Some(var_1409) = &input.sage_maker_image_arn {
        object.key("SageMakerImageArn").string(var_1409);
    }
    if let Some(var_1410) = &input.sage_maker_image_version_arn {
        object.key("SageMakerImageVersionArn").string(var_1410);
    }
    if let Some(var_1411) = &input.instance_type {
        object.key("InstanceType").string(var_1411.as_str());
    }
}

pub fn serialize_structure_kernel_gateway_image_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelGatewayImageConfig,
) {
    if let Some(var_1412) = &input.kernel_specs {
        let mut array_1413 = object.key("KernelSpecs").start_array();
        for item_1414 in var_1412 {
            {
                let mut object_1415 = array_1413.value().start_object();
                crate::json_ser::serialize_structure_kernel_spec(&mut object_1415, item_1414);
                object_1415.finish();
            }
        }
        array_1413.finish();
    }
    if let Some(var_1416) = &input.file_system_config {
        let mut object_1417 = object.key("FileSystemConfig").start_object();
        crate::json_ser::serialize_structure_file_system_config(&mut object_1417, var_1416);
        object_1417.finish();
    }
}

pub fn serialize_structure_artifact_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArtifactSource,
) {
    if let Some(var_1418) = &input.source_uri {
        object.key("SourceUri").string(var_1418);
    }
    if let Some(var_1419) = &input.source_types {
        let mut array_1420 = object.key("SourceTypes").start_array();
        for item_1421 in var_1419 {
            {
                let mut object_1422 = array_1420.value().start_object();
                crate::json_ser::serialize_structure_artifact_source_type(
                    &mut object_1422,
                    item_1421,
                );
                object_1422.finish();
            }
        }
        array_1420.finish();
    }
}

pub fn serialize_structure_auto_ml_channel(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMLChannel,
) {
    if let Some(var_1423) = &input.data_source {
        let mut object_1424 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_auto_ml_data_source(&mut object_1424, var_1423);
        object_1424.finish();
    }
    if let Some(var_1425) = &input.compression_type {
        object.key("CompressionType").string(var_1425.as_str());
    }
    if let Some(var_1426) = &input.target_attribute_name {
        object.key("TargetAttributeName").string(var_1426);
    }
}

pub fn serialize_structure_auto_ml_output_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMLOutputDataConfig,
) {
    if let Some(var_1427) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1427);
    }
    if let Some(var_1428) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1428);
    }
}

pub fn serialize_structure_auto_ml_job_objective(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMLJobObjective,
) {
    if let Some(var_1429) = &input.metric_name {
        object.key("MetricName").string(var_1429.as_str());
    }
}

pub fn serialize_structure_auto_ml_job_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMLJobConfig,
) {
    if let Some(var_1430) = &input.completion_criteria {
        let mut object_1431 = object.key("CompletionCriteria").start_object();
        crate::json_ser::serialize_structure_auto_ml_job_completion_criteria(
            &mut object_1431,
            var_1430,
        );
        object_1431.finish();
    }
    if let Some(var_1432) = &input.security_config {
        let mut object_1433 = object.key("SecurityConfig").start_object();
        crate::json_ser::serialize_structure_auto_ml_security_config(&mut object_1433, var_1432);
        object_1433.finish();
    }
}

pub fn serialize_structure_model_deploy_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelDeployConfig,
) {
    if input.auto_generate_endpoint_name {
        object
            .key("AutoGenerateEndpointName")
            .boolean(input.auto_generate_endpoint_name);
    }
    if let Some(var_1434) = &input.endpoint_name {
        object.key("EndpointName").string(var_1434);
    }
}

pub fn serialize_structure_git_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitConfig,
) {
    if let Some(var_1435) = &input.repository_url {
        object.key("RepositoryUrl").string(var_1435);
    }
    if let Some(var_1436) = &input.branch {
        object.key("Branch").string(var_1436);
    }
    if let Some(var_1437) = &input.secret_arn {
        object.key("SecretArn").string(var_1437);
    }
}

pub fn serialize_structure_input_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputConfig,
) {
    if let Some(var_1438) = &input.s3_uri {
        object.key("S3Uri").string(var_1438);
    }
    if let Some(var_1439) = &input.data_input_config {
        object.key("DataInputConfig").string(var_1439);
    }
    if let Some(var_1440) = &input.framework {
        object.key("Framework").string(var_1440.as_str());
    }
    if let Some(var_1441) = &input.framework_version {
        object.key("FrameworkVersion").string(var_1441);
    }
}

pub fn serialize_structure_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputConfig,
) {
    if let Some(var_1442) = &input.s3_output_location {
        object.key("S3OutputLocation").string(var_1442);
    }
    if let Some(var_1443) = &input.target_device {
        object.key("TargetDevice").string(var_1443.as_str());
    }
    if let Some(var_1444) = &input.target_platform {
        let mut object_1445 = object.key("TargetPlatform").start_object();
        crate::json_ser::serialize_structure_target_platform(&mut object_1445, var_1444);
        object_1445.finish();
    }
    if let Some(var_1446) = &input.compiler_options {
        object.key("CompilerOptions").string(var_1446);
    }
    if let Some(var_1447) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1447);
    }
}

pub fn serialize_structure_stopping_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StoppingCondition,
) {
    if input.max_runtime_in_seconds != 0 {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
    if let Some(var_1448) = &input.max_wait_time_in_seconds {
        object.key("MaxWaitTimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1448).into()),
        );
    }
}

pub fn serialize_structure_context_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContextSource,
) {
    if let Some(var_1449) = &input.source_uri {
        object.key("SourceUri").string(var_1449);
    }
    if let Some(var_1450) = &input.source_type {
        object.key("SourceType").string(var_1450);
    }
    if let Some(var_1451) = &input.source_id {
        object.key("SourceId").string(var_1451);
    }
}

pub fn serialize_structure_data_quality_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityBaselineConfig,
) {
    if let Some(var_1452) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1452);
    }
    if let Some(var_1453) = &input.constraints_resource {
        let mut object_1454 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_1454,
            var_1453,
        );
        object_1454.finish();
    }
    if let Some(var_1455) = &input.statistics_resource {
        let mut object_1456 = object.key("StatisticsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_statistics_resource(
            &mut object_1456,
            var_1455,
        );
        object_1456.finish();
    }
}

pub fn serialize_structure_data_quality_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityAppSpecification,
) {
    if let Some(var_1457) = &input.image_uri {
        object.key("ImageUri").string(var_1457);
    }
    if let Some(var_1458) = &input.container_entrypoint {
        let mut array_1459 = object.key("ContainerEntrypoint").start_array();
        for item_1460 in var_1458 {
            {
                array_1459.value().string(item_1460);
            }
        }
        array_1459.finish();
    }
    if let Some(var_1461) = &input.container_arguments {
        let mut array_1462 = object.key("ContainerArguments").start_array();
        for item_1463 in var_1461 {
            {
                array_1462.value().string(item_1463);
            }
        }
        array_1462.finish();
    }
    if let Some(var_1464) = &input.record_preprocessor_source_uri {
        object.key("RecordPreprocessorSourceUri").string(var_1464);
    }
    if let Some(var_1465) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_1465);
    }
    if let Some(var_1466) = &input.environment {
        let mut object_1467 = object.key("Environment").start_object();
        for (key_1468, value_1469) in var_1466 {
            {
                object_1467.key(key_1468).string(value_1469);
            }
        }
        object_1467.finish();
    }
}

pub fn serialize_structure_data_quality_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataQualityJobInput,
) {
    if let Some(var_1470) = &input.endpoint_input {
        let mut object_1471 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_1471, var_1470);
        object_1471.finish();
    }
}

pub fn serialize_structure_monitoring_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringOutputConfig,
) {
    if let Some(var_1472) = &input.monitoring_outputs {
        let mut array_1473 = object.key("MonitoringOutputs").start_array();
        for item_1474 in var_1472 {
            {
                let mut object_1475 = array_1473.value().start_object();
                crate::json_ser::serialize_structure_monitoring_output(&mut object_1475, item_1474);
                object_1475.finish();
            }
        }
        array_1473.finish();
    }
    if let Some(var_1476) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1476);
    }
}

pub fn serialize_structure_monitoring_resources(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringResources,
) {
    if let Some(var_1477) = &input.cluster_config {
        let mut object_1478 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_cluster_config(&mut object_1478, var_1477);
        object_1478.finish();
    }
}

pub fn serialize_structure_monitoring_network_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringNetworkConfig,
) {
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if let Some(var_1479) = &input.vpc_config {
        let mut object_1480 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_1480, var_1479);
        object_1480.finish();
    }
}

pub fn serialize_structure_monitoring_stopping_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringStoppingCondition,
) {
    {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
}

pub fn serialize_structure_edge_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EdgeOutputConfig,
) {
    if let Some(var_1481) = &input.s3_output_location {
        object.key("S3OutputLocation").string(var_1481);
    }
    if let Some(var_1482) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1482);
    }
}

pub fn serialize_structure_user_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserSettings,
) {
    if let Some(var_1483) = &input.execution_role {
        object.key("ExecutionRole").string(var_1483);
    }
    if let Some(var_1484) = &input.security_groups {
        let mut array_1485 = object.key("SecurityGroups").start_array();
        for item_1486 in var_1484 {
            {
                array_1485.value().string(item_1486);
            }
        }
        array_1485.finish();
    }
    if let Some(var_1487) = &input.sharing_settings {
        let mut object_1488 = object.key("SharingSettings").start_object();
        crate::json_ser::serialize_structure_sharing_settings(&mut object_1488, var_1487);
        object_1488.finish();
    }
    if let Some(var_1489) = &input.jupyter_server_app_settings {
        let mut object_1490 = object.key("JupyterServerAppSettings").start_object();
        crate::json_ser::serialize_structure_jupyter_server_app_settings(
            &mut object_1490,
            var_1489,
        );
        object_1490.finish();
    }
    if let Some(var_1491) = &input.kernel_gateway_app_settings {
        let mut object_1492 = object.key("KernelGatewayAppSettings").start_object();
        crate::json_ser::serialize_structure_kernel_gateway_app_settings(
            &mut object_1492,
            var_1491,
        );
        object_1492.finish();
    }
    if let Some(var_1493) = &input.tensor_board_app_settings {
        let mut object_1494 = object.key("TensorBoardAppSettings").start_object();
        crate::json_ser::serialize_structure_tensor_board_app_settings(&mut object_1494, var_1493);
        object_1494.finish();
    }
}

pub fn serialize_structure_production_variant(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariant,
) {
    if let Some(var_1495) = &input.variant_name {
        object.key("VariantName").string(var_1495);
    }
    if let Some(var_1496) = &input.model_name {
        object.key("ModelName").string(var_1496);
    }
    if let Some(var_1497) = &input.initial_instance_count {
        object.key("InitialInstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1497).into()),
        );
    }
    if let Some(var_1498) = &input.instance_type {
        object.key("InstanceType").string(var_1498.as_str());
    }
    if let Some(var_1499) = &input.initial_variant_weight {
        object.key("InitialVariantWeight").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1499).into()),
        );
    }
    if let Some(var_1500) = &input.accelerator_type {
        object.key("AcceleratorType").string(var_1500.as_str());
    }
    if let Some(var_1501) = &input.core_dump_config {
        let mut object_1502 = object.key("CoreDumpConfig").start_object();
        crate::json_ser::serialize_structure_production_variant_core_dump_config(
            &mut object_1502,
            var_1501,
        );
        object_1502.finish();
    }
}

pub fn serialize_structure_data_capture_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCaptureConfig,
) {
    if input.enable_capture {
        object.key("EnableCapture").boolean(input.enable_capture);
    }
    if let Some(var_1503) = &input.initial_sampling_percentage {
        object.key("InitialSamplingPercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1503).into()),
        );
    }
    if let Some(var_1504) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_1504);
    }
    if let Some(var_1505) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1505);
    }
    if let Some(var_1506) = &input.capture_options {
        let mut array_1507 = object.key("CaptureOptions").start_array();
        for item_1508 in var_1506 {
            {
                let mut object_1509 = array_1507.value().start_object();
                crate::json_ser::serialize_structure_capture_option(&mut object_1509, item_1508);
                object_1509.finish();
            }
        }
        array_1507.finish();
    }
    if let Some(var_1510) = &input.capture_content_type_header {
        let mut object_1511 = object.key("CaptureContentTypeHeader").start_object();
        crate::json_ser::serialize_structure_capture_content_type_header(
            &mut object_1511,
            var_1510,
        );
        object_1511.finish();
    }
}

pub fn serialize_structure_feature_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FeatureDefinition,
) {
    if let Some(var_1512) = &input.feature_name {
        object.key("FeatureName").string(var_1512);
    }
    if let Some(var_1513) = &input.feature_type {
        object.key("FeatureType").string(var_1513.as_str());
    }
}

pub fn serialize_structure_online_store_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnlineStoreConfig,
) {
    if let Some(var_1514) = &input.security_config {
        let mut object_1515 = object.key("SecurityConfig").start_object();
        crate::json_ser::serialize_structure_online_store_security_config(
            &mut object_1515,
            var_1514,
        );
        object_1515.finish();
    }
    if input.enable_online_store {
        object
            .key("EnableOnlineStore")
            .boolean(input.enable_online_store);
    }
}

pub fn serialize_structure_offline_store_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OfflineStoreConfig,
) {
    if let Some(var_1516) = &input.s3_storage_config {
        let mut object_1517 = object.key("S3StorageConfig").start_object();
        crate::json_ser::serialize_structure_s3_storage_config(&mut object_1517, var_1516);
        object_1517.finish();
    }
    if input.disable_glue_table_creation {
        object
            .key("DisableGlueTableCreation")
            .boolean(input.disable_glue_table_creation);
    }
    if let Some(var_1518) = &input.data_catalog_config {
        let mut object_1519 = object.key("DataCatalogConfig").start_object();
        crate::json_ser::serialize_structure_data_catalog_config(&mut object_1519, var_1518);
        object_1519.finish();
    }
}

pub fn serialize_structure_human_loop_request_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopRequestSource,
) {
    if let Some(var_1520) = &input.aws_managed_human_loop_request_source {
        object
            .key("AwsManagedHumanLoopRequestSource")
            .string(var_1520.as_str());
    }
}

pub fn serialize_structure_human_loop_activation_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopActivationConfig,
) {
    if let Some(var_1521) = &input.human_loop_activation_conditions_config {
        let mut object_1522 = object
            .key("HumanLoopActivationConditionsConfig")
            .start_object();
        crate::json_ser::serialize_structure_human_loop_activation_conditions_config(
            &mut object_1522,
            var_1521,
        );
        object_1522.finish();
    }
}

pub fn serialize_structure_human_loop_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopConfig,
) {
    if let Some(var_1523) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1523);
    }
    if let Some(var_1524) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1524);
    }
    if let Some(var_1525) = &input.task_title {
        object.key("TaskTitle").string(var_1525);
    }
    if let Some(var_1526) = &input.task_description {
        object.key("TaskDescription").string(var_1526);
    }
    if let Some(var_1527) = &input.task_count {
        object.key("TaskCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1527).into()),
        );
    }
    if let Some(var_1528) = &input.task_availability_lifetime_in_seconds {
        object.key("TaskAvailabilityLifetimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1528).into()),
        );
    }
    if let Some(var_1529) = &input.task_time_limit_in_seconds {
        object.key("TaskTimeLimitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1529).into()),
        );
    }
    if let Some(var_1530) = &input.task_keywords {
        let mut array_1531 = object.key("TaskKeywords").start_array();
        for item_1532 in var_1530 {
            {
                array_1531.value().string(item_1532);
            }
        }
        array_1531.finish();
    }
    if let Some(var_1533) = &input.public_workforce_task_price {
        let mut object_1534 = object.key("PublicWorkforceTaskPrice").start_object();
        crate::json_ser::serialize_structure_public_workforce_task_price(
            &mut object_1534,
            var_1533,
        );
        object_1534.finish();
    }
}

pub fn serialize_structure_flow_definition_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FlowDefinitionOutputConfig,
) {
    if let Some(var_1535) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1535);
    }
    if let Some(var_1536) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1536);
    }
}

pub fn serialize_structure_ui_template(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiTemplate,
) {
    if let Some(var_1537) = &input.content {
        object.key("Content").string(var_1537);
    }
}

pub fn serialize_structure_hyper_parameter_tuning_job_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobConfig,
) {
    if let Some(var_1538) = &input.strategy {
        object.key("Strategy").string(var_1538.as_str());
    }
    if let Some(var_1539) = &input.hyper_parameter_tuning_job_objective {
        let mut object_1540 = object
            .key("HyperParameterTuningJobObjective")
            .start_object();
        crate::json_ser::serialize_structure_hyper_parameter_tuning_job_objective(
            &mut object_1540,
            var_1539,
        );
        object_1540.finish();
    }
    if let Some(var_1541) = &input.resource_limits {
        let mut object_1542 = object.key("ResourceLimits").start_object();
        crate::json_ser::serialize_structure_resource_limits(&mut object_1542, var_1541);
        object_1542.finish();
    }
    if let Some(var_1543) = &input.parameter_ranges {
        let mut object_1544 = object.key("ParameterRanges").start_object();
        crate::json_ser::serialize_structure_parameter_ranges(&mut object_1544, var_1543);
        object_1544.finish();
    }
    if let Some(var_1545) = &input.training_job_early_stopping_type {
        object
            .key("TrainingJobEarlyStoppingType")
            .string(var_1545.as_str());
    }
    if let Some(var_1546) = &input.tuning_job_completion_criteria {
        let mut object_1547 = object.key("TuningJobCompletionCriteria").start_object();
        crate::json_ser::serialize_structure_tuning_job_completion_criteria(
            &mut object_1547,
            var_1546,
        );
        object_1547.finish();
    }
}

pub fn serialize_structure_hyper_parameter_training_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTrainingJobDefinition,
) {
    if let Some(var_1548) = &input.definition_name {
        object.key("DefinitionName").string(var_1548);
    }
    if let Some(var_1549) = &input.tuning_objective {
        let mut object_1550 = object.key("TuningObjective").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_tuning_job_objective(
            &mut object_1550,
            var_1549,
        );
        object_1550.finish();
    }
    if let Some(var_1551) = &input.hyper_parameter_ranges {
        let mut object_1552 = object.key("HyperParameterRanges").start_object();
        crate::json_ser::serialize_structure_parameter_ranges(&mut object_1552, var_1551);
        object_1552.finish();
    }
    if let Some(var_1553) = &input.static_hyper_parameters {
        let mut object_1554 = object.key("StaticHyperParameters").start_object();
        for (key_1555, value_1556) in var_1553 {
            {
                object_1554.key(key_1555).string(value_1556);
            }
        }
        object_1554.finish();
    }
    if let Some(var_1557) = &input.algorithm_specification {
        let mut object_1558 = object.key("AlgorithmSpecification").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_algorithm_specification(
            &mut object_1558,
            var_1557,
        );
        object_1558.finish();
    }
    if let Some(var_1559) = &input.role_arn {
        object.key("RoleArn").string(var_1559);
    }
    if let Some(var_1560) = &input.input_data_config {
        let mut array_1561 = object.key("InputDataConfig").start_array();
        for item_1562 in var_1560 {
            {
                let mut object_1563 = array_1561.value().start_object();
                crate::json_ser::serialize_structure_channel(&mut object_1563, item_1562);
                object_1563.finish();
            }
        }
        array_1561.finish();
    }
    if let Some(var_1564) = &input.vpc_config {
        let mut object_1565 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_1565, var_1564);
        object_1565.finish();
    }
    if let Some(var_1566) = &input.output_data_config {
        let mut object_1567 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_1567, var_1566);
        object_1567.finish();
    }
    if let Some(var_1568) = &input.resource_config {
        let mut object_1569 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_resource_config(&mut object_1569, var_1568);
        object_1569.finish();
    }
    if let Some(var_1570) = &input.stopping_condition {
        let mut object_1571 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_stopping_condition(&mut object_1571, var_1570);
        object_1571.finish();
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_managed_spot_training {
        object
            .key("EnableManagedSpotTraining")
            .boolean(input.enable_managed_spot_training);
    }
    if let Some(var_1572) = &input.checkpoint_config {
        let mut object_1573 = object.key("CheckpointConfig").start_object();
        crate::json_ser::serialize_structure_checkpoint_config(&mut object_1573, var_1572);
        object_1573.finish();
    }
    if let Some(var_1574) = &input.retry_strategy {
        let mut object_1575 = object.key("RetryStrategy").start_object();
        crate::json_ser::serialize_structure_retry_strategy(&mut object_1575, var_1574);
        object_1575.finish();
    }
}

pub fn serialize_structure_hyper_parameter_tuning_job_warm_start_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobWarmStartConfig,
) {
    if let Some(var_1576) = &input.parent_hyper_parameter_tuning_jobs {
        let mut array_1577 = object.key("ParentHyperParameterTuningJobs").start_array();
        for item_1578 in var_1576 {
            {
                let mut object_1579 = array_1577.value().start_object();
                crate::json_ser::serialize_structure_parent_hyper_parameter_tuning_job(
                    &mut object_1579,
                    item_1578,
                );
                object_1579.finish();
            }
        }
        array_1577.finish();
    }
    if let Some(var_1580) = &input.warm_start_type {
        object.key("WarmStartType").string(var_1580.as_str());
    }
}

pub fn serialize_structure_labeling_job_input_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobInputConfig,
) {
    if let Some(var_1581) = &input.data_source {
        let mut object_1582 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_labeling_job_data_source(&mut object_1582, var_1581);
        object_1582.finish();
    }
    if let Some(var_1583) = &input.data_attributes {
        let mut object_1584 = object.key("DataAttributes").start_object();
        crate::json_ser::serialize_structure_labeling_job_data_attributes(
            &mut object_1584,
            var_1583,
        );
        object_1584.finish();
    }
}

pub fn serialize_structure_labeling_job_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobOutputConfig,
) {
    if let Some(var_1585) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1585);
    }
    if let Some(var_1586) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1586);
    }
    if let Some(var_1587) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_1587);
    }
}

pub fn serialize_structure_labeling_job_stopping_conditions(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobStoppingConditions,
) {
    if let Some(var_1588) = &input.max_human_labeled_object_count {
        object.key("MaxHumanLabeledObjectCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1588).into()),
        );
    }
    if let Some(var_1589) = &input.max_percentage_of_input_dataset_labeled {
        object.key("MaxPercentageOfInputDatasetLabeled").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1589).into()),
        );
    }
}

pub fn serialize_structure_labeling_job_algorithms_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobAlgorithmsConfig,
) {
    if let Some(var_1590) = &input.labeling_job_algorithm_specification_arn {
        object
            .key("LabelingJobAlgorithmSpecificationArn")
            .string(var_1590);
    }
    if let Some(var_1591) = &input.initial_active_learning_model_arn {
        object.key("InitialActiveLearningModelArn").string(var_1591);
    }
    if let Some(var_1592) = &input.labeling_job_resource_config {
        let mut object_1593 = object.key("LabelingJobResourceConfig").start_object();
        crate::json_ser::serialize_structure_labeling_job_resource_config(
            &mut object_1593,
            var_1592,
        );
        object_1593.finish();
    }
}

pub fn serialize_structure_human_task_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanTaskConfig,
) {
    if let Some(var_1594) = &input.workteam_arn {
        object.key("WorkteamArn").string(var_1594);
    }
    if let Some(var_1595) = &input.ui_config {
        let mut object_1596 = object.key("UiConfig").start_object();
        crate::json_ser::serialize_structure_ui_config(&mut object_1596, var_1595);
        object_1596.finish();
    }
    if let Some(var_1597) = &input.pre_human_task_lambda_arn {
        object.key("PreHumanTaskLambdaArn").string(var_1597);
    }
    if let Some(var_1598) = &input.task_keywords {
        let mut array_1599 = object.key("TaskKeywords").start_array();
        for item_1600 in var_1598 {
            {
                array_1599.value().string(item_1600);
            }
        }
        array_1599.finish();
    }
    if let Some(var_1601) = &input.task_title {
        object.key("TaskTitle").string(var_1601);
    }
    if let Some(var_1602) = &input.task_description {
        object.key("TaskDescription").string(var_1602);
    }
    if let Some(var_1603) = &input.number_of_human_workers_per_data_object {
        object.key("NumberOfHumanWorkersPerDataObject").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1603).into()),
        );
    }
    if let Some(var_1604) = &input.task_time_limit_in_seconds {
        object.key("TaskTimeLimitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1604).into()),
        );
    }
    if let Some(var_1605) = &input.task_availability_lifetime_in_seconds {
        object.key("TaskAvailabilityLifetimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1605).into()),
        );
    }
    if let Some(var_1606) = &input.max_concurrent_task_count {
        object.key("MaxConcurrentTaskCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1606).into()),
        );
    }
    if let Some(var_1607) = &input.annotation_consolidation_config {
        let mut object_1608 = object.key("AnnotationConsolidationConfig").start_object();
        crate::json_ser::serialize_structure_annotation_consolidation_config(
            &mut object_1608,
            var_1607,
        );
        object_1608.finish();
    }
    if let Some(var_1609) = &input.public_workforce_task_price {
        let mut object_1610 = object.key("PublicWorkforceTaskPrice").start_object();
        crate::json_ser::serialize_structure_public_workforce_task_price(
            &mut object_1610,
            var_1609,
        );
        object_1610.finish();
    }
}

pub fn serialize_structure_container_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDefinition,
) {
    if let Some(var_1611) = &input.container_hostname {
        object.key("ContainerHostname").string(var_1611);
    }
    if let Some(var_1612) = &input.image {
        object.key("Image").string(var_1612);
    }
    if let Some(var_1613) = &input.image_config {
        let mut object_1614 = object.key("ImageConfig").start_object();
        crate::json_ser::serialize_structure_image_config(&mut object_1614, var_1613);
        object_1614.finish();
    }
    if let Some(var_1615) = &input.mode {
        object.key("Mode").string(var_1615.as_str());
    }
    if let Some(var_1616) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_1616);
    }
    if let Some(var_1617) = &input.environment {
        let mut object_1618 = object.key("Environment").start_object();
        for (key_1619, value_1620) in var_1617 {
            {
                object_1618.key(key_1619).string(value_1620);
            }
        }
        object_1618.finish();
    }
    if let Some(var_1621) = &input.model_package_name {
        object.key("ModelPackageName").string(var_1621);
    }
    if let Some(var_1622) = &input.multi_model_config {
        let mut object_1623 = object.key("MultiModelConfig").start_object();
        crate::json_ser::serialize_structure_multi_model_config(&mut object_1623, var_1622);
        object_1623.finish();
    }
}

pub fn serialize_structure_inference_execution_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InferenceExecutionConfig,
) {
    if let Some(var_1624) = &input.mode {
        object.key("Mode").string(var_1624.as_str());
    }
}

pub fn serialize_structure_vpc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfig,
) {
    if let Some(var_1625) = &input.security_group_ids {
        let mut array_1626 = object.key("SecurityGroupIds").start_array();
        for item_1627 in var_1625 {
            {
                array_1626.value().string(item_1627);
            }
        }
        array_1626.finish();
    }
    if let Some(var_1628) = &input.subnets {
        let mut array_1629 = object.key("Subnets").start_array();
        for item_1630 in var_1628 {
            {
                array_1629.value().string(item_1630);
            }
        }
        array_1629.finish();
    }
}

pub fn serialize_structure_model_bias_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasBaselineConfig,
) {
    if let Some(var_1631) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1631);
    }
    if let Some(var_1632) = &input.constraints_resource {
        let mut object_1633 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_1633,
            var_1632,
        );
        object_1633.finish();
    }
}

pub fn serialize_structure_model_bias_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasAppSpecification,
) {
    if let Some(var_1634) = &input.image_uri {
        object.key("ImageUri").string(var_1634);
    }
    if let Some(var_1635) = &input.config_uri {
        object.key("ConfigUri").string(var_1635);
    }
    if let Some(var_1636) = &input.environment {
        let mut object_1637 = object.key("Environment").start_object();
        for (key_1638, value_1639) in var_1636 {
            {
                object_1637.key(key_1638).string(value_1639);
            }
        }
        object_1637.finish();
    }
}

pub fn serialize_structure_model_bias_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelBiasJobInput,
) {
    if let Some(var_1640) = &input.endpoint_input {
        let mut object_1641 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_1641, var_1640);
        object_1641.finish();
    }
    if let Some(var_1642) = &input.ground_truth_s3_input {
        let mut object_1643 = object.key("GroundTruthS3Input").start_object();
        crate::json_ser::serialize_structure_monitoring_ground_truth_s3_input(
            &mut object_1643,
            var_1642,
        );
        object_1643.finish();
    }
}

pub fn serialize_structure_model_explainability_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityBaselineConfig,
) {
    if let Some(var_1644) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1644);
    }
    if let Some(var_1645) = &input.constraints_resource {
        let mut object_1646 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_1646,
            var_1645,
        );
        object_1646.finish();
    }
}

pub fn serialize_structure_model_explainability_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityAppSpecification,
) {
    if let Some(var_1647) = &input.image_uri {
        object.key("ImageUri").string(var_1647);
    }
    if let Some(var_1648) = &input.config_uri {
        object.key("ConfigUri").string(var_1648);
    }
    if let Some(var_1649) = &input.environment {
        let mut object_1650 = object.key("Environment").start_object();
        for (key_1651, value_1652) in var_1649 {
            {
                object_1650.key(key_1651).string(value_1652);
            }
        }
        object_1650.finish();
    }
}

pub fn serialize_structure_model_explainability_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelExplainabilityJobInput,
) {
    if let Some(var_1653) = &input.endpoint_input {
        let mut object_1654 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_1654, var_1653);
        object_1654.finish();
    }
}

pub fn serialize_structure_model_package_validation_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageValidationSpecification,
) {
    if let Some(var_1655) = &input.validation_role {
        object.key("ValidationRole").string(var_1655);
    }
    if let Some(var_1656) = &input.validation_profiles {
        let mut array_1657 = object.key("ValidationProfiles").start_array();
        for item_1658 in var_1656 {
            {
                let mut object_1659 = array_1657.value().start_object();
                crate::json_ser::serialize_structure_model_package_validation_profile(
                    &mut object_1659,
                    item_1658,
                );
                object_1659.finish();
            }
        }
        array_1657.finish();
    }
}

pub fn serialize_structure_source_algorithm_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceAlgorithmSpecification,
) {
    if let Some(var_1660) = &input.source_algorithms {
        let mut array_1661 = object.key("SourceAlgorithms").start_array();
        for item_1662 in var_1660 {
            {
                let mut object_1663 = array_1661.value().start_object();
                crate::json_ser::serialize_structure_source_algorithm(&mut object_1663, item_1662);
                object_1663.finish();
            }
        }
        array_1661.finish();
    }
}

pub fn serialize_structure_model_metrics(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelMetrics,
) {
    if let Some(var_1664) = &input.model_quality {
        let mut object_1665 = object.key("ModelQuality").start_object();
        crate::json_ser::serialize_structure_model_quality(&mut object_1665, var_1664);
        object_1665.finish();
    }
    if let Some(var_1666) = &input.model_data_quality {
        let mut object_1667 = object.key("ModelDataQuality").start_object();
        crate::json_ser::serialize_structure_model_data_quality(&mut object_1667, var_1666);
        object_1667.finish();
    }
    if let Some(var_1668) = &input.bias {
        let mut object_1669 = object.key("Bias").start_object();
        crate::json_ser::serialize_structure_bias(&mut object_1669, var_1668);
        object_1669.finish();
    }
    if let Some(var_1670) = &input.explainability {
        let mut object_1671 = object.key("Explainability").start_object();
        crate::json_ser::serialize_structure_explainability(&mut object_1671, var_1670);
        object_1671.finish();
    }
}

pub fn serialize_structure_model_quality_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityBaselineConfig,
) {
    if let Some(var_1672) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_1672);
    }
    if let Some(var_1673) = &input.constraints_resource {
        let mut object_1674 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_1674,
            var_1673,
        );
        object_1674.finish();
    }
}

pub fn serialize_structure_model_quality_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityAppSpecification,
) {
    if let Some(var_1675) = &input.image_uri {
        object.key("ImageUri").string(var_1675);
    }
    if let Some(var_1676) = &input.container_entrypoint {
        let mut array_1677 = object.key("ContainerEntrypoint").start_array();
        for item_1678 in var_1676 {
            {
                array_1677.value().string(item_1678);
            }
        }
        array_1677.finish();
    }
    if let Some(var_1679) = &input.container_arguments {
        let mut array_1680 = object.key("ContainerArguments").start_array();
        for item_1681 in var_1679 {
            {
                array_1680.value().string(item_1681);
            }
        }
        array_1680.finish();
    }
    if let Some(var_1682) = &input.record_preprocessor_source_uri {
        object.key("RecordPreprocessorSourceUri").string(var_1682);
    }
    if let Some(var_1683) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_1683);
    }
    if let Some(var_1684) = &input.problem_type {
        object.key("ProblemType").string(var_1684.as_str());
    }
    if let Some(var_1685) = &input.environment {
        let mut object_1686 = object.key("Environment").start_object();
        for (key_1687, value_1688) in var_1685 {
            {
                object_1686.key(key_1687).string(value_1688);
            }
        }
        object_1686.finish();
    }
}

pub fn serialize_structure_model_quality_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQualityJobInput,
) {
    if let Some(var_1689) = &input.endpoint_input {
        let mut object_1690 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_1690, var_1689);
        object_1690.finish();
    }
    if let Some(var_1691) = &input.ground_truth_s3_input {
        let mut object_1692 = object.key("GroundTruthS3Input").start_object();
        crate::json_ser::serialize_structure_monitoring_ground_truth_s3_input(
            &mut object_1692,
            var_1691,
        );
        object_1692.finish();
    }
}

pub fn serialize_structure_monitoring_schedule_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringScheduleConfig,
) {
    if let Some(var_1693) = &input.schedule_config {
        let mut object_1694 = object.key("ScheduleConfig").start_object();
        crate::json_ser::serialize_structure_schedule_config(&mut object_1694, var_1693);
        object_1694.finish();
    }
    if let Some(var_1695) = &input.monitoring_job_definition {
        let mut object_1696 = object.key("MonitoringJobDefinition").start_object();
        crate::json_ser::serialize_structure_monitoring_job_definition(&mut object_1696, var_1695);
        object_1696.finish();
    }
    if let Some(var_1697) = &input.monitoring_job_definition_name {
        object.key("MonitoringJobDefinitionName").string(var_1697);
    }
    if let Some(var_1698) = &input.monitoring_type {
        object.key("MonitoringType").string(var_1698.as_str());
    }
}

pub fn serialize_structure_notebook_instance_lifecycle_hook(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotebookInstanceLifecycleHook,
) {
    if let Some(var_1699) = &input.content {
        object.key("Content").string(var_1699);
    }
}

pub fn serialize_structure_processing_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingInput,
) {
    if let Some(var_1700) = &input.input_name {
        object.key("InputName").string(var_1700);
    }
    if input.app_managed {
        object.key("AppManaged").boolean(input.app_managed);
    }
    if let Some(var_1701) = &input.s3_input {
        let mut object_1702 = object.key("S3Input").start_object();
        crate::json_ser::serialize_structure_processing_s3_input(&mut object_1702, var_1701);
        object_1702.finish();
    }
    if let Some(var_1703) = &input.dataset_definition {
        let mut object_1704 = object.key("DatasetDefinition").start_object();
        crate::json_ser::serialize_structure_dataset_definition(&mut object_1704, var_1703);
        object_1704.finish();
    }
}

pub fn serialize_structure_processing_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingOutputConfig,
) {
    if let Some(var_1705) = &input.outputs {
        let mut array_1706 = object.key("Outputs").start_array();
        for item_1707 in var_1705 {
            {
                let mut object_1708 = array_1706.value().start_object();
                crate::json_ser::serialize_structure_processing_output(&mut object_1708, item_1707);
                object_1708.finish();
            }
        }
        array_1706.finish();
    }
    if let Some(var_1709) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1709);
    }
}

pub fn serialize_structure_processing_resources(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingResources,
) {
    if let Some(var_1710) = &input.cluster_config {
        let mut object_1711 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_processing_cluster_config(&mut object_1711, var_1710);
        object_1711.finish();
    }
}

pub fn serialize_structure_processing_stopping_condition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingStoppingCondition,
) {
    {
        object.key("MaxRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_runtime_in_seconds).into()),
        );
    }
}

pub fn serialize_structure_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AppSpecification,
) {
    if let Some(var_1712) = &input.image_uri {
        object.key("ImageUri").string(var_1712);
    }
    if let Some(var_1713) = &input.container_entrypoint {
        let mut array_1714 = object.key("ContainerEntrypoint").start_array();
        for item_1715 in var_1713 {
            {
                array_1714.value().string(item_1715);
            }
        }
        array_1714.finish();
    }
    if let Some(var_1716) = &input.container_arguments {
        let mut array_1717 = object.key("ContainerArguments").start_array();
        for item_1718 in var_1716 {
            {
                array_1717.value().string(item_1718);
            }
        }
        array_1717.finish();
    }
}

pub fn serialize_structure_network_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConfig,
) {
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if input.enable_network_isolation {
        object
            .key("EnableNetworkIsolation")
            .boolean(input.enable_network_isolation);
    }
    if let Some(var_1719) = &input.vpc_config {
        let mut object_1720 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_1720, var_1719);
        object_1720.finish();
    }
}

pub fn serialize_structure_experiment_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExperimentConfig,
) {
    if let Some(var_1721) = &input.experiment_name {
        object.key("ExperimentName").string(var_1721);
    }
    if let Some(var_1722) = &input.trial_name {
        object.key("TrialName").string(var_1722);
    }
    if let Some(var_1723) = &input.trial_component_display_name {
        object.key("TrialComponentDisplayName").string(var_1723);
    }
}

pub fn serialize_structure_service_catalog_provisioning_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceCatalogProvisioningDetails,
) {
    if let Some(var_1724) = &input.product_id {
        object.key("ProductId").string(var_1724);
    }
    if let Some(var_1725) = &input.provisioning_artifact_id {
        object.key("ProvisioningArtifactId").string(var_1725);
    }
    if let Some(var_1726) = &input.path_id {
        object.key("PathId").string(var_1726);
    }
    if let Some(var_1727) = &input.provisioning_parameters {
        let mut array_1728 = object.key("ProvisioningParameters").start_array();
        for item_1729 in var_1727 {
            {
                let mut object_1730 = array_1728.value().start_object();
                crate::json_ser::serialize_structure_provisioning_parameter(
                    &mut object_1730,
                    item_1729,
                );
                object_1730.finish();
            }
        }
        array_1728.finish();
    }
}

pub fn serialize_structure_algorithm_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmSpecification,
) {
    if let Some(var_1731) = &input.training_image {
        object.key("TrainingImage").string(var_1731);
    }
    if let Some(var_1732) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_1732);
    }
    if let Some(var_1733) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_1733.as_str());
    }
    if let Some(var_1734) = &input.metric_definitions {
        let mut array_1735 = object.key("MetricDefinitions").start_array();
        for item_1736 in var_1734 {
            {
                let mut object_1737 = array_1735.value().start_object();
                crate::json_ser::serialize_structure_metric_definition(&mut object_1737, item_1736);
                object_1737.finish();
            }
        }
        array_1735.finish();
    }
    if input.enable_sage_maker_metrics_time_series {
        object
            .key("EnableSageMakerMetricsTimeSeries")
            .boolean(input.enable_sage_maker_metrics_time_series);
    }
}

pub fn serialize_structure_channel(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Channel,
) {
    if let Some(var_1738) = &input.channel_name {
        object.key("ChannelName").string(var_1738);
    }
    if let Some(var_1739) = &input.data_source {
        let mut object_1740 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_data_source(&mut object_1740, var_1739);
        object_1740.finish();
    }
    if let Some(var_1741) = &input.content_type {
        object.key("ContentType").string(var_1741);
    }
    if let Some(var_1742) = &input.compression_type {
        object.key("CompressionType").string(var_1742.as_str());
    }
    if let Some(var_1743) = &input.record_wrapper_type {
        object.key("RecordWrapperType").string(var_1743.as_str());
    }
    if let Some(var_1744) = &input.input_mode {
        object.key("InputMode").string(var_1744.as_str());
    }
    if let Some(var_1745) = &input.shuffle_config {
        let mut object_1746 = object.key("ShuffleConfig").start_object();
        crate::json_ser::serialize_structure_shuffle_config(&mut object_1746, var_1745);
        object_1746.finish();
    }
}

pub fn serialize_structure_output_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputDataConfig,
) {
    if let Some(var_1747) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1747);
    }
    if let Some(var_1748) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1748);
    }
}

pub fn serialize_structure_resource_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceConfig,
) {
    if let Some(var_1749) = &input.instance_type {
        object.key("InstanceType").string(var_1749.as_str());
    }
    {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_1750) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1750);
    }
}

pub fn serialize_structure_checkpoint_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CheckpointConfig,
) {
    if let Some(var_1751) = &input.s3_uri {
        object.key("S3Uri").string(var_1751);
    }
    if let Some(var_1752) = &input.local_path {
        object.key("LocalPath").string(var_1752);
    }
}

pub fn serialize_structure_debug_hook_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DebugHookConfig,
) {
    if let Some(var_1753) = &input.local_path {
        object.key("LocalPath").string(var_1753);
    }
    if let Some(var_1754) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1754);
    }
    if let Some(var_1755) = &input.hook_parameters {
        let mut object_1756 = object.key("HookParameters").start_object();
        for (key_1757, value_1758) in var_1755 {
            {
                object_1756.key(key_1757).string(value_1758);
            }
        }
        object_1756.finish();
    }
    if let Some(var_1759) = &input.collection_configurations {
        let mut array_1760 = object.key("CollectionConfigurations").start_array();
        for item_1761 in var_1759 {
            {
                let mut object_1762 = array_1760.value().start_object();
                crate::json_ser::serialize_structure_collection_configuration(
                    &mut object_1762,
                    item_1761,
                );
                object_1762.finish();
            }
        }
        array_1760.finish();
    }
}

pub fn serialize_structure_debug_rule_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DebugRuleConfiguration,
) {
    if let Some(var_1763) = &input.rule_configuration_name {
        object.key("RuleConfigurationName").string(var_1763);
    }
    if let Some(var_1764) = &input.local_path {
        object.key("LocalPath").string(var_1764);
    }
    if let Some(var_1765) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1765);
    }
    if let Some(var_1766) = &input.rule_evaluator_image {
        object.key("RuleEvaluatorImage").string(var_1766);
    }
    if let Some(var_1767) = &input.instance_type {
        object.key("InstanceType").string(var_1767.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_1768) = &input.rule_parameters {
        let mut object_1769 = object.key("RuleParameters").start_object();
        for (key_1770, value_1771) in var_1768 {
            {
                object_1769.key(key_1770).string(value_1771);
            }
        }
        object_1769.finish();
    }
}

pub fn serialize_structure_tensor_board_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TensorBoardOutputConfig,
) {
    if let Some(var_1772) = &input.local_path {
        object.key("LocalPath").string(var_1772);
    }
    if let Some(var_1773) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1773);
    }
}

pub fn serialize_structure_profiler_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerConfig,
) {
    if let Some(var_1774) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1774);
    }
    if let Some(var_1775) = &input.profiling_interval_in_milliseconds {
        object.key("ProfilingIntervalInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1775).into()),
        );
    }
    if let Some(var_1776) = &input.profiling_parameters {
        let mut object_1777 = object.key("ProfilingParameters").start_object();
        for (key_1778, value_1779) in var_1776 {
            {
                object_1777.key(key_1778).string(value_1779);
            }
        }
        object_1777.finish();
    }
}

pub fn serialize_structure_profiler_rule_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerRuleConfiguration,
) {
    if let Some(var_1780) = &input.rule_configuration_name {
        object.key("RuleConfigurationName").string(var_1780);
    }
    if let Some(var_1781) = &input.local_path {
        object.key("LocalPath").string(var_1781);
    }
    if let Some(var_1782) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1782);
    }
    if let Some(var_1783) = &input.rule_evaluator_image {
        object.key("RuleEvaluatorImage").string(var_1783);
    }
    if let Some(var_1784) = &input.instance_type {
        object.key("InstanceType").string(var_1784.as_str());
    }
    if input.volume_size_in_gb != 0 {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.volume_size_in_gb).into()),
        );
    }
    if let Some(var_1785) = &input.rule_parameters {
        let mut object_1786 = object.key("RuleParameters").start_object();
        for (key_1787, value_1788) in var_1785 {
            {
                object_1786.key(key_1787).string(value_1788);
            }
        }
        object_1786.finish();
    }
}

pub fn serialize_structure_retry_strategy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetryStrategy,
) {
    {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.maximum_retry_attempts).into()),
        );
    }
}

pub fn serialize_structure_model_client_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelClientConfig,
) {
    if let Some(var_1789) = &input.invocations_timeout_in_seconds {
        object.key("InvocationsTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1789).into()),
        );
    }
    if let Some(var_1790) = &input.invocations_max_retries {
        object.key("InvocationsMaxRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1790).into()),
        );
    }
}

pub fn serialize_structure_transform_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformInput,
) {
    if let Some(var_1791) = &input.data_source {
        let mut object_1792 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_transform_data_source(&mut object_1792, var_1791);
        object_1792.finish();
    }
    if let Some(var_1793) = &input.content_type {
        object.key("ContentType").string(var_1793);
    }
    if let Some(var_1794) = &input.compression_type {
        object.key("CompressionType").string(var_1794.as_str());
    }
    if let Some(var_1795) = &input.split_type {
        object.key("SplitType").string(var_1795.as_str());
    }
}

pub fn serialize_structure_transform_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformOutput,
) {
    if let Some(var_1796) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1796);
    }
    if let Some(var_1797) = &input.accept {
        object.key("Accept").string(var_1797);
    }
    if let Some(var_1798) = &input.assemble_with {
        object.key("AssembleWith").string(var_1798.as_str());
    }
    if let Some(var_1799) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1799);
    }
}

pub fn serialize_structure_transform_resources(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformResources,
) {
    if let Some(var_1800) = &input.instance_type {
        object.key("InstanceType").string(var_1800.as_str());
    }
    if let Some(var_1801) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1801).into()),
        );
    }
    if let Some(var_1802) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1802);
    }
}

pub fn serialize_structure_data_processing(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataProcessing,
) {
    if let Some(var_1803) = &input.input_filter {
        object.key("InputFilter").string(var_1803);
    }
    if let Some(var_1804) = &input.output_filter {
        object.key("OutputFilter").string(var_1804);
    }
    if let Some(var_1805) = &input.join_source {
        object.key("JoinSource").string(var_1805.as_str());
    }
}

pub fn serialize_structure_trial_component_status(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentStatus,
) {
    if let Some(var_1806) = &input.primary_status {
        object.key("PrimaryStatus").string(var_1806.as_str());
    }
    if let Some(var_1807) = &input.message {
        object.key("Message").string(var_1807);
    }
}

pub fn serialize_union_trial_component_parameter_value(
    object_566: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentParameterValue,
) {
    match input {
        crate::model::TrialComponentParameterValue::StringValue(inner) => {
            object_566.key("StringValue").string(inner);
        }
        crate::model::TrialComponentParameterValue::NumberValue(inner) => {
            object_566.key("NumberValue").number(
                #[allow(clippy::useless_conversion)]
                smithy_types::Number::Float((*inner).into()),
            );
        }
    }
}

pub fn serialize_structure_trial_component_artifact(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrialComponentArtifact,
) {
    if let Some(var_1808) = &input.media_type {
        object.key("MediaType").string(var_1808);
    }
    if let Some(var_1809) = &input.value {
        object.key("Value").string(var_1809);
    }
}

pub fn serialize_structure_cognito_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CognitoConfig,
) {
    if let Some(var_1810) = &input.user_pool {
        object.key("UserPool").string(var_1810);
    }
    if let Some(var_1811) = &input.client_id {
        object.key("ClientId").string(var_1811);
    }
}

pub fn serialize_structure_oidc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OidcConfig,
) {
    if let Some(var_1812) = &input.client_id {
        object.key("ClientId").string(var_1812);
    }
    if let Some(var_1813) = &input.client_secret {
        object.key("ClientSecret").string(var_1813);
    }
    if let Some(var_1814) = &input.issuer {
        object.key("Issuer").string(var_1814);
    }
    if let Some(var_1815) = &input.authorization_endpoint {
        object.key("AuthorizationEndpoint").string(var_1815);
    }
    if let Some(var_1816) = &input.token_endpoint {
        object.key("TokenEndpoint").string(var_1816);
    }
    if let Some(var_1817) = &input.user_info_endpoint {
        object.key("UserInfoEndpoint").string(var_1817);
    }
    if let Some(var_1818) = &input.logout_endpoint {
        object.key("LogoutEndpoint").string(var_1818);
    }
    if let Some(var_1819) = &input.jwks_uri {
        object.key("JwksUri").string(var_1819);
    }
}

pub fn serialize_structure_source_ip_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceIpConfig,
) {
    if let Some(var_1820) = &input.cidrs {
        let mut array_1821 = object.key("Cidrs").start_array();
        for item_1822 in var_1820 {
            {
                array_1821.value().string(item_1822);
            }
        }
        array_1821.finish();
    }
}

pub fn serialize_structure_member_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberDefinition,
) {
    if let Some(var_1823) = &input.cognito_member_definition {
        let mut object_1824 = object.key("CognitoMemberDefinition").start_object();
        crate::json_ser::serialize_structure_cognito_member_definition(&mut object_1824, var_1823);
        object_1824.finish();
    }
    if let Some(var_1825) = &input.oidc_member_definition {
        let mut object_1826 = object.key("OidcMemberDefinition").start_object();
        crate::json_ser::serialize_structure_oidc_member_definition(&mut object_1826, var_1825);
        object_1826.finish();
    }
}

pub fn serialize_structure_notification_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationConfiguration,
) {
    if let Some(var_1827) = &input.notification_topic_arn {
        object.key("NotificationTopicArn").string(var_1827);
    }
}

pub fn serialize_structure_retention_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetentionPolicy,
) {
    if let Some(var_1828) = &input.home_efs_file_system {
        object.key("HomeEfsFileSystem").string(var_1828.as_str());
    }
}

pub fn serialize_structure_suggestion_query(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SuggestionQuery,
) {
    if let Some(var_1829) = &input.property_name_query {
        let mut object_1830 = object.key("PropertyNameQuery").start_object();
        crate::json_ser::serialize_structure_property_name_query(&mut object_1830, var_1829);
        object_1830.finish();
    }
}

pub fn serialize_structure_device(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Device,
) {
    if let Some(var_1831) = &input.device_name {
        object.key("DeviceName").string(var_1831);
    }
    if let Some(var_1832) = &input.description {
        object.key("Description").string(var_1832);
    }
    if let Some(var_1833) = &input.iot_thing_name {
        object.key("IotThingName").string(var_1833);
    }
}

pub fn serialize_structure_renderable_task(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RenderableTask,
) {
    if let Some(var_1834) = &input.input {
        object.key("Input").string(var_1834);
    }
}

pub fn serialize_structure_search_expression(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SearchExpression,
) {
    if let Some(var_1835) = &input.filters {
        let mut array_1836 = object.key("Filters").start_array();
        for item_1837 in var_1835 {
            {
                let mut object_1838 = array_1836.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_1838, item_1837);
                object_1838.finish();
            }
        }
        array_1836.finish();
    }
    if let Some(var_1839) = &input.nested_filters {
        let mut array_1840 = object.key("NestedFilters").start_array();
        for item_1841 in var_1839 {
            {
                let mut object_1842 = array_1840.value().start_object();
                crate::json_ser::serialize_structure_nested_filters(&mut object_1842, item_1841);
                object_1842.finish();
            }
        }
        array_1840.finish();
    }
    if let Some(var_1843) = &input.sub_expressions {
        let mut array_1844 = object.key("SubExpressions").start_array();
        for item_1845 in var_1843 {
            {
                let mut object_1846 = array_1844.value().start_object();
                crate::json_ser::serialize_structure_search_expression(&mut object_1846, item_1845);
                object_1846.finish();
            }
        }
        array_1844.finish();
    }
    if let Some(var_1847) = &input.operator {
        object.key("Operator").string(var_1847.as_str());
    }
}

pub fn serialize_structure_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Parameter,
) {
    if let Some(var_1848) = &input.name {
        object.key("Name").string(var_1848);
    }
    if let Some(var_1849) = &input.value {
        object.key("Value").string(var_1849);
    }
}

pub fn serialize_structure_git_config_for_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitConfigForUpdate,
) {
    if let Some(var_1850) = &input.secret_arn {
        object.key("SecretArn").string(var_1850);
    }
}

pub fn serialize_structure_variant_property(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VariantProperty,
) {
    if let Some(var_1851) = &input.variant_property_type {
        object.key("VariantPropertyType").string(var_1851.as_str());
    }
}

pub fn serialize_structure_deployment_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentConfig,
) {
    if let Some(var_1852) = &input.blue_green_update_policy {
        let mut object_1853 = object.key("BlueGreenUpdatePolicy").start_object();
        crate::json_ser::serialize_structure_blue_green_update_policy(&mut object_1853, var_1852);
        object_1853.finish();
    }
    if let Some(var_1854) = &input.auto_rollback_configuration {
        let mut object_1855 = object.key("AutoRollbackConfiguration").start_object();
        crate::json_ser::serialize_structure_auto_rollback_config(&mut object_1855, var_1854);
        object_1855.finish();
    }
}

pub fn serialize_structure_desired_weight_and_capacity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DesiredWeightAndCapacity,
) {
    if let Some(var_1856) = &input.variant_name {
        object.key("VariantName").string(var_1856);
    }
    if let Some(var_1857) = &input.desired_weight {
        object.key("DesiredWeight").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1857).into()),
        );
    }
    if let Some(var_1858) = &input.desired_instance_count {
        object.key("DesiredInstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1858).into()),
        );
    }
}

pub fn serialize_structure_profiler_config_for_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProfilerConfigForUpdate,
) {
    if let Some(var_1859) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1859);
    }
    if let Some(var_1860) = &input.profiling_interval_in_milliseconds {
        object.key("ProfilingIntervalInMilliseconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1860).into()),
        );
    }
    if let Some(var_1861) = &input.profiling_parameters {
        let mut object_1862 = object.key("ProfilingParameters").start_object();
        for (key_1863, value_1864) in var_1861 {
            {
                object_1862.key(key_1863).string(value_1864);
            }
        }
        object_1862.finish();
    }
    if input.disable_profiler {
        object
            .key("DisableProfiler")
            .boolean(input.disable_profiler);
    }
}

pub fn serialize_structure_hyper_parameter_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterSpecification,
) {
    if let Some(var_1865) = &input.name {
        object.key("Name").string(var_1865);
    }
    if let Some(var_1866) = &input.description {
        object.key("Description").string(var_1866);
    }
    if let Some(var_1867) = &input.r#type {
        object.key("Type").string(var_1867.as_str());
    }
    if let Some(var_1868) = &input.range {
        let mut object_1869 = object.key("Range").start_object();
        crate::json_ser::serialize_structure_parameter_range(&mut object_1869, var_1868);
        object_1869.finish();
    }
    if input.is_tunable {
        object.key("IsTunable").boolean(input.is_tunable);
    }
    if input.is_required {
        object.key("IsRequired").boolean(input.is_required);
    }
    if let Some(var_1870) = &input.default_value {
        object.key("DefaultValue").string(var_1870);
    }
}

pub fn serialize_structure_metric_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricDefinition,
) {
    if let Some(var_1871) = &input.name {
        object.key("Name").string(var_1871);
    }
    if let Some(var_1872) = &input.regex {
        object.key("Regex").string(var_1872);
    }
}

pub fn serialize_structure_channel_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChannelSpecification,
) {
    if let Some(var_1873) = &input.name {
        object.key("Name").string(var_1873);
    }
    if let Some(var_1874) = &input.description {
        object.key("Description").string(var_1874);
    }
    if input.is_required {
        object.key("IsRequired").boolean(input.is_required);
    }
    if let Some(var_1875) = &input.supported_content_types {
        let mut array_1876 = object.key("SupportedContentTypes").start_array();
        for item_1877 in var_1875 {
            {
                array_1876.value().string(item_1877);
            }
        }
        array_1876.finish();
    }
    if let Some(var_1878) = &input.supported_compression_types {
        let mut array_1879 = object.key("SupportedCompressionTypes").start_array();
        for item_1880 in var_1878 {
            {
                array_1879.value().string(item_1880.as_str());
            }
        }
        array_1879.finish();
    }
    if let Some(var_1881) = &input.supported_input_modes {
        let mut array_1882 = object.key("SupportedInputModes").start_array();
        for item_1883 in var_1881 {
            {
                array_1882.value().string(item_1883.as_str());
            }
        }
        array_1882.finish();
    }
}

pub fn serialize_structure_hyper_parameter_tuning_job_objective(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobObjective,
) {
    if let Some(var_1884) = &input.r#type {
        object.key("Type").string(var_1884.as_str());
    }
    if let Some(var_1885) = &input.metric_name {
        object.key("MetricName").string(var_1885);
    }
}

pub fn serialize_structure_model_package_container_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageContainerDefinition,
) {
    if let Some(var_1886) = &input.container_hostname {
        object.key("ContainerHostname").string(var_1886);
    }
    if let Some(var_1887) = &input.image {
        object.key("Image").string(var_1887);
    }
    if let Some(var_1888) = &input.image_digest {
        object.key("ImageDigest").string(var_1888);
    }
    if let Some(var_1889) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_1889);
    }
    if let Some(var_1890) = &input.product_id {
        object.key("ProductId").string(var_1890);
    }
}

pub fn serialize_structure_algorithm_validation_profile(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlgorithmValidationProfile,
) {
    if let Some(var_1891) = &input.profile_name {
        object.key("ProfileName").string(var_1891);
    }
    if let Some(var_1892) = &input.training_job_definition {
        let mut object_1893 = object.key("TrainingJobDefinition").start_object();
        crate::json_ser::serialize_structure_training_job_definition(&mut object_1893, var_1892);
        object_1893.finish();
    }
    if let Some(var_1894) = &input.transform_job_definition {
        let mut object_1895 = object.key("TransformJobDefinition").start_object();
        crate::json_ser::serialize_structure_transform_job_definition(&mut object_1895, var_1894);
        object_1895.finish();
    }
}

pub fn serialize_structure_kernel_spec(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelSpec,
) {
    if let Some(var_1896) = &input.name {
        object.key("Name").string(var_1896);
    }
    if let Some(var_1897) = &input.display_name {
        object.key("DisplayName").string(var_1897);
    }
}

pub fn serialize_structure_file_system_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSystemConfig,
) {
    if let Some(var_1898) = &input.mount_path {
        object.key("MountPath").string(var_1898);
    }
    if let Some(var_1899) = &input.default_uid {
        object.key("DefaultUid").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1899).into()),
        );
    }
    if let Some(var_1900) = &input.default_gid {
        object.key("DefaultGid").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1900).into()),
        );
    }
}

pub fn serialize_structure_artifact_source_type(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArtifactSourceType,
) {
    if let Some(var_1901) = &input.source_id_type {
        object.key("SourceIdType").string(var_1901.as_str());
    }
    if let Some(var_1902) = &input.value {
        object.key("Value").string(var_1902);
    }
}

pub fn serialize_structure_auto_ml_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMLDataSource,
) {
    if let Some(var_1903) = &input.s3_data_source {
        let mut object_1904 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_auto_mls3_data_source(&mut object_1904, var_1903);
        object_1904.finish();
    }
}

pub fn serialize_structure_auto_ml_job_completion_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMLJobCompletionCriteria,
) {
    if let Some(var_1905) = &input.max_candidates {
        object.key("MaxCandidates").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1905).into()),
        );
    }
    if let Some(var_1906) = &input.max_runtime_per_training_job_in_seconds {
        object.key("MaxRuntimePerTrainingJobInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1906).into()),
        );
    }
    if let Some(var_1907) = &input.max_auto_ml_job_runtime_in_seconds {
        object.key("MaxAutoMLJobRuntimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1907).into()),
        );
    }
}

pub fn serialize_structure_auto_ml_security_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMLSecurityConfig,
) {
    if let Some(var_1908) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1908);
    }
    if input.enable_inter_container_traffic_encryption {
        object
            .key("EnableInterContainerTrafficEncryption")
            .boolean(input.enable_inter_container_traffic_encryption);
    }
    if let Some(var_1909) = &input.vpc_config {
        let mut object_1910 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config(&mut object_1910, var_1909);
        object_1910.finish();
    }
}

pub fn serialize_structure_target_platform(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TargetPlatform,
) {
    if let Some(var_1911) = &input.os {
        object.key("Os").string(var_1911.as_str());
    }
    if let Some(var_1912) = &input.arch {
        object.key("Arch").string(var_1912.as_str());
    }
    if let Some(var_1913) = &input.accelerator {
        object.key("Accelerator").string(var_1913.as_str());
    }
}

pub fn serialize_structure_monitoring_constraints_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringConstraintsResource,
) {
    if let Some(var_1914) = &input.s3_uri {
        object.key("S3Uri").string(var_1914);
    }
}

pub fn serialize_structure_monitoring_statistics_resource(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringStatisticsResource,
) {
    if let Some(var_1915) = &input.s3_uri {
        object.key("S3Uri").string(var_1915);
    }
}

pub fn serialize_structure_endpoint_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointInput,
) {
    if let Some(var_1916) = &input.endpoint_name {
        object.key("EndpointName").string(var_1916);
    }
    if let Some(var_1917) = &input.local_path {
        object.key("LocalPath").string(var_1917);
    }
    if let Some(var_1918) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_1918.as_str());
    }
    if let Some(var_1919) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_1919.as_str());
    }
    if let Some(var_1920) = &input.features_attribute {
        object.key("FeaturesAttribute").string(var_1920);
    }
    if let Some(var_1921) = &input.inference_attribute {
        object.key("InferenceAttribute").string(var_1921);
    }
    if let Some(var_1922) = &input.probability_attribute {
        object.key("ProbabilityAttribute").string(var_1922);
    }
    if let Some(var_1923) = &input.probability_threshold_attribute {
        object.key("ProbabilityThresholdAttribute").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1923).into()),
        );
    }
    if let Some(var_1924) = &input.start_time_offset {
        object.key("StartTimeOffset").string(var_1924);
    }
    if let Some(var_1925) = &input.end_time_offset {
        object.key("EndTimeOffset").string(var_1925);
    }
}

pub fn serialize_structure_monitoring_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringOutput,
) {
    if let Some(var_1926) = &input.s3_output {
        let mut object_1927 = object.key("S3Output").start_object();
        crate::json_ser::serialize_structure_monitoring_s3_output(&mut object_1927, var_1926);
        object_1927.finish();
    }
}

pub fn serialize_structure_monitoring_cluster_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringClusterConfig,
) {
    if let Some(var_1928) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1928).into()),
        );
    }
    if let Some(var_1929) = &input.instance_type {
        object.key("InstanceType").string(var_1929.as_str());
    }
    if let Some(var_1930) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1930).into()),
        );
    }
    if let Some(var_1931) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1931);
    }
}

pub fn serialize_structure_sharing_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SharingSettings,
) {
    if let Some(var_1932) = &input.notebook_output_option {
        object.key("NotebookOutputOption").string(var_1932.as_str());
    }
    if let Some(var_1933) = &input.s3_output_path {
        object.key("S3OutputPath").string(var_1933);
    }
    if let Some(var_1934) = &input.s3_kms_key_id {
        object.key("S3KmsKeyId").string(var_1934);
    }
}

pub fn serialize_structure_jupyter_server_app_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JupyterServerAppSettings,
) {
    if let Some(var_1935) = &input.default_resource_spec {
        let mut object_1936 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_resource_spec(&mut object_1936, var_1935);
        object_1936.finish();
    }
}

pub fn serialize_structure_kernel_gateway_app_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KernelGatewayAppSettings,
) {
    if let Some(var_1937) = &input.default_resource_spec {
        let mut object_1938 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_resource_spec(&mut object_1938, var_1937);
        object_1938.finish();
    }
    if let Some(var_1939) = &input.custom_images {
        let mut array_1940 = object.key("CustomImages").start_array();
        for item_1941 in var_1939 {
            {
                let mut object_1942 = array_1940.value().start_object();
                crate::json_ser::serialize_structure_custom_image(&mut object_1942, item_1941);
                object_1942.finish();
            }
        }
        array_1940.finish();
    }
}

pub fn serialize_structure_tensor_board_app_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TensorBoardAppSettings,
) {
    if let Some(var_1943) = &input.default_resource_spec {
        let mut object_1944 = object.key("DefaultResourceSpec").start_object();
        crate::json_ser::serialize_structure_resource_spec(&mut object_1944, var_1943);
        object_1944.finish();
    }
}

pub fn serialize_structure_production_variant_core_dump_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductionVariantCoreDumpConfig,
) {
    if let Some(var_1945) = &input.destination_s3_uri {
        object.key("DestinationS3Uri").string(var_1945);
    }
    if let Some(var_1946) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1946);
    }
}

pub fn serialize_structure_capture_option(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptureOption,
) {
    if let Some(var_1947) = &input.capture_mode {
        object.key("CaptureMode").string(var_1947.as_str());
    }
}

pub fn serialize_structure_capture_content_type_header(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CaptureContentTypeHeader,
) {
    if let Some(var_1948) = &input.csv_content_types {
        let mut array_1949 = object.key("CsvContentTypes").start_array();
        for item_1950 in var_1948 {
            {
                array_1949.value().string(item_1950);
            }
        }
        array_1949.finish();
    }
    if let Some(var_1951) = &input.json_content_types {
        let mut array_1952 = object.key("JsonContentTypes").start_array();
        for item_1953 in var_1951 {
            {
                array_1952.value().string(item_1953);
            }
        }
        array_1952.finish();
    }
}

pub fn serialize_structure_online_store_security_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnlineStoreSecurityConfig,
) {
    if let Some(var_1954) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1954);
    }
}

pub fn serialize_structure_s3_storage_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3StorageConfig,
) {
    if let Some(var_1955) = &input.s3_uri {
        object.key("S3Uri").string(var_1955);
    }
    if let Some(var_1956) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1956);
    }
    if let Some(var_1957) = &input.resolved_output_s3_uri {
        object.key("ResolvedOutputS3Uri").string(var_1957);
    }
}

pub fn serialize_structure_data_catalog_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCatalogConfig,
) {
    if let Some(var_1958) = &input.table_name {
        object.key("TableName").string(var_1958);
    }
    if let Some(var_1959) = &input.catalog {
        object.key("Catalog").string(var_1959);
    }
    if let Some(var_1960) = &input.database {
        object.key("Database").string(var_1960);
    }
}

pub fn serialize_structure_human_loop_activation_conditions_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopActivationConditionsConfig,
) {
    if let Some(var_1961) = &input.human_loop_activation_conditions {
        object.key("HumanLoopActivationConditions").string(var_1961);
    }
}

pub fn serialize_structure_public_workforce_task_price(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PublicWorkforceTaskPrice,
) {
    if let Some(var_1962) = &input.amount_in_usd {
        let mut object_1963 = object.key("AmountInUsd").start_object();
        crate::json_ser::serialize_structure_usd(&mut object_1963, var_1962);
        object_1963.finish();
    }
}

pub fn serialize_structure_resource_limits(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceLimits,
) {
    {
        object.key("MaxNumberOfTrainingJobs").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_number_of_training_jobs).into()),
        );
    }
    {
        object.key("MaxParallelTrainingJobs").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_parallel_training_jobs).into()),
        );
    }
}

pub fn serialize_structure_parameter_ranges(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterRanges,
) {
    if let Some(var_1964) = &input.integer_parameter_ranges {
        let mut array_1965 = object.key("IntegerParameterRanges").start_array();
        for item_1966 in var_1964 {
            {
                let mut object_1967 = array_1965.value().start_object();
                crate::json_ser::serialize_structure_integer_parameter_range(
                    &mut object_1967,
                    item_1966,
                );
                object_1967.finish();
            }
        }
        array_1965.finish();
    }
    if let Some(var_1968) = &input.continuous_parameter_ranges {
        let mut array_1969 = object.key("ContinuousParameterRanges").start_array();
        for item_1970 in var_1968 {
            {
                let mut object_1971 = array_1969.value().start_object();
                crate::json_ser::serialize_structure_continuous_parameter_range(
                    &mut object_1971,
                    item_1970,
                );
                object_1971.finish();
            }
        }
        array_1969.finish();
    }
    if let Some(var_1972) = &input.categorical_parameter_ranges {
        let mut array_1973 = object.key("CategoricalParameterRanges").start_array();
        for item_1974 in var_1972 {
            {
                let mut object_1975 = array_1973.value().start_object();
                crate::json_ser::serialize_structure_categorical_parameter_range(
                    &mut object_1975,
                    item_1974,
                );
                object_1975.finish();
            }
        }
        array_1973.finish();
    }
}

pub fn serialize_structure_tuning_job_completion_criteria(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TuningJobCompletionCriteria,
) {
    if let Some(var_1976) = &input.target_objective_metric_value {
        object.key("TargetObjectiveMetricValue").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1976).into()),
        );
    }
}

pub fn serialize_structure_hyper_parameter_algorithm_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterAlgorithmSpecification,
) {
    if let Some(var_1977) = &input.training_image {
        object.key("TrainingImage").string(var_1977);
    }
    if let Some(var_1978) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_1978.as_str());
    }
    if let Some(var_1979) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_1979);
    }
    if let Some(var_1980) = &input.metric_definitions {
        let mut array_1981 = object.key("MetricDefinitions").start_array();
        for item_1982 in var_1980 {
            {
                let mut object_1983 = array_1981.value().start_object();
                crate::json_ser::serialize_structure_metric_definition(&mut object_1983, item_1982);
                object_1983.finish();
            }
        }
        array_1981.finish();
    }
}

pub fn serialize_structure_parent_hyper_parameter_tuning_job(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParentHyperParameterTuningJob,
) {
    if let Some(var_1984) = &input.hyper_parameter_tuning_job_name {
        object.key("HyperParameterTuningJobName").string(var_1984);
    }
}

pub fn serialize_structure_labeling_job_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobDataSource,
) {
    if let Some(var_1985) = &input.s3_data_source {
        let mut object_1986 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_labeling_job_s3_data_source(
            &mut object_1986,
            var_1985,
        );
        object_1986.finish();
    }
    if let Some(var_1987) = &input.sns_data_source {
        let mut object_1988 = object.key("SnsDataSource").start_object();
        crate::json_ser::serialize_structure_labeling_job_sns_data_source(
            &mut object_1988,
            var_1987,
        );
        object_1988.finish();
    }
}

pub fn serialize_structure_labeling_job_data_attributes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobDataAttributes,
) {
    if let Some(var_1989) = &input.content_classifiers {
        let mut array_1990 = object.key("ContentClassifiers").start_array();
        for item_1991 in var_1989 {
            {
                array_1990.value().string(item_1991.as_str());
            }
        }
        array_1990.finish();
    }
}

pub fn serialize_structure_labeling_job_resource_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobResourceConfig,
) {
    if let Some(var_1992) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_1992);
    }
}

pub fn serialize_structure_ui_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UiConfig,
) {
    if let Some(var_1993) = &input.ui_template_s3_uri {
        object.key("UiTemplateS3Uri").string(var_1993);
    }
    if let Some(var_1994) = &input.human_task_ui_arn {
        object.key("HumanTaskUiArn").string(var_1994);
    }
}

pub fn serialize_structure_annotation_consolidation_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnnotationConsolidationConfig,
) {
    if let Some(var_1995) = &input.annotation_consolidation_lambda_arn {
        object
            .key("AnnotationConsolidationLambdaArn")
            .string(var_1995);
    }
}

pub fn serialize_structure_image_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageConfig,
) {
    if let Some(var_1996) = &input.repository_access_mode {
        object.key("RepositoryAccessMode").string(var_1996.as_str());
    }
    if let Some(var_1997) = &input.repository_auth_config {
        let mut object_1998 = object.key("RepositoryAuthConfig").start_object();
        crate::json_ser::serialize_structure_repository_auth_config(&mut object_1998, var_1997);
        object_1998.finish();
    }
}

pub fn serialize_structure_multi_model_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultiModelConfig,
) {
    if let Some(var_1999) = &input.model_cache_setting {
        object.key("ModelCacheSetting").string(var_1999.as_str());
    }
}

pub fn serialize_structure_monitoring_ground_truth_s3_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringGroundTruthS3Input,
) {
    if let Some(var_2000) = &input.s3_uri {
        object.key("S3Uri").string(var_2000);
    }
}

pub fn serialize_structure_model_package_validation_profile(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackageValidationProfile,
) {
    if let Some(var_2001) = &input.profile_name {
        object.key("ProfileName").string(var_2001);
    }
    if let Some(var_2002) = &input.transform_job_definition {
        let mut object_2003 = object.key("TransformJobDefinition").start_object();
        crate::json_ser::serialize_structure_transform_job_definition(&mut object_2003, var_2002);
        object_2003.finish();
    }
}

pub fn serialize_structure_source_algorithm(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceAlgorithm,
) {
    if let Some(var_2004) = &input.model_data_url {
        object.key("ModelDataUrl").string(var_2004);
    }
    if let Some(var_2005) = &input.algorithm_name {
        object.key("AlgorithmName").string(var_2005);
    }
}

pub fn serialize_structure_model_quality(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelQuality,
) {
    if let Some(var_2006) = &input.statistics {
        let mut object_2007 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2007, var_2006);
        object_2007.finish();
    }
    if let Some(var_2008) = &input.constraints {
        let mut object_2009 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2009, var_2008);
        object_2009.finish();
    }
}

pub fn serialize_structure_model_data_quality(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelDataQuality,
) {
    if let Some(var_2010) = &input.statistics {
        let mut object_2011 = object.key("Statistics").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2011, var_2010);
        object_2011.finish();
    }
    if let Some(var_2012) = &input.constraints {
        let mut object_2013 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2013, var_2012);
        object_2013.finish();
    }
}

pub fn serialize_structure_bias(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Bias,
) {
    if let Some(var_2014) = &input.report {
        let mut object_2015 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2015, var_2014);
        object_2015.finish();
    }
}

pub fn serialize_structure_explainability(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Explainability,
) {
    if let Some(var_2016) = &input.report {
        let mut object_2017 = object.key("Report").start_object();
        crate::json_ser::serialize_structure_metrics_source(&mut object_2017, var_2016);
        object_2017.finish();
    }
}

pub fn serialize_structure_schedule_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScheduleConfig,
) {
    if let Some(var_2018) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_2018);
    }
}

pub fn serialize_structure_monitoring_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringJobDefinition,
) {
    if let Some(var_2019) = &input.baseline_config {
        let mut object_2020 = object.key("BaselineConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_baseline_config(&mut object_2020, var_2019);
        object_2020.finish();
    }
    if let Some(var_2021) = &input.monitoring_inputs {
        let mut array_2022 = object.key("MonitoringInputs").start_array();
        for item_2023 in var_2021 {
            {
                let mut object_2024 = array_2022.value().start_object();
                crate::json_ser::serialize_structure_monitoring_input(&mut object_2024, item_2023);
                object_2024.finish();
            }
        }
        array_2022.finish();
    }
    if let Some(var_2025) = &input.monitoring_output_config {
        let mut object_2026 = object.key("MonitoringOutputConfig").start_object();
        crate::json_ser::serialize_structure_monitoring_output_config(&mut object_2026, var_2025);
        object_2026.finish();
    }
    if let Some(var_2027) = &input.monitoring_resources {
        let mut object_2028 = object.key("MonitoringResources").start_object();
        crate::json_ser::serialize_structure_monitoring_resources(&mut object_2028, var_2027);
        object_2028.finish();
    }
    if let Some(var_2029) = &input.monitoring_app_specification {
        let mut object_2030 = object.key("MonitoringAppSpecification").start_object();
        crate::json_ser::serialize_structure_monitoring_app_specification(
            &mut object_2030,
            var_2029,
        );
        object_2030.finish();
    }
    if let Some(var_2031) = &input.stopping_condition {
        let mut object_2032 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_monitoring_stopping_condition(
            &mut object_2032,
            var_2031,
        );
        object_2032.finish();
    }
    if let Some(var_2033) = &input.environment {
        let mut object_2034 = object.key("Environment").start_object();
        for (key_2035, value_2036) in var_2033 {
            {
                object_2034.key(key_2035).string(value_2036);
            }
        }
        object_2034.finish();
    }
    if let Some(var_2037) = &input.network_config {
        let mut object_2038 = object.key("NetworkConfig").start_object();
        crate::json_ser::serialize_structure_network_config(&mut object_2038, var_2037);
        object_2038.finish();
    }
    if let Some(var_2039) = &input.role_arn {
        object.key("RoleArn").string(var_2039);
    }
}

pub fn serialize_structure_processing_s3_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingS3Input,
) {
    if let Some(var_2040) = &input.s3_uri {
        object.key("S3Uri").string(var_2040);
    }
    if let Some(var_2041) = &input.local_path {
        object.key("LocalPath").string(var_2041);
    }
    if let Some(var_2042) = &input.s3_data_type {
        object.key("S3DataType").string(var_2042.as_str());
    }
    if let Some(var_2043) = &input.s3_input_mode {
        object.key("S3InputMode").string(var_2043.as_str());
    }
    if let Some(var_2044) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2044.as_str());
    }
    if let Some(var_2045) = &input.s3_compression_type {
        object.key("S3CompressionType").string(var_2045.as_str());
    }
}

pub fn serialize_structure_dataset_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatasetDefinition,
) {
    if let Some(var_2046) = &input.athena_dataset_definition {
        let mut object_2047 = object.key("AthenaDatasetDefinition").start_object();
        crate::json_ser::serialize_structure_athena_dataset_definition(&mut object_2047, var_2046);
        object_2047.finish();
    }
    if let Some(var_2048) = &input.redshift_dataset_definition {
        let mut object_2049 = object.key("RedshiftDatasetDefinition").start_object();
        crate::json_ser::serialize_structure_redshift_dataset_definition(
            &mut object_2049,
            var_2048,
        );
        object_2049.finish();
    }
    if let Some(var_2050) = &input.local_path {
        object.key("LocalPath").string(var_2050);
    }
    if let Some(var_2051) = &input.data_distribution_type {
        object.key("DataDistributionType").string(var_2051.as_str());
    }
    if let Some(var_2052) = &input.input_mode {
        object.key("InputMode").string(var_2052.as_str());
    }
}

pub fn serialize_structure_processing_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingOutput,
) {
    if let Some(var_2053) = &input.output_name {
        object.key("OutputName").string(var_2053);
    }
    if let Some(var_2054) = &input.s3_output {
        let mut object_2055 = object.key("S3Output").start_object();
        crate::json_ser::serialize_structure_processing_s3_output(&mut object_2055, var_2054);
        object_2055.finish();
    }
    if let Some(var_2056) = &input.feature_store_output {
        let mut object_2057 = object.key("FeatureStoreOutput").start_object();
        crate::json_ser::serialize_structure_processing_feature_store_output(
            &mut object_2057,
            var_2056,
        );
        object_2057.finish();
    }
    if input.app_managed {
        object.key("AppManaged").boolean(input.app_managed);
    }
}

pub fn serialize_structure_processing_cluster_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingClusterConfig,
) {
    if let Some(var_2058) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2058).into()),
        );
    }
    if let Some(var_2059) = &input.instance_type {
        object.key("InstanceType").string(var_2059.as_str());
    }
    if let Some(var_2060) = &input.volume_size_in_gb {
        object.key("VolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2060).into()),
        );
    }
    if let Some(var_2061) = &input.volume_kms_key_id {
        object.key("VolumeKmsKeyId").string(var_2061);
    }
}

pub fn serialize_structure_provisioning_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProvisioningParameter,
) {
    if let Some(var_2062) = &input.key {
        object.key("Key").string(var_2062);
    }
    if let Some(var_2063) = &input.value {
        object.key("Value").string(var_2063);
    }
}

pub fn serialize_structure_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSource,
) {
    if let Some(var_2064) = &input.s3_data_source {
        let mut object_2065 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_s3_data_source(&mut object_2065, var_2064);
        object_2065.finish();
    }
    if let Some(var_2066) = &input.file_system_data_source {
        let mut object_2067 = object.key("FileSystemDataSource").start_object();
        crate::json_ser::serialize_structure_file_system_data_source(&mut object_2067, var_2066);
        object_2067.finish();
    }
}

pub fn serialize_structure_shuffle_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ShuffleConfig,
) {
    {
        object.key("Seed").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.seed).into()),
        );
    }
}

pub fn serialize_structure_collection_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CollectionConfiguration,
) {
    if let Some(var_2068) = &input.collection_name {
        object.key("CollectionName").string(var_2068);
    }
    if let Some(var_2069) = &input.collection_parameters {
        let mut object_2070 = object.key("CollectionParameters").start_object();
        for (key_2071, value_2072) in var_2069 {
            {
                object_2070.key(key_2071).string(value_2072);
            }
        }
        object_2070.finish();
    }
}

pub fn serialize_structure_transform_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformDataSource,
) {
    if let Some(var_2073) = &input.s3_data_source {
        let mut object_2074 = object.key("S3DataSource").start_object();
        crate::json_ser::serialize_structure_transform_s3_data_source(&mut object_2074, var_2073);
        object_2074.finish();
    }
}

pub fn serialize_structure_cognito_member_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CognitoMemberDefinition,
) {
    if let Some(var_2075) = &input.user_pool {
        object.key("UserPool").string(var_2075);
    }
    if let Some(var_2076) = &input.user_group {
        object.key("UserGroup").string(var_2076);
    }
    if let Some(var_2077) = &input.client_id {
        object.key("ClientId").string(var_2077);
    }
}

pub fn serialize_structure_oidc_member_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OidcMemberDefinition,
) {
    if let Some(var_2078) = &input.groups {
        let mut array_2079 = object.key("Groups").start_array();
        for item_2080 in var_2078 {
            {
                array_2079.value().string(item_2080);
            }
        }
        array_2079.finish();
    }
}

pub fn serialize_structure_property_name_query(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyNameQuery,
) {
    if let Some(var_2081) = &input.property_name_hint {
        object.key("PropertyNameHint").string(var_2081);
    }
}

pub fn serialize_structure_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) {
    if let Some(var_2082) = &input.name {
        object.key("Name").string(var_2082);
    }
    if let Some(var_2083) = &input.operator {
        object.key("Operator").string(var_2083.as_str());
    }
    if let Some(var_2084) = &input.value {
        object.key("Value").string(var_2084);
    }
}

pub fn serialize_structure_nested_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NestedFilters,
) {
    if let Some(var_2085) = &input.nested_property_name {
        object.key("NestedPropertyName").string(var_2085);
    }
    if let Some(var_2086) = &input.filters {
        let mut array_2087 = object.key("Filters").start_array();
        for item_2088 in var_2086 {
            {
                let mut object_2089 = array_2087.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_2089, item_2088);
                object_2089.finish();
            }
        }
        array_2087.finish();
    }
}

pub fn serialize_structure_blue_green_update_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlueGreenUpdatePolicy,
) {
    if let Some(var_2090) = &input.traffic_routing_configuration {
        let mut object_2091 = object.key("TrafficRoutingConfiguration").start_object();
        crate::json_ser::serialize_structure_traffic_routing_config(&mut object_2091, var_2090);
        object_2091.finish();
    }
    if let Some(var_2092) = &input.termination_wait_in_seconds {
        object.key("TerminationWaitInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2092).into()),
        );
    }
    if let Some(var_2093) = &input.maximum_execution_timeout_in_seconds {
        object.key("MaximumExecutionTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2093).into()),
        );
    }
}

pub fn serialize_structure_auto_rollback_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoRollbackConfig,
) {
    if let Some(var_2094) = &input.alarms {
        let mut array_2095 = object.key("Alarms").start_array();
        for item_2096 in var_2094 {
            {
                let mut object_2097 = array_2095.value().start_object();
                crate::json_ser::serialize_structure_alarm(&mut object_2097, item_2096);
                object_2097.finish();
            }
        }
        array_2095.finish();
    }
}

pub fn serialize_structure_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterRange,
) {
    if let Some(var_2098) = &input.integer_parameter_range_specification {
        let mut object_2099 = object
            .key("IntegerParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_integer_parameter_range_specification(
            &mut object_2099,
            var_2098,
        );
        object_2099.finish();
    }
    if let Some(var_2100) = &input.continuous_parameter_range_specification {
        let mut object_2101 = object
            .key("ContinuousParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_continuous_parameter_range_specification(
            &mut object_2101,
            var_2100,
        );
        object_2101.finish();
    }
    if let Some(var_2102) = &input.categorical_parameter_range_specification {
        let mut object_2103 = object
            .key("CategoricalParameterRangeSpecification")
            .start_object();
        crate::json_ser::serialize_structure_categorical_parameter_range_specification(
            &mut object_2103,
            var_2102,
        );
        object_2103.finish();
    }
}

pub fn serialize_structure_training_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingJobDefinition,
) {
    if let Some(var_2104) = &input.training_input_mode {
        object.key("TrainingInputMode").string(var_2104.as_str());
    }
    if let Some(var_2105) = &input.hyper_parameters {
        let mut object_2106 = object.key("HyperParameters").start_object();
        for (key_2107, value_2108) in var_2105 {
            {
                object_2106.key(key_2107).string(value_2108);
            }
        }
        object_2106.finish();
    }
    if let Some(var_2109) = &input.input_data_config {
        let mut array_2110 = object.key("InputDataConfig").start_array();
        for item_2111 in var_2109 {
            {
                let mut object_2112 = array_2110.value().start_object();
                crate::json_ser::serialize_structure_channel(&mut object_2112, item_2111);
                object_2112.finish();
            }
        }
        array_2110.finish();
    }
    if let Some(var_2113) = &input.output_data_config {
        let mut object_2114 = object.key("OutputDataConfig").start_object();
        crate::json_ser::serialize_structure_output_data_config(&mut object_2114, var_2113);
        object_2114.finish();
    }
    if let Some(var_2115) = &input.resource_config {
        let mut object_2116 = object.key("ResourceConfig").start_object();
        crate::json_ser::serialize_structure_resource_config(&mut object_2116, var_2115);
        object_2116.finish();
    }
    if let Some(var_2117) = &input.stopping_condition {
        let mut object_2118 = object.key("StoppingCondition").start_object();
        crate::json_ser::serialize_structure_stopping_condition(&mut object_2118, var_2117);
        object_2118.finish();
    }
}

pub fn serialize_structure_transform_job_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformJobDefinition,
) {
    if let Some(var_2119) = &input.max_concurrent_transforms {
        object.key("MaxConcurrentTransforms").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2119).into()),
        );
    }
    if let Some(var_2120) = &input.max_payload_in_mb {
        object.key("MaxPayloadInMB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2120).into()),
        );
    }
    if let Some(var_2121) = &input.batch_strategy {
        object.key("BatchStrategy").string(var_2121.as_str());
    }
    if let Some(var_2122) = &input.environment {
        let mut object_2123 = object.key("Environment").start_object();
        for (key_2124, value_2125) in var_2122 {
            {
                object_2123.key(key_2124).string(value_2125);
            }
        }
        object_2123.finish();
    }
    if let Some(var_2126) = &input.transform_input {
        let mut object_2127 = object.key("TransformInput").start_object();
        crate::json_ser::serialize_structure_transform_input(&mut object_2127, var_2126);
        object_2127.finish();
    }
    if let Some(var_2128) = &input.transform_output {
        let mut object_2129 = object.key("TransformOutput").start_object();
        crate::json_ser::serialize_structure_transform_output(&mut object_2129, var_2128);
        object_2129.finish();
    }
    if let Some(var_2130) = &input.transform_resources {
        let mut object_2131 = object.key("TransformResources").start_object();
        crate::json_ser::serialize_structure_transform_resources(&mut object_2131, var_2130);
        object_2131.finish();
    }
}

pub fn serialize_structure_auto_mls3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoMLS3DataSource,
) {
    if let Some(var_2132) = &input.s3_data_type {
        object.key("S3DataType").string(var_2132.as_str());
    }
    if let Some(var_2133) = &input.s3_uri {
        object.key("S3Uri").string(var_2133);
    }
}

pub fn serialize_structure_monitoring_s3_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringS3Output,
) {
    if let Some(var_2134) = &input.s3_uri {
        object.key("S3Uri").string(var_2134);
    }
    if let Some(var_2135) = &input.local_path {
        object.key("LocalPath").string(var_2135);
    }
    if let Some(var_2136) = &input.s3_upload_mode {
        object.key("S3UploadMode").string(var_2136.as_str());
    }
}

pub fn serialize_structure_custom_image(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomImage,
) {
    if let Some(var_2137) = &input.image_name {
        object.key("ImageName").string(var_2137);
    }
    if let Some(var_2138) = &input.image_version_number {
        object.key("ImageVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2138).into()),
        );
    }
    if let Some(var_2139) = &input.app_image_config_name {
        object.key("AppImageConfigName").string(var_2139);
    }
}

pub fn serialize_structure_usd(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::USD,
) {
    if input.dollars != 0 {
        object.key("Dollars").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.dollars).into()),
        );
    }
    if input.cents != 0 {
        object.key("Cents").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.cents).into()),
        );
    }
    if input.tenth_fractions_of_a_cent != 0 {
        object.key("TenthFractionsOfACent").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.tenth_fractions_of_a_cent).into()),
        );
    }
}

pub fn serialize_structure_integer_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameterRange,
) {
    if let Some(var_2140) = &input.name {
        object.key("Name").string(var_2140);
    }
    if let Some(var_2141) = &input.min_value {
        object.key("MinValue").string(var_2141);
    }
    if let Some(var_2142) = &input.max_value {
        object.key("MaxValue").string(var_2142);
    }
    if let Some(var_2143) = &input.scaling_type {
        object.key("ScalingType").string(var_2143.as_str());
    }
}

pub fn serialize_structure_continuous_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousParameterRange,
) {
    if let Some(var_2144) = &input.name {
        object.key("Name").string(var_2144);
    }
    if let Some(var_2145) = &input.min_value {
        object.key("MinValue").string(var_2145);
    }
    if let Some(var_2146) = &input.max_value {
        object.key("MaxValue").string(var_2146);
    }
    if let Some(var_2147) = &input.scaling_type {
        object.key("ScalingType").string(var_2147.as_str());
    }
}

pub fn serialize_structure_categorical_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameterRange,
) {
    if let Some(var_2148) = &input.name {
        object.key("Name").string(var_2148);
    }
    if let Some(var_2149) = &input.values {
        let mut array_2150 = object.key("Values").start_array();
        for item_2151 in var_2149 {
            {
                array_2150.value().string(item_2151);
            }
        }
        array_2150.finish();
    }
}

pub fn serialize_structure_labeling_job_s3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobS3DataSource,
) {
    if let Some(var_2152) = &input.manifest_s3_uri {
        object.key("ManifestS3Uri").string(var_2152);
    }
}

pub fn serialize_structure_labeling_job_sns_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LabelingJobSnsDataSource,
) {
    if let Some(var_2153) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_2153);
    }
}

pub fn serialize_structure_repository_auth_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RepositoryAuthConfig,
) {
    if let Some(var_2154) = &input.repository_credentials_provider_arn {
        object
            .key("RepositoryCredentialsProviderArn")
            .string(var_2154);
    }
}

pub fn serialize_structure_metrics_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricsSource,
) {
    if let Some(var_2155) = &input.content_type {
        object.key("ContentType").string(var_2155);
    }
    if let Some(var_2156) = &input.content_digest {
        object.key("ContentDigest").string(var_2156);
    }
    if let Some(var_2157) = &input.s3_uri {
        object.key("S3Uri").string(var_2157);
    }
}

pub fn serialize_structure_monitoring_baseline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringBaselineConfig,
) {
    if let Some(var_2158) = &input.baselining_job_name {
        object.key("BaseliningJobName").string(var_2158);
    }
    if let Some(var_2159) = &input.constraints_resource {
        let mut object_2160 = object.key("ConstraintsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_constraints_resource(
            &mut object_2160,
            var_2159,
        );
        object_2160.finish();
    }
    if let Some(var_2161) = &input.statistics_resource {
        let mut object_2162 = object.key("StatisticsResource").start_object();
        crate::json_ser::serialize_structure_monitoring_statistics_resource(
            &mut object_2162,
            var_2161,
        );
        object_2162.finish();
    }
}

pub fn serialize_structure_monitoring_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringInput,
) {
    if let Some(var_2163) = &input.endpoint_input {
        let mut object_2164 = object.key("EndpointInput").start_object();
        crate::json_ser::serialize_structure_endpoint_input(&mut object_2164, var_2163);
        object_2164.finish();
    }
}

pub fn serialize_structure_monitoring_app_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringAppSpecification,
) {
    if let Some(var_2165) = &input.image_uri {
        object.key("ImageUri").string(var_2165);
    }
    if let Some(var_2166) = &input.container_entrypoint {
        let mut array_2167 = object.key("ContainerEntrypoint").start_array();
        for item_2168 in var_2166 {
            {
                array_2167.value().string(item_2168);
            }
        }
        array_2167.finish();
    }
    if let Some(var_2169) = &input.container_arguments {
        let mut array_2170 = object.key("ContainerArguments").start_array();
        for item_2171 in var_2169 {
            {
                array_2170.value().string(item_2171);
            }
        }
        array_2170.finish();
    }
    if let Some(var_2172) = &input.record_preprocessor_source_uri {
        object.key("RecordPreprocessorSourceUri").string(var_2172);
    }
    if let Some(var_2173) = &input.post_analytics_processor_source_uri {
        object
            .key("PostAnalyticsProcessorSourceUri")
            .string(var_2173);
    }
}

pub fn serialize_structure_athena_dataset_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AthenaDatasetDefinition,
) {
    if let Some(var_2174) = &input.catalog {
        object.key("Catalog").string(var_2174);
    }
    if let Some(var_2175) = &input.database {
        object.key("Database").string(var_2175);
    }
    if let Some(var_2176) = &input.query_string {
        object.key("QueryString").string(var_2176);
    }
    if let Some(var_2177) = &input.work_group {
        object.key("WorkGroup").string(var_2177);
    }
    if let Some(var_2178) = &input.output_s3_uri {
        object.key("OutputS3Uri").string(var_2178);
    }
    if let Some(var_2179) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2179);
    }
    if let Some(var_2180) = &input.output_format {
        object.key("OutputFormat").string(var_2180.as_str());
    }
    if let Some(var_2181) = &input.output_compression {
        object.key("OutputCompression").string(var_2181.as_str());
    }
}

pub fn serialize_structure_redshift_dataset_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftDatasetDefinition,
) {
    if let Some(var_2182) = &input.cluster_id {
        object.key("ClusterId").string(var_2182);
    }
    if let Some(var_2183) = &input.database {
        object.key("Database").string(var_2183);
    }
    if let Some(var_2184) = &input.db_user {
        object.key("DbUser").string(var_2184);
    }
    if let Some(var_2185) = &input.query_string {
        object.key("QueryString").string(var_2185);
    }
    if let Some(var_2186) = &input.cluster_role_arn {
        object.key("ClusterRoleArn").string(var_2186);
    }
    if let Some(var_2187) = &input.output_s3_uri {
        object.key("OutputS3Uri").string(var_2187);
    }
    if let Some(var_2188) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2188);
    }
    if let Some(var_2189) = &input.output_format {
        object.key("OutputFormat").string(var_2189.as_str());
    }
    if let Some(var_2190) = &input.output_compression {
        object.key("OutputCompression").string(var_2190.as_str());
    }
}

pub fn serialize_structure_processing_s3_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingS3Output,
) {
    if let Some(var_2191) = &input.s3_uri {
        object.key("S3Uri").string(var_2191);
    }
    if let Some(var_2192) = &input.local_path {
        object.key("LocalPath").string(var_2192);
    }
    if let Some(var_2193) = &input.s3_upload_mode {
        object.key("S3UploadMode").string(var_2193.as_str());
    }
}

pub fn serialize_structure_processing_feature_store_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessingFeatureStoreOutput,
) {
    if let Some(var_2194) = &input.feature_group_name {
        object.key("FeatureGroupName").string(var_2194);
    }
}

pub fn serialize_structure_s3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataSource,
) {
    if let Some(var_2195) = &input.s3_data_type {
        object.key("S3DataType").string(var_2195.as_str());
    }
    if let Some(var_2196) = &input.s3_uri {
        object.key("S3Uri").string(var_2196);
    }
    if let Some(var_2197) = &input.s3_data_distribution_type {
        object
            .key("S3DataDistributionType")
            .string(var_2197.as_str());
    }
    if let Some(var_2198) = &input.attribute_names {
        let mut array_2199 = object.key("AttributeNames").start_array();
        for item_2200 in var_2198 {
            {
                array_2199.value().string(item_2200);
            }
        }
        array_2199.finish();
    }
}

pub fn serialize_structure_file_system_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileSystemDataSource,
) {
    if let Some(var_2201) = &input.file_system_id {
        object.key("FileSystemId").string(var_2201);
    }
    if let Some(var_2202) = &input.file_system_access_mode {
        object.key("FileSystemAccessMode").string(var_2202.as_str());
    }
    if let Some(var_2203) = &input.file_system_type {
        object.key("FileSystemType").string(var_2203.as_str());
    }
    if let Some(var_2204) = &input.directory_path {
        object.key("DirectoryPath").string(var_2204);
    }
}

pub fn serialize_structure_transform_s3_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformS3DataSource,
) {
    if let Some(var_2205) = &input.s3_data_type {
        object.key("S3DataType").string(var_2205.as_str());
    }
    if let Some(var_2206) = &input.s3_uri {
        object.key("S3Uri").string(var_2206);
    }
}

pub fn serialize_structure_traffic_routing_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrafficRoutingConfig,
) {
    if let Some(var_2207) = &input.r#type {
        object.key("Type").string(var_2207.as_str());
    }
    if let Some(var_2208) = &input.wait_interval_in_seconds {
        object.key("WaitIntervalInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2208).into()),
        );
    }
    if let Some(var_2209) = &input.canary_size {
        let mut object_2210 = object.key("CanarySize").start_object();
        crate::json_ser::serialize_structure_capacity_size(&mut object_2210, var_2209);
        object_2210.finish();
    }
}

pub fn serialize_structure_alarm(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Alarm,
) {
    if let Some(var_2211) = &input.alarm_name {
        object.key("AlarmName").string(var_2211);
    }
}

pub fn serialize_structure_integer_parameter_range_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameterRangeSpecification,
) {
    if let Some(var_2212) = &input.min_value {
        object.key("MinValue").string(var_2212);
    }
    if let Some(var_2213) = &input.max_value {
        object.key("MaxValue").string(var_2213);
    }
}

pub fn serialize_structure_continuous_parameter_range_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousParameterRangeSpecification,
) {
    if let Some(var_2214) = &input.min_value {
        object.key("MinValue").string(var_2214);
    }
    if let Some(var_2215) = &input.max_value {
        object.key("MaxValue").string(var_2215);
    }
}

pub fn serialize_structure_categorical_parameter_range_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameterRangeSpecification,
) {
    if let Some(var_2216) = &input.values {
        let mut array_2217 = object.key("Values").start_array();
        for item_2218 in var_2216 {
            {
                array_2217.value().string(item_2218);
            }
        }
        array_2217.finish();
    }
}

pub fn serialize_structure_capacity_size(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacitySize,
) {
    if let Some(var_2219) = &input.r#type {
        object.key("Type").string(var_2219.as_str());
    }
    if let Some(var_2220) = &input.value {
        object.key("Value").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2220).into()),
        );
    }
}
